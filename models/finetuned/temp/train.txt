<|startoftext|>
QUESTION: What makes a successful startup according to Paul Graham?

ANSWER: According to Paul Graham, a successful startup focuses on creating something people genuinely want. The most important factor is rapid growth - successful startups grow at 5-7% per week in their early stages. They start small with a narrow focus, solve real problems for early adopters, and expand gradually. Graham emphasizes that success comes from perseverance, adaptability, and understanding users' needs deeply rather than just pursuing wealth.
<|endoftext|>

<|startoftext|>
QUESTION: What makes a successful startup according to Paul Graham?

According to Paul Graham's essays: According to Paul Graham, a successful startup focuses on creating something people genuinely want. The most important factor is rapid growth - successful startups grow at 5-7% per week in their early stages. They start small with a narrow focus, solve real problems for early adopters, and expand gradually. Graham emphasizes that success comes from perseverance, adaptability, and understanding users' needs deeply rather than just pursuing wealth.
<|endoftext|>

<|startoftext|>
Q: What makes a successful startup according to Paul Graham?

A: According to Paul Graham, a successful startup focuses on creating something people genuinely want. The most important factor is rapid growth - successful startups grow at 5-7% per week in their early stages. They start small with a narrow focus, solve real problems for early adopters, and expand gradually. Graham emphasizes that success comes from perseverance, adaptability, and understanding users' needs deeply rather than just pursuing wealth.
<|endoftext|>

<|startoftext|>
QUESTION: What does Paul Graham think about programming languages?

ANSWER: Paul Graham believes programming languages significantly impact productivity and thinking. He favors concise, expressive languages like Lisp that minimize restrictions and maximize power. Graham argues that different languages are suited for different tasks, and the best programmers choose their tools based on appropriateness rather than familiarity. He values languages that allow bottom-up development and rapid prototyping.
<|endoftext|>

<|startoftext|>
QUESTION: What does Paul Graham think about programming languages?

According to Paul Graham's essays: Paul Graham believes programming languages significantly impact productivity and thinking. He favors concise, expressive languages like Lisp that minimize restrictions and maximize power. Graham argues that different languages are suited for different tasks, and the best programmers choose their tools based on appropriateness rather than familiarity. He values languages that allow bottom-up development and rapid prototyping.
<|endoftext|>

<|startoftext|>
Q: What does Paul Graham think about programming languages?

A: Paul Graham believes programming languages significantly impact productivity and thinking. He favors concise, expressive languages like Lisp that minimize restrictions and maximize power. Graham argues that different languages are suited for different tasks, and the best programmers choose their tools based on appropriateness rather than familiarity. He values languages that allow bottom-up development and rapid prototyping.
<|endoftext|>

<|startoftext|>
QUESTION: How does Paul Graham describe the ideal founder?

ANSWER: According to Paul Graham, the ideal founder is determined, resilient, and able to endure setbacks. They're resourceful problem-solvers who can adapt quickly. The best founders deeply understand their users, possess technical knowledge, and can create what users want. They're comfortable with uncertainty, make decisions quickly with limited information, and are both makers and communicators. Graham emphasizes that persistence matters more than brilliance.
<|endoftext|>

<|startoftext|>
QUESTION: How does Paul Graham describe the ideal founder?

According to Paul Graham's essays: According to Paul Graham, the ideal founder is determined, resilient, and able to endure setbacks. They're resourceful problem-solvers who can adapt quickly. The best founders deeply understand their users, possess technical knowledge, and can create what users want. They're comfortable with uncertainty, make decisions quickly with limited information, and are both makers and communicators. Graham emphasizes that persistence matters more than brilliance.
<|endoftext|>

<|startoftext|>
Q: How does Paul Graham describe the ideal founder?

A: According to Paul Graham, the ideal founder is determined, resilient, and able to endure setbacks. They're resourceful problem-solvers who can adapt quickly. The best founders deeply understand their users, possess technical knowledge, and can create what users want. They're comfortable with uncertainty, make decisions quickly with limited information, and are both makers and communicators. Graham emphasizes that persistence matters more than brilliance.
<|endoftext|>

<|startoftext|>
QUESTION: What is Paul Graham's philosophy on innovation?

ANSWER: Paul Graham views innovation as the result of curiosity and a desire to solve genuine problems. He believes that true innovation comes from identifying real needs rather than starting with a solution. Graham suggests that many great innovations are discovered accidentally while working on something else. He emphasizes that innovation requires both technical skill and understanding of user psychology.
<|endoftext|>

<|startoftext|>
QUESTION: What is Paul Graham's philosophy on innovation?

According to Paul Graham's essays: Paul Graham views innovation as the result of curiosity and a desire to solve genuine problems. He believes that true innovation comes from identifying real needs rather than starting with a solution. Graham suggests that many great innovations are discovered accidentally while working on something else. He emphasizes that innovation requires both technical skill and understanding of user psychology.
<|endoftext|>

<|startoftext|>
Q: What is Paul Graham's philosophy on innovation?

A: Paul Graham views innovation as the result of curiosity and a desire to solve genuine problems. He believes that true innovation comes from identifying real needs rather than starting with a solution. Graham suggests that many great innovations are discovered accidentally while working on something else. He emphasizes that innovation requires both technical skill and understanding of user psychology.
<|endoftext|>

<|startoftext|>
QUESTION: How should someone get startup ideas according to Paul Graham?

ANSWER: Paul Graham advises not to try to think of startup ideas deliberately. Instead, he recommends becoming the kind of person who has good ideas organically by working on problems you genuinely care about. Good startup ideas come from noticing problems in your own life, especially those affecting a growing market. He suggests looking for things that seem missing, problems you yourself have, or areas where you have specialized knowledge.
<|endoftext|>

<|startoftext|>
QUESTION: How should someone get startup ideas according to Paul Graham?

According to Paul Graham's essays: Paul Graham advises not to try to think of startup ideas deliberately. Instead, he recommends becoming the kind of person who has good ideas organically by working on problems you genuinely care about. Good startup ideas come from noticing problems in your own life, especially those affecting a growing market. He suggests looking for things that seem missing, problems you yourself have, or areas where you have specialized knowledge.
<|endoftext|>

<|startoftext|>
Q: How should someone get startup ideas according to Paul Graham?

A: Paul Graham advises not to try to think of startup ideas deliberately. Instead, he recommends becoming the kind of person who has good ideas organically by working on problems you genuinely care about. Good startup ideas come from noticing problems in your own life, especially those affecting a growing market. He suggests looking for things that seem missing, problems you yourself have, or areas where you have specialized knowledge.
<|endoftext|>

<|startoftext|>
According to Paul Graham's essays: According to Paul Graham, why is ideas important?

You'd expect big startup ideas to be
attractive, but actually they tend to repel you.  And that has a
bunch of consequences.  It means these ideas are invisible to most
people who try to think of startup ideas, because their subconscious
filters them out.  Even the most ambitious people are probably best
off approaching them obliquely.1. A New Search EngineThe best ideas are just on the right side of impossible.  I don't
know if this one is possible, but there are signs it might be.
Making a new search engine means competing with Google, and recently
I've noticed some cracks in their fortress.The point when it became clear to me that Microsoft had lost their
way was when they decided to get into the search business.  That
was not a natural move for Microsoft.  They did it because they
were afraid of Google, and Google was in the search business.  But
this meant (a) Google was now setting Microsoft's agenda, and (b)
Microsoft's agenda consisted of stuff they weren't good at.Microsoft : Google :: Google : Facebook.That does not by itself mean
there's room for a new search engine, but lately when using Google
search I've found myself nostalgic for the old days, when
Google was true to its own slightly aspy self.  Google used to give
me a page of the right answers, fast, with no clutter.  Now the
results seem inspired by the Scientologist principle that what's
true is what's true for you.  And the pages don't have the
clean, sparse feel they used to.  Google search results used to
look like the output of a Unix utility.  Now if I accidentally put
the cursor in the wrong place, anything might happen.The way to win here is to build the search engine all the hackers
use.  A search engine whose users consisted of the top 10,000 hackers
and no one else would be in a very powerful position despite its
small size, just as Google was when it was that search engine.  And
for the first time in over a decade the idea of switching seems
thinkable to me.Since anyone capable of starting this company is one of those 10,000
hackers, the route is at least straightforward: make the search
engine you yourself want.  Feel free to make it excessively hackerish.
Make it really good for code search, for example.  Would you like
search queries to be Turing complete?  Anything that gets you those
10,000 users is ipso facto good.Don't worry if something you want to do will constrain you in the
long term, because if you don't get that initial core of users,
there won't be a long term.  If you can just build something that
you and your friends genuinely prefer to Google, you're already
about 10% of the way to an IPO, just as Facebook was (though they
probably didn't realize it) when they got all the Harvard undergrads.2. Replace EmailEmail was not designed to be used the way we use it now.  Email is
not a messaging protocol.  It's a todo list.  Or rather, my inbox
is a todo list, and email is the way things get onto it.  But it
is a disastrously bad todo list.I'm open to different types of solutions to this problem, but I
suspect that tweaking the inbox is not enough, and that email has
to be replaced with a new protocol. 
This new protocol should be a todo list protocol, not
a messaging protocol, although there is a degenerate case where
what someone wants you to do is: read the following text.As a todo list protocol, the new protocol should give more power
to the recipient than email does.  I want there to be more restrictions
on what someone can put on my todo list.  And when someone can put
something on my todo list, I want them to tell me more about what
they want from me.  Do they want me to do something beyond just
reading some text?  How important is it?  (There obviously has to
be some mechanism to prevent people from saying everything is
important.)  When does it have to be done?This is one of those ideas that's like an irresistible force meeting
an immovable object.  On one hand, entrenched protocols are impossible
to replace.  On the other, it seems unlikely that people in
100 years will still be living in the same email hell we do now.
And if email is going to get replaced eventually, why not now?If you do it right, you may be able to avoid the usual chicken 
and egg problem new protocols face, because some of the most powerful
people in the world will be among the first to switch to it.  
They're all at the mercy of email too.Whatever you build, make it fast.  GMail has become painfully slow.

If you made something no better than GMail, but fast, that
alone would let you start to pull users away from GMail.GMail is slow because Google can't afford to spend a lot on it.
But people will pay for this.  I'd have no problem paying $50 a month.
Considering how much time I spend in email, it's kind of scary to
think how much I'd be justified in paying.  At least $1000 a month.
If I spend several hours a day reading and writing email, that would
be a cheap way to make my life better.3. Replace UniversitiesPeople are all over this idea lately, and I think they're onto
something.  I'm reluctant to suggest that an institution that's
been around for a millennium is finished just because of some mistakes
they made in the last few decades, but certainly in the last few
decades US universities seem to have been headed down the wrong
path.  One could do a lot better for a lot less money.I don't think universities will disappear.  They won't be replaced
wholesale.  They'll just lose the de facto monopoly on certain types
of learning that they once had.  There will be many different ways
to learn different things, and some may look quite different from
universities.   Y Combinator itself is arguably one of them.Learning is such a big problem that changing the way people do it
will have a wave of secondary effects.  For example, the name of
the university one went to is treated by a lot of people (correctly
or not) as a credential in its own right.  If learning breaks up
into many little pieces, credentialling may separate from it.  There
may even need to be replacements for campus social life (and oddly
enough, YC even has aspects of that).You could replace high schools too, but there you face bureaucratic
obstacles that would slow down a startup.  Universities seem the
place to start.4. Internet DramaHollywood has been slow to embrace the Internet.  That was a 
mistake, because I think we can now call a winner in the race between
delivery mechanisms, and it is the Internet, not cable.A lot of the reason is the horribleness of cable clients, also known
as TVs.  Our family didn't wait for Apple TV.  We hated our last
TV so much that a few months ago we replaced it with an iMac bolted
to the wall.  It's a little inconvenient to control it with a
wireless mouse, but the overall experience is much better than the
nightmare UI we had to deal with before.Some of the attention people currently devote to watching
movies and TV can be stolen by things that seem completely unrelated,
like social networking apps.  More can be stolen by things that are
a little more closely related, like games.  But there will probably
always remain some residual demand for conventional drama, where
you sit passively and watch as a plot happens.  So how do you deliver
drama via the Internet?  Whatever you make will have to be on a
larger scale than Youtube clips.  When people sit down to watch a
show, they want to know what they're going to get: either part
of a series with familiar characters, or a single longer "movie"
whose basic premise they know in advance.There are two ways delivery and payment could play out.  Either
some company like Netflix or Apple will be the app store for
entertainment, and you'll reach audiences through them.  Or the
would-be app stores will be too overreaching, or too technically
inflexible, and companies will arise to supply payment and streaming
a la carte to the producers of drama.  If that's the way things
play out, there will also be a need for such infrastructure companies.5. The Next Steve JobsI was talking recently to someone who knew Apple well, and I asked
him if the people now running the company would be able to keep
creating new things the way Apple had under Steve Jobs.  His answer
was simply "no."  I already feared that would be the answer.  I
asked more to see how he'd qualify it.  But he didn't qualify it
at all.  No, there will be no more great new stuff beyond whatever's
currently in the pipeline.  Apple's
revenues may continue to rise for a long time, but as Microsoft
shows, revenue is a lagging indicator in the technology business.So if Apple's not going to make the next iPad, who is?  None of the
existing players.  None of them are run by product visionaries, and
empirically you can't seem to get those by hiring them.  Empirically
the way you get a product visionary as CEO is for him to found the
company and not get fired.  So the company that creates the next
wave of hardware is probably going to have to be a startup.I realize it sounds preposterously ambitious for a startup to try
to become as big as Apple.  But no more ambitious than it was for
Apple to become as big as Apple, and they did it.  Plus a startup
taking on this problem now has an advantage the original Apple
didn't: the example of Apple.  Steve Jobs has shown us what's
possible.  That helps would-be successors both directly, as Roger
Bannister did, by showing how much better you can do than people
did before, and indirectly, as Augustus did, by lodging the idea
in users' minds that a single person could unroll the future 
for them. 
Now Steve is gone there's a vacuum we can all feel.  If a new company
led boldly into the future of hardware, users would follow.  The
CEO of that company, the "next Steve Jobs," might not measure up
to Steve Jobs. But he wouldn't have to.  He'd just have to do a
better job than Samsung and HP and Nokia, and that seems pretty
doable.6. Bring Back Moore's LawThe last 10 years have reminded us what Moore's Law actually says.
Till about 2002 you could safely misinterpret it as promising that
clock speeds would double every 18 months.  Actually what it says
is that circuit densities will double every 18 months.  It used to
seem pedantic to point that out.  Not any more.  Intel can no longer
give us faster CPUs, just more of them.This Moore's Law is not as good as the old one.  Moore's Law used
to mean that if your software was slow, all you had to do was wait,
and the inexorable progress of hardware would solve your problems.
Now if your software is slow you have to rewrite it to do more
things in parallel, which is a lot more work than waiting.It would be great if a startup could give us something of the old
Moore's Law back, by writing software that could make a large number
of CPUs look to the developer like one very fast CPU.  There are
several ways to approach this problem.  The most ambitious is to
try to do it automatically: to write a compiler that will parallelize
our code for us.  There's a name for this compiler, the sufficiently
smart compiler, and it is a byword for impossibility.  But is
it really impossible?  Is there no configuration of the bits in
memory of a present day computer that is this compiler?  If you
really think so, you should try to prove it, because that would be
an interesting result.  And if it's not impossible but simply very
hard, it might be worth trying to write it.  The expected value
would be high even if the chance of succeeding was low.The reason the expected value is so high is web services.  If you
could write software that gave programmers the convenience of the
way things were in the old days, you could offer it to them as a
web service.  And that would in turn mean that you got practically
all the users.Imagine there was another processor manufacturer that could still translate
increased circuit densities into increased clock speeds. They'd
take most of Intel's business.  And since web services mean that
no one sees their processors anymore, by writing the sufficiently
smart compiler you could create a situation indistinguishable from
you being that manufacturer, at least for the server market.The least ambitious way of approaching the problem is to start from
the other end, and offer programmers more parallelizable Lego blocks
to build programs out of, like Hadoop and MapReduce.   Then the
programmer still does much of the work of optimization.There's an intriguing middle ground where you build a semi-automatic
weapon—where there's a human in the loop.  You make something
that looks to the user like the sufficiently smart compiler, but
inside has people, using highly developed optimization tools to
find and eliminate bottlenecks in users' programs.   These people
might be your employees, or you might create a marketplace for
optimization.An optimization marketplace would be a way to generate the sufficiently
smart compiler piecemeal, because participants would immediately
start writing bots.  It would be a curious state of affairs if you
could get to the point where everything could be done by bots,
because then you'd have made the sufficiently smart compiler, but
no one person would have a complete copy of it.I realize how crazy all this sounds.  In fact, what I like about
this idea is all the different ways in which it's wrong.  The whole
idea of focusing on optimization is counter to the general trend
in software development for the last several decades.  Trying to
write the sufficiently smart compiler is by definition a mistake.
And even if it weren't, compilers are the sort of software that's
supposed to be created by open source projects, not companies.  Plus
if this works it will deprive all the programmers who take pleasure
in making multithreaded apps of so much amusing complexity. The
forum troll I have by now internalized doesn't even know where to
begin in raising objections to this project.  Now that's what I
call a startup idea.7. Ongoing DiagnosisBut wait, here's another that could face even greater resistance:
ongoing, automatic medical diagnosis.One of my tricks for generating startup ideas is to imagine the
ways in which we'll seem backward to future generations.  And I'm
pretty sure that to people 50 or 100 years in the future, it will
seem barbaric that people in our era waited till they had symptoms
to be diagnosed with conditions like heart disease and cancer.For example, in 2004 Bill Clinton found he was feeling short of
breath.  Doctors discovered that several of his arteries were over
90% blocked and 3 days later he had a quadruple bypass.  It seems
reasonable to assume Bill Clinton has the best medical care available.
And yet even he had to wait till his arteries were over 90% blocked
to learn that the number was over 90%.  Surely at some point in the
future we'll know these numbers the way we now know something like
our weight.  Ditto for cancer.  It will seem preposterous to future
generations that we wait till patients have physical symptoms to
be diagnosed with cancer.  Cancer will show up on some sort of radar
screen immediately.(Of course, what shows up on the radar screen may be different from
what we think of now as cancer.  I wouldn't be surprised if at any
given time we have ten or even hundreds of microcancers going at
once, none of which normally amount to anything.)A lot of the obstacles to ongoing diagnosis will come from the fact
that it's going against the grain of the medical profession.  The
way medicine has always worked is that patients come to doctors
with problems, and the doctors figure out what's wrong.  A lot of
doctors don't like the idea of going on the medical equivalent of
what lawyers call a "fishing expedition," where you go looking for
problems without knowing what you're looking for.  They call the
things that get discovered this way "incidentalomas," and they are
something of a nuisance.For example, a friend of mine once had her brain scanned as part
of a study.  She was horrified when the doctors running the study
discovered what appeared to be a large tumor.  After further testing,
it turned out to be a harmless cyst.  But it cost her a few days
of terror. A lot of doctors worry that if you start scanning people
with no symptoms, you'll get this on a giant scale: a huge number
of false alarms that make patients panic and require expensive and
perhaps even dangerous tests to resolve.  But I think that's just
an artifact of current limitations.  If people were scanned all the
time and we got better at deciding what was a real problem, my
friend would have known about this cyst her whole life and known
it was harmless, just as we do a birthmark.There is room for a lot of startups here.  
In addition to the technical obstacles all
startups face, and the bureaucratic obstacles all medical startups
face, they'll be going against thousands of years of medical
tradition.  But it will happen, and it will be a great thing—so
great that people in the future will feel as sorry for us as we do
for the generations that lived before anaesthesia and antibiotics.TacticsLet me conclude with some tactical advice.  If you want to take on
a problem as big as the ones I've discussed, don't make a direct
frontal attack on it.  Don't say, for example, that you're going
to replace email.  If you do that you raise too many expectations.
Your employees and investors will constantly be asking "are we there
yet?" and you'll have an army of haters waiting to see you fail.
Just say you're building todo-list software.  That sounds harmless.
People can notice you've replaced email when it's a fait accompli.
Empirically, the way to do really big things seems to be to start
with deceptively small things.  Want to dominate microcomputer
software?  Start by writing a Basic interpreter for a machine with
a few thousand users.  Want to make the universal web site?  Start
by building a site for Harvard undergrads to stalk one another.Empirically, it's not just for other people that you need to start
small.  You need to for your own sake.  Neither Bill Gates nor Mark
Zuckerberg knew at first how big their companies were going to get.
All they knew was that they were onto something.  Maybe it's a bad
idea to have really big ambitions initially, because the bigger
your ambition, the longer it's going to take, and the further you
project into the future, the more likely you'll get it wrong.I think the way to use these big ideas is not to try to identify a
precise point in the future and then ask yourself how to get from
here to there, like the popular image of a visionary.  You'll be
better off if you operate like Columbus and just head in a general
westerly direction.  Don't try to construct the future like a
building, because your current blueprint is almost certainly mistaken.
Start with something you know works, and when you expand, expand
westward.The popular image of the visionary is someone with a clear view of
the future, but empirically it may be better to have a blurry one.Notes
It's also one of the most important things VCs fail to
understand about startups.  Most expect founders to walk in with a
clear plan for the future, and judge them based on that.  Few
consciously realize that in the biggest successes there is the least
correlation between the initial plan and what the startup eventually
becomes.
This sentence originally read "GMail is painfully slow."
Thanks to Paul Buchheit for the correction.
Roger Bannister is famous as the first person to run a mile
in under 4 minutes.  But his world record only lasted 46 days.  Once
he showed it could be done, lots of others followed.  Ten years
later Jim Ryun ran a 3:59 mile as a high school junior.
If you want to be the next Apple, maybe you don't even want to start
with consumer electronics.  Maybe at first you make something hackers
use.  Or you make something popular but apparently unimportant,
like a headset or router.  All you need is a bridgehead.
Thanks to Sam Altman, Trevor Blackwell, 
Paul Buchheit, Patrick Collison, Aaron Iba, Jessica
Livingston, Robert Morris, Harj Taggar and Garry Tan
for reading drafts of this.

March 2012One of the more surprising things I've noticed while working
on Y Combinator is how frightening the most ambitious startup
ideas are.  In this essay I'm going to demonstrate
this phenomenon by describing some.  Any one of them
could make you a billionaire.  That might sound like an attractive
prospect, and yet when I describe these ideas you may
notice you find yourself shrinking away from them.Don't worry, it's not a sign of weakness.  Arguably it's a sign of
sanity.  The biggest startup ideas are terrifying.  And not just
because they'd be a lot of work.  The biggest ideas seem to threaten
your identity: you wonder if you'd have enough ambition to carry
them through.There's a scene in Being John Malkovich where the nerdy hero
encounters a very attractive, sophisticated woman.  She says to
him:

The answer is: In his essays, Paul Graham discusses ideas in depth. You'd expect big startup ideas to be
attractive, but actually they tend to repel you.  And that has a
bunch of consequences.  It means these ideas are invisible to most
people who try to think of star... He emphasizes the importance of ideas in the context of startups and innovation.
<|endoftext|>

<|startoftext|>
According to Paul Graham's essays: How does Paul Graham approach the topic of programming?

May 2003(This essay is derived from a guest lecture at Harvard, which incorporated
an earlier talk at Northeastern.)When I finished grad school in computer science I went
to art school to study painting.  A lot of people seemed surprised
that someone interested in computers would also be interested in painting.
They seemed to think that
hacking and painting were very different kinds of work-- that
hacking was cold, precise, and methodical, and that
painting was the frenzied expression of some primal urge.Both of these images are wrong.  Hacking and painting have a
lot in common.  In fact, of all the different types of people I've
known, hackers and painters are among the most alike.What hackers and painters have in common is that they're
both makers.  Along with composers, architects, and writers,
what hackers and painters are trying to do is make good things.
They're not doing research per se, though if in the course of
trying to make good things they discover some new technique,
so much the better.I've never liked the term "computer science."  The main
reason I don't like it is that there's no such thing.
Computer science is a
grab bag of tenuously related areas thrown together
by an accident of history, like Yugoslavia.
At one end you have people who are really mathematicians,
but call what they're doing computer science so they can get DARPA grants.
In the middle you have people working on
something like the natural history of computers-- studying the
behavior of algorithms for routing data through
networks, for example.  And then at the other extreme you
have the hackers, who are trying to
write interesting software, and for whom computers are just a
medium of expression, as concrete is for architects or
paint for painters.  It's as if
mathematicians, physicists, and architects all had to be in
the same department.Sometimes what the hackers do is called "software engineering,"
but this term is just as misleading.
Good software designers are no more engineers than architects are.
The border between architecture and engineering is not sharply
defined, but it's there.
It falls between what and how: architects decide what to do,
and engineers figure out how to do it.What and how should not be kept too separate.  You're
asking for trouble if you try to decide what to do without
understanding how to do it.
But hacking can certainly be more than just deciding how to
implement some spec.  At its best, it's creating the spec-- though
it turns out the best way to do that is to implement it.Perhaps one day
"computer science" will, like Yugoslavia, get broken up into its
component parts.  That might be a good thing.  Especially if it
meant independence for my native land, hacking.Bundling all these different types of work together in one
department may be convenient administratively, but it's confusing
intellectually. That's the other reason I don't like the name
"computer science."  Arguably the people in the middle are doing
something like an experimental science.  But the people at either
end, the hackers and the mathematicians, are not actually doing science.The mathematicians don't seem bothered by this.  They happily
set to work proving theorems like the other mathematicians
over in the math department, and probably soon stop noticing
that the building they work in says ``computer science'' on the
outside.  But for the hackers this label is a problem.
If what they're doing is called science, it makes them feel they
ought to be acting scientific.
So instead of doing what they really want to do, which is   
to design beautiful software, hackers in universities and
research labs feel they ought to be writing research papers.In the best case, the papers are just a formality.  Hackers write
cool software, and then write a paper about it, and the paper
becomes a proxy for the achievement represented by the software.
But often this mismatch causes problems.  It's easy to
drift away from building beautiful things toward building ugly
things that make more suitable subjects for research papers.Unfortunately, beautiful things don't always make the
best subjects for papers.
Number one, research must be original-- and
as anyone who has written a PhD dissertation knows, the way to
be sure that you're exploring virgin territory is to stake
out a piece of ground that no one wants.  Number two, research must be
substantial-- and awkward systems yield meatier papers,
because you can write about the obstacles you have to overcome
in order to get things done.  Nothing yields meaty problems like
starting with the wrong assumptions.  Most of AI is an example
of this rule; if you assume that knowledge can be represented
as a list of predicate logic expressions whose arguments represent
abstract concepts, you'll have a lot of
papers to write about how to make this work.  As Ricky Ricardo
used to say, "Lucy, you got a lot of explaining to do."The way to create something beautiful is often to make subtle
tweaks to something that already exists, or to combine existing
ideas in a slightly new way.  This kind of work is hard to
convey in a research paper.So why do universities and research labs continue to judge
hackers by publications?
For the same reason that "scholastic aptitude"
gets measured by simple-minded standardized tests, or
the productivity of programmers gets measured in lines of code.
These tests
are easy to apply, and there is nothing so tempting as an easy test
that kind of works.Measuring what hackers are actually trying to do, designing
beautiful software, would be much more difficult.  You need
a good sense of design to judge 
good design.  And
there is no correlation, except possibly
a negative 
one, between people's ability to recognize good
design and their confidence that they can.The only external test is time.  Over time, beautiful
things tend to thrive, and ugly
things tend to get discarded.  Unfortunately, the amounts of time
involved can be longer than human lifetimes.  Samuel Johnson
said it took a hundred years for a writer's reputation to
converge.  You have to wait for the writer's
influential friends to die, and then for all their followers
to die.I think hackers just have to resign themselves to having a large random
component in their reputations.  In this they are no different
from other makers.  In fact, they're lucky by comparison.   
The influence of fashion is not nearly so great in hacking as it
is in painting.There are worse things than having people misunderstand your
work.  A worse danger is that you
will yourself misunderstand your work.  Related fields are
where you go looking for ideas.  If you find yourself in the computer science
department, there is a natural temptation to believe, for example,
that hacking is the applied version of what theoretical computer
science is the theory of.   All
the time I was in graduate school I had an uncomfortable feeling
in the back of my mind that I ought to know more theory,
and that it was very remiss of me to have forgotten all that
stuff within three weeks of the final exam.Now I realize I was
mistaken.  Hackers need to understand the theory of computation
about as much as painters need to understand paint chemistry.
You need to know how to calculate time and
space complexity and about
Turing completeness.  You might also want to remember at
least the concept of a state machine, in case you have to write
a parser or a regular expression library.  Painters in fact   
have to remember a good deal more about paint chemistry than 
that.I've found that the best sources of ideas
are not the other fields that have the word "computer" in
their names, but the other fields inhabited by makers.
Painting has been a much richer source of ideas than the
theory of computation.For example, I was taught in college
that one ought to figure out a program
completely on paper
before even going near a computer.  I found that I did not
program this way.  I found that I liked to program
sitting in front of a computer, not a piece of paper.  Worse
still, instead of patiently writing out a complete program
and assuring myself it was correct, I tended to just spew
out code that was hopelessly broken, and gradually beat it into
shape.  Debugging, I was taught, was a kind of final pass where
you caught typos and oversights.  The way I worked, it
seemed like programming consisted of debugging.For a long time I felt bad about this, just as I once
felt bad that I didn't hold my pencil the way they taught me
to in elementary school.
If I had only looked over at
the other makers, the painters or the architects, I would
have realized that there was a name for what I was doing:
sketching.  As far as I can tell, the
way they taught me to program in college was all wrong.
You should figure out programs as you're writing them,
just as writers and painters and architects do.Realizing this has real implications for software design.
It means that a programming language should, above all, be
malleable.  A programming language is for 
thinking of
programs, not for expressing programs you've already thought
of.  It should be a pencil, not a pen.  Static typing would
be a fine idea if people actually did write programs the way
they taught me to in college.  But that's not how any of the  
hackers I know write programs.  We need a language that lets us
scribble and smudge and smear, not a language where you have
to sit with a teacup of types balanced on your knee and make
polite conversation with a strict old aunt of a compiler.While we're on the subject of static typing, identifying with
the makers will save us from another problem that afflicts
the sciences: math envy.  Everyone in the sciences
secretly believes that mathematicians are smarter than they are.  
I think mathematicians also believe this.  At any rate,
the result is that scientists tend to make their
work look as mathematical as possible.  In a field like
physics this probably doesn't do much harm, but the further you
get from the natural sciences, the more of a problem it
becomes.A page of formulas just looks so impressive.
(Tip: for extra impressiveness, use Greek variables.)  And
so there is a great temptation to work on problems you
can treat formally, rather than problems that are, say,
important.If hackers identified with other makers, like writers and
painters, they wouldn't feel tempted to do      
this.  Writers and painters don't suffer from math envy.
They feel as if they're doing something completely unrelated.
So are hackers, I think.If universities and research labs keep hackers from doing
the kind of work they want to do,
perhaps the place for them is in companies.
Unfortunately, most companies won't let hackers do what they
want either.  Universities and research labs force hackers
to be scientists, and companies force them to be engineers.I only discovered this myself quite recently.  When Yahoo bought
Viaweb, they asked me what I wanted to do.  I had never
liked the business side very much, and said that I just wanted to
hack.  When I got to Yahoo, I found that what hacking meant
to them was implementing software, not designing it.  Programmers
were seen as technicians who translated the visions (if
that is the word) of product managers into code.This seems to be the
default plan in big companies.  They do it because
it decreases the standard deviation of the outcome.
Only a small percentage of hackers can actually design software,
and it's hard for the
people running a company to pick these out.  So instead of
entrusting the future of the software to
one brilliant hacker, most companies set things up so that it is
designed by committee, and the hackers merely
implement the design.If you want to make money at some point, remember this,
because this is one of the reasons startups win.  Big companies want
to decrease the standard deviation of design outcomes because they
want to avoid disasters.  But when you damp oscillations, you
lose the high points as well as the low.  This is not a problem for
big companies, because they don't win by making great
products.  Big companies win by sucking less than other big companies.So if you can figure out a way to get in a
design war with a company big enough that its software is   
designed by product managers, they'll never be able to keep up
with you.  These opportunities are not easy to find, though.
It's hard to engage a big company in a design war,
just as it's hard to engage an opponent inside a castle in hand
to hand combat.  It would be pretty easy to write a better
word processor than Microsoft Word, for example, but Microsoft,
within the castle of their operating system monopoly,
probably wouldn't even notice if you did.The place to fight design wars is in new markets, where no one
has yet managed to establish any fortifications.  That's where
you can win big by taking the bold approach to design, and
having the same people both design and implement the product.  
Microsoft themselves did this at the start.  So did Apple.
And Hewlett-Packard.  I suspect almost every successful startup
has.So one way to build great software is to start your own
startup.  There are two problems with this, though.  One is
that in a startup you have to do so much besides write software.
At Viaweb I considered myself lucky if I
got to hack a quarter of the time.  And the things I had to   
do the other three quarters of the time ranged from tedious
to terrifying.  I have a benchmark for this, because I
once had to leave a board meeting to have
some cavities filled.  I remember sitting back in the
dentist's chair, waiting for the drill, and feeling like
I was on vacation.The other problem with startups is that there is not much
overlap between the kind of software that makes money and the
kind that's interesting to write.  Programming languages
are interesting to write, and Microsoft's first product was
one, in fact, but no one will pay for programming languages
now.  If you want to make money, you tend to be forced to work
on problems that are too nasty for anyone to solve for free.All makers face this problem.  Prices are
determined by supply and demand, and there is just not as much
demand for things that are fun to work on as there is for
things that solve the mundane problems of individual customers.
Acting in off-Broadway plays just doesn't pay as well as
wearing a gorilla suit in someone's booth at a
trade show.  Writing novels doesn't pay as well as writing
ad copy for garbage disposals.
And hacking programming languages doesn't pay as well
as figuring out how to connect some company's
legacy database to their Web server.I think the answer to this problem, in the case of software,
is a concept known to nearly all makers: the day job.
This phrase began with musicians, who
perform at night.  More generally, it means that you have one
kind of work you do for money, and another for love.Nearly all makers have day jobs early in their careers.
Painters and writers notoriously do.  If you're lucky
you can get a day job that's closely
related to your real work.  Musicians often
seem to work in record stores.  A hacker working on some
programming language or operating system might likewise be able to
get a day job using it.  When I say that the answer is for hackers to have day jobs, 
and work on beautiful software on the side, I'm not proposing
this as a new idea.  This is what open-source hacking is all   
about.  What I'm saying is that open-source is probably the right
model, because it has been independently confirmed by all the  
other makers.It seems surprising to me that any employer would be reluctant
to let hackers work on open-source projects.
At Viaweb, we would have been reluctant to hire anyone
who didn't.  When we interviewed
programmers, the main
thing we cared about was what kind of software they
wrote in their spare time.
You can't do anything really well unless
you love it, and if you love to hack you'll inevitably
be working on projects of your own. Because hackers are makers rather than scientists,
the right place to look for metaphors is not in the
sciences, but among other kinds of makers.  What else can painting
teach us about hacking?One thing we can learn, or at least confirm, from the
example of painting is how to learn to hack.  You learn to
paint mostly by doing it.
Ditto for hacking.  Most hackers don't learn to hack by
taking college courses in programming.  They learn to hack
by writing programs of their own at age thirteen.  Even in   
college classes, you learn to hack mostly by hacking. Because painters leave a trail of work behind them, you
can watch them learn by doing.  If you look at the work
of a painter in chronological order, you'll find that each  
painting builds on things that have been learned in previous
ones.  When there's something in
a painting that works very well, you can usually find version 
1 of it in a smaller form in some earlier painting.I think most makers work this way.  Writers and architects seem
to as well.  Maybe it would be good for hackers
to act more like painters, and regularly start over from scratch,
instead of continuing to work for years on one project, and
trying to incorporate all their later ideas as revisions.The fact that hackers learn to hack by doing it is another
sign of how different hacking is from the sciences.  Scientists
don't learn science by doing it, but by doing labs and problem sets.
Scientists start out doing work that's perfect, in the sense
that they're just trying to reproduce work someone else has 
already done for them.
Eventually, they get
to the point where they can do original work.
Whereas hackers, from the start, are doing original work; it's
just very bad.  So hackers start original, and get good, and
scientists start good, and get original.
The other way makers learn is from examples.
For a painter, a museum is a reference library of techniques.
For hundreds of years it has been part of the traditional
education of painters to copy the works of the great masters,
because copying forces you to look closely
at the way a painting is made.Writers do this too.
Benjamin Franklin learned to write by summarizing the points   
in the essays of Addison and Steele and then trying to
reproduce them.  Raymond Chandler did the same thing
with detective stories.Hackers, likewise, can learn to program by looking at 
good programs-- not just at what they do, but the source
code too.  One of the less publicized benefits
of the open-source movement is that it has made it easier
to learn to program.  When I learned to program, we had to rely
mostly on examples in books.  The one big chunk of
code available then was Unix, but even this was not   
open source.  Most of the people who read the source
read it in illicit photocopies of John Lions' book, which
though written in 1977 was not allowed to be published
until 1996.Another example we can take from painting is the way that
paintings are created by gradual refinement.  Paintings usually
begin with a sketch.
Gradually the details get filled in.
But it is not merely a process of filling in. Sometimes   
the original plans turn out to be mistaken.
Countless paintings,
when you look at them in xrays, turn out to have limbs that
have been moved or facial features that have been readjusted.Here's a case where we can learn from painting.  I think hacking
should work this way too.  It's unrealistic
to expect that the specifications for a program will be
perfect. You're
better off if you admit this up front, and write programs in
a way that allows specifications to change on the fly.(The structure of large companies makes this hard for them
to do, so here is another place where startups have an advantage.)Everyone by now presumably knows about the danger of premature
optimization.  I think we should be just as worried about
premature design-- deciding too early what
a program should do.The right tools can help us avoid
this danger.
A good programming language should, like oil paint, make it
easy to change your mind.  Dynamic typing is a win here because
you don't have to
commit to specific data representations up front.
But the key to flexibility, I think, is to make the language
very abstract.
The easiest program to change is one that's very short.
This sounds like a paradox, but a great painting
has to be better than it has to be.
For example, when Leonardo
painted the portrait of Ginevra de Benci
in the National Gallery, he put a juniper bush behind her head.
In it he carefully
painted each individual leaf.  Many painters might have thought,
this is just something to put in the background to frame
her head.  No one will look that closely at it.Not Leonardo.  How hard he worked on part of a painting didn't
depend at all on how closely he expected anyone to look at it.
He was like Michael Jordan.  Relentless.Relentlessness wins because, in the aggregate, unseen details
become visible.
When people walk by the portrait of Ginevra de Benci,
their attention is often immediately arrested by it,
even before they look at the label and notice that it says
Leonardo da Vinci.  All those unseen details combine to produce
something that's just stunning, like a thousand barely audible
voices all singing in tune.Great software, likewise, requires a fanatical devotion to
beauty.  If you look inside good software, you find that
parts no one is ever supposed to see are beautiful too.
I'm not claiming I write great software, but I
know that when it comes to code I behave in a way that would
make me eligible for prescription drugs if I approached everyday
life the same way.
It drives me crazy to see code that's badly indented,
or that uses ugly variable names.If a hacker were a mere implementor, turning a spec into code, then
he could just work his way through it from one end to the other like
someone digging a ditch.  But if the hacker is a creator, we have
to take inspiration into account.In hacking, like painting,
work comes in cycles.  Sometimes you get excited about some
new project and you want to work sixteen hours a day on it. 
Other times nothing seems interesting.To do good work you have to take these cycles into
account, because they're affected by how you react to them.
When you're driving a
car with a manual transmission on a hill, you have to back off
the clutch sometimes to avoid stalling.  Backing
off can likewise prevent ambition from stalling.
In both painting and hacking there are some
tasks that are terrifyingly ambitious, and others that are
comfortingly routine.  It's a good idea to save some easy
tasks for moments when you would otherwise stall.In hacking, this can literally mean saving up bugs.
I like debugging: it's the
one time that hacking is as straightforward as   
people think it is.  You have a
totally constrained problem, and all you have to do is solve
it.  Your program is supposed to do x.  Instead it does y.
Where does it go wrong? You know you're going to win
in the end.  It's as relaxing as painting a wall.The example of painting can teach us not only how to manage our
own work, but how to work together.  A lot of the
great art of the past is the work of multiple hands, though
there may only be one name on the wall next to it in the
museum.  Leonardo was an apprentice in the workshop of
Verrocchio and painted one of the angels in his Baptism of
Christ.  This sort of thing was the rule, not the exception.
Michelangelo was considered especially dedicated for insisting
on painting all the figures on the ceiling of the Sistine
Chapel himself.As far as I know, when painters worked together on a painting,
they never worked on the same parts.  It was common
for the master to paint the principal figures and for assistants
to paint the others and the background.  But you never had
one guy painting over the work of another.I think this is the right model for collaboration in software
too.  Don't push it too far.  When a piece of code is
being hacked by three or four different people, no one of whom
really owns it, it will end up being like a common-room.  It will
tend to feel bleak and abandoned, and accumulate cruft.
The right
way to collaborate, I think, is to divide projects into sharply
defined modules, each with a definite owner, and with interfaces
between them that are as carefully designed and, if possible,
as articulated as programming languages.Like painting, most software is intended for
a human audience.  And so hackers, like painters, must have
empathy to do really great work.  You have to be able to see
things from the user's point of view.When I was a kid I was always being told to look at things from
someone else's point of view.  What this always meant in
practice was to do what someone else wanted, instead of what
I wanted.  This of course gave empathy a bad name, and I made a
point of not cultivating it.Boy, was I wrong.  It turns out that looking at things from 
other people's point of view is practically the secret of
success.  It doesn't necessarily mean being self-sacrificing.
Far from it.  Understanding how someone else sees things
doesn't imply that you'll act in his interest; in some
situations-- in war, for example-- you want to do exactly
the opposite. Most makers make things for a human audience.
And to engage an audience you have to understand what they need.
Nearly all the greatest paintings are paintings of people,
for example, because people are what people are interested in.Empathy is probably the single most important difference
between a good hacker and a great one.  Some hackers
are quite smart, but when it comes to empathy are
practically solipsists.  It's hard for such      
people to design great software , because they can't
see things from the user's point of view.One way to tell how good people are at empathy is to watch
them explain a technical question to someone without a technical
background.  We probably all know people who, though otherwise smart,
are just comically bad at this.  If someone asks them at
a dinner party what a programming language is, they'll
say something like ``Oh, a high-level language is what
the compiler uses as input to generate object code.''
High-level language?  Compiler?  Object code?  Someone who 
doesn't know what a programming language is obviously doesn't
know what these things are, either.Part of what software has to do is explain itself.  So to   
write good software you have to understand how little users   
understand.
They're going to walk up to the software with no preparation, and
it had better do what they guess it will, because they're
not going to read the manual.  The best system I've ever seen 
in this respect was the original Macintosh, in 1985.
It did what software almost never does: it just worked. Source code, too, should explain itself.  If I could get people to
remember just one quote about programming, it would be the
one at the beginning of Structure and Interpretation of Computer
Programs.

and pushed the medium
so far that every playwright since has had to live in his shadow.
Albrecht Durer did the same thing with engraving, and Jane Austen
with the novel.Over and over we see the same pattern.  A new medium appears, and
people are so excited about it that they explore most of its
possibilities in the first couple generations.   Hacking seems
to be in this phase now.Painting was not, in Leonardo's time, as cool as his work
helped make it.
How cool hacking turns out to be will depend on what we can
do with this new medium.

You need to have 
empathy not just for your users, but for your readers.  It's in  
your interest, because you'll be one of them.
Many a hacker has written a program only to
find on returning to it six months later that he has no idea   
how it works.  I know several people who've sworn off Perl after
such experiences. Lack of empathy is associated with intelligence, to the point
that there is even something of a fashion for it in some places.
But I don't think there's any correlation.
You can do well in math and
the natural sciences without having to learn empathy, and people in these
fields tend to be smart, so the two qualities have come to be
associated.  But there are plenty of dumb people who are bad at
empathy too.  Just listen to the people who call in with questions on
talk shows.  They ask whatever it is they're asking in
such a roundabout way
that the hosts often have to rephrase the question for them.So, if hacking works like painting and writing, is it as cool?
After all, you only get one life.
You might as well spend it working on something great.Unfortunately, the question is hard to answer.  There is always
a big time lag in prestige.  It's like light from a distant star.
Painting has prestige now because of great work people did five hundred
years ago.  At the time, no one thought
these paintings were as important as we do today.  It would have
seemed very odd to people at the time that Federico da Montefeltro,
the Duke of Urbino, would one day be known mostly as the guy
with the strange nose in a painting 
by Piero della Francesca.So while I admit that hacking doesn't seem as cool as painting now,
we should remember that painting itself didn't seem as cool in
its glory days as it does now.What we can say with some confidence is that these are the glory
days of hacking.  In most fields the great work is done early on.
The paintings made between 1430 and 1500 are still unsurpassed.
Shakespeare appeared just as professional theater was being born,

The answer is: In his essays, Paul Graham discusses programming in depth. May 2003(This essay is derived from a guest lecture at Harvard, which incorporated
an earlier talk at Northeastern.)When I finished grad school in computer science I went
to art school to study painti... He emphasizes the importance of programming in the context of startups and innovation.
<|endoftext|>

<|startoftext|>
According to Paul Graham's essays: What are Paul Graham's views on technology?

November 2012The way to get startup ideas is not to try to think of startup
ideas.  It's to look for problems, preferably problems you have
yourself.The very best startup ideas tend to have three things in common:
they're something the founders themselves want, that they themselves
can build, and that few others realize are worth doing.  Microsoft,
Apple, Yahoo, Google, and Facebook all began this way.
ProblemsWhy is it so important to work on a problem you have?  Among other
things, it ensures the problem really exists.  It sounds obvious
to say you should only work on problems that exist.  And yet by far
the most common mistake startups make is to solve problems no one
has.I made it myself.  In 1995 I started a company to put art galleries
online.  But galleries didn't want to be online.  It's not how the
art business works.  So why did I spend 6 months working on this
stupid idea?  Because I didn't pay attention to users.  I invented
a model of the world that didn't correspond to reality, and worked
from that.  I didn't notice my model was wrong until I tried
to convince users to pay for what we'd built.  Even then I took
embarrassingly long to catch on.  I was attached to my model of the
world, and I'd spent a lot of time on the software.  They had to
want it!Why do so many founders build things no one wants?  Because they
begin by trying to think of startup ideas.  That m.o. is doubly
dangerous: it doesn't merely yield few good ideas; it yields bad
ideas that sound plausible enough to fool you into working on them.At YC we call these "made-up" or "sitcom" startup ideas.  Imagine
one of the characters on a TV show was starting a startup.  The
writers would have to invent something for it to do.  But coming
up with good startup ideas is hard.  It's not something you can do
for the asking.  So (unless they got amazingly lucky) the writers
would come up with an idea that sounded plausible, but was actually
bad.For example, a social network for pet owners.  It doesn't sound
obviously mistaken.  Millions of people have pets.  Often they care
a lot about their pets and spend a lot of money on them.  Surely
many of these people would like a site where they could talk to
other pet owners.  Not all of them perhaps, but if just 2 or 3
percent were regular visitors, you could have millions of users.
You could serve them targeted offers, and maybe charge for premium
features. 
The danger of an idea like this is that when you run it by your
friends with pets, they don't say "I would never use this." They
say "Yeah, maybe I could see using something like that." Even when
the startup launches, it will sound plausible to a lot of people.
They don't want to use it themselves, at least not right now, but
they could imagine other people wanting it.  Sum that reaction
across the entire population, and you have zero users.

WellWhen a startup launches, there have to be at least some users who
really need what they're making — not just people who could see
themselves using it one day, but who want it urgently.  Usually
this initial group of users is small, for the simple reason that
if there were something that large numbers of people urgently needed
and that could be built with the amount of effort a startup usually
puts into a version one, it would probably already exist.  Which
means you have to compromise on one dimension: you can either build
something a large number of people want a small amount, or something
a small number of people want a large amount.  Choose the latter.
Not all ideas of that type are good startup ideas, but nearly all
good startup ideas are of that type.Imagine a graph whose x axis represents all the people who might
want what you're making and whose y axis represents how much they
want it.  If you invert the scale on the y axis, you can envision
companies as holes.  Google is an immense crater: hundreds of
millions of people use it, and they need it a lot.  A startup just
starting out can't expect to excavate that much volume.  So you
have two choices about the shape of hole you start with.  You can
either dig a hole that's broad but shallow, or one that's narrow
and deep, like a well.Made-up startup ideas are usually of the first type.  Lots of people
are mildly interested in a social network for pet owners.Nearly all good startup ideas are of the second type.  Microsoft
was a well when they made Altair Basic.  There were only a couple
thousand Altair owners, but without this software they were programming
in machine language.  Thirty years later Facebook had the same
shape.  Their first site was exclusively for Harvard students, of
which there are only a few thousand, but those few thousand users
wanted it a lot.When you have an idea for a startup, ask yourself: who wants this
right now?  Who wants this so much that they'll use it even when
it's a crappy version one made by a two-person startup they've never
heard of?  If you can't answer that, the idea is probably bad. 
You don't need the narrowness of the well per se.  It's depth you
need; you get narrowness as a byproduct of optimizing for depth
(and speed).  But you almost always do get it.  In practice the
link between depth and narrowness is so strong that it's a good
sign when you know that an idea will appeal strongly to a specific
group or type of user.But while demand shaped like a well is almost a necessary condition
for a good startup idea, it's not a sufficient one.  If Mark
Zuckerberg had built something that could only ever have appealed
to Harvard students, it would not have been a good startup idea.
Facebook was a good idea because it started with a small market
there was a fast path out of.  Colleges are similar enough that if
you build a facebook that works at Harvard, it will work at any
college. So you spread rapidly through all the colleges.  Once you
have all the college students, you get everyone else simply by
letting them in.Similarly for Microsoft: Basic for the Altair; Basic for other
machines; other languages besides Basic; operating systems;
applications; IPO.
SelfHow do you tell whether there's a path out of an idea?  How do you
tell whether something is the germ of a giant company, or just a
niche product?  Often you can't. The founders of Airbnb didn't
realize at first how big a market they were tapping.  Initially
they had a much narrower idea.  They were going to let hosts rent
out space on their floors during conventions.  They didn't foresee
the expansion of this idea; it forced itself upon them gradually.
All they knew at first is that they were onto something.  That's
probably as much as Bill Gates or Mark Zuckerberg knew at first.Occasionally it's obvious from the beginning when there's a path
out of the initial niche.  And sometimes I can see a path that's
not immediately obvious; that's one of our specialties at YC.  But
there are limits to how well this can be done, no matter how much
experience you have.  The most important thing to understand about
paths out of the initial idea is the meta-fact that these are hard
to see.So if you can't predict whether there's a path out of an idea, how
do you choose between ideas?  The truth is disappointing but
interesting: if you're the right sort of person, you have the right
sort of hunches.  If you're at the leading edge of a field that's
changing fast, when you have a hunch that something is worth doing,
you're more likely to be right.In Zen and the Art of Motorcycle Maintenance, Robert Pirsig says:

I think the reason is that the subset of ideas that count as research
is so narrow that it's unlikely that a project that satisfied that
constraint would also satisfy the orthogonal constraint of solving
users' problems.  Whereas when students (or professors) build
something as a side-project, they automatically gravitate toward
solving users' problems — perhaps even with an additional energy
that comes from being freed from the constraints of research.
CompetitionBecause a good idea should seem obvious, when you have one you'll
tend to feel that you're late.  Don't let that deter you.  Worrying
that you're late is one of the signs of a good idea.  Ten minutes
of searching the web will usually settle the question.  Even if you
find someone else working on the same thing, you're probably not
too late.  It's exceptionally rare for startups to be killed by
competitors — so rare that you can almost discount the possibility.
So unless you discover a competitor with the sort of lock-in that
would prevent users from choosing you, don't discard the idea.If you're uncertain, ask users.  The question of whether you're too
late is subsumed by the question of whether anyone urgently needs
what you plan to make.  If you have something that no competitor
does and that some subset of users urgently need, you have a
beachhead.  
The question then is whether that beachhead is big enough. Or more
importantly, who's in it: if the beachhead consists of people doing
something lots more people will be doing in the future, then it's
probably big enough no matter how small it is.  For example, if
you're building something differentiated from competitors by the
fact that it works on phones, but it only works on the newest phones,
that's probably a big enough beachhead.Err on the side of doing things where you'll face competitors.
Inexperienced founders usually give competitors more credit than
they deserve.  Whether you succeed depends far more on you than on
your competitors.  So better a good idea with competitors than a
bad one without.You don't need to worry about entering a "crowded market" so long
as you have a thesis about what everyone else in it is overlooking.
In fact that's a very promising starting point.  Google was that
type of idea.  Your thesis has to be more precise than "we're going
to make an x that doesn't suck" though. You have to be able to
phrase it in terms of something the incumbents are overlooking.
Best of all is when you can say that they didn't have the courage
of their convictions, and that your plan is what they'd have done
if they'd followed through on their own insights.  Google was that
type of idea too.  The search engines that preceded them shied away
from the most radical implications of what they were doing — particularly 
that the better a job they did, the faster users would
leave.A crowded market is actually a good sign, because it means both
that there's demand and that none of the existing solutions are
good enough.  A startup can't hope to enter a market that's obviously
big and yet in which they have no competitors.  So any startup that
succeeds is either going to be entering a market with existing
competitors, but armed with some secret weapon that will get them
all the users (like Google), or entering a market that looks small
but which will turn out to be big (like Microsoft).

The answer is: In his essays, Paul Graham discusses technology in depth. November 2012The way to get startup ideas is not to try to think of startup
ideas.  It's to look for problems, preferably problems you have
yourself.The very best startup ideas tend to have three thin... He emphasizes the importance of technology in the context of startups and innovation.
<|endoftext|>

<|startoftext|>
According to Paul Graham's essays: According to Paul Graham, why is innovation important?

You should get another multiple of two, at
least, by eliminating the drag 
of the pointy-haired middle
manager who would be your boss in a big company.
Then there is one more multiple: how much smarter are you
than your job description expects you to be?
Suppose another multiple of three.  Combine all these multipliers, and I'm
claiming you could be 36 times more 
productive than you're expected to be in a random corporate
job.

If a fairly good hacker is worth $80,000 a year at a 
big company, then a smart
hacker working very hard without any corporate
bullshit to slow him down should be able to do work worth about
$3 million a year.Like all back-of-the-envelope calculations, this one
has a lot of wiggle room.  I wouldn't try to
defend the actual numbers.  But I stand by the 
structure of the calculation.  I'm not claiming
the multiplier is precisely 36, but it is certainly more
than 10, and probably rarely as high as 100.If $3 million a year seems
high, remember that we're talking about the limit case:
the case where you not only have zero leisure time
but indeed work so hard that you endanger your health.Startups are not magic.  They don't change the laws of
wealth creation.  They just represent a point at the far end of the curve.
There is a conservation law at work here: if
you want to make a million dollars, you have to endure a 
million dollars' worth of pain.  
For example, one way to
make a million dollars would be to work for the 
Post Office your whole life, and save every penny of your 
salary.  Imagine the stress of working for the Post 
Office for fifty years.   In a startup you compress all
this stress into three or four years.  You do tend to get a 
certain 
bulk discount if you buy the economy-size pain,
but you can't evade the fundamental conservation law.
If starting a startup were easy, everyone would do it.Millions, not BillionsIf $3 million a year seems high to some people, it will seem
low to others.  Three million? 
How do I get to be a billionaire, like Bill Gates?So let's get Bill Gates out of the way right now.  It's not
a good idea to use famous rich people 
as examples, because the press only 
write about the very richest, and these tend to be outliers.
Bill Gates is a smart, determined, and hardworking man,
but you need more than
that to make as much money as he has.  You also need to be
very lucky.There is a large random
factor in the success of any company.  So the guys you end 
up reading about in the papers are the ones who are very 
smart, totally dedicated, and win the lottery.
Certainly Bill is smart and dedicated, but Microsoft also 
happens to have been the beneficiary of one of the most spectacular
blunders in the history of business: the licensing deal for
DOS.  No doubt Bill did 
everything he could to steer IBM into making that blunder, 
and he has done an excellent job of exploiting it, but if
there had been one person with a brain on IBM's side,
Microsoft's future would have been very different.
Microsoft at that stage had little leverage over IBM.
They were effectively a component supplier.  If IBM had 
required an exclusive license, as they should have, Microsoft
would still have signed the deal.  It would still have
meant a lot of money for them,  and IBM
could easily have gotten an operating system elsewhere.Instead IBM ended up using all its power in the market
to give Microsoft control of the PC standard.  From 
that point, all Microsoft had to do was execute.  They
never had to bet the company on a bold decision.  All they
had to do was play hardball with licensees and copy more
innovative products reasonably promptly.If IBM hadn't made this mistake, Microsoft would
still have been a successful company, but it
could not have grown so big so fast. 
Bill Gates would be rich, but he'd be somewhere
near the bottom of the Forbes 400 with the other guys his age.There are a lot of ways to get
rich, and this essay is about only one of them.  This
essay is about how to make money by creating wealth and
getting paid for it.  There are plenty of other ways to 
get money, including chance, speculation, marriage, inheritance, 
theft, extortion, fraud, monopoly,
graft, lobbying,
counterfeiting, and prospecting.  Most of the greatest fortunes
have probably involved several of these.The advantage of creating wealth, as a way to get rich,
is not just that it's more legitimate 
(many of the other methods are now illegal) 
but that it's more
straightforward.  You just have to do something people want.Money Is Not WealthIf you want to create wealth, it will help to understand what it is.  
Wealth is not the same thing as money.

One piece of evidence is what happened to countries
that tried to return to the old model, like the Soviet
Union, and to a lesser extent Britain under the labor
governments of the 1960s and early 1970s.  Take away the incentive
of wealth, and technical innovation grinds to a halt.Remember what a startup is, economically: 
a way of saying, I want to work faster.  Instead of accumulating
money slowly by being paid a regular wage for fifty years, I 
want to get it over with as soon as possible.  So governments
that forbid you to accumulate wealth are in effect decreeing
that you work slowly.  They're willing to let you earn $3 million over
fifty years, but they're not willing to let you work so hard that
you can do it in two.  They are like
the corporate boss that you can't go to and say, I want to work
ten times as hard, so please pay me ten times a much.
Except this is not a boss you can escape by starting your own
company.The problem with working slowly is not just that technical
innovation happens slowly.  It's that it tends not to happen at all.
It's only when you're deliberately looking for hard problems,
as a way to use speed to the greatest advantage, that you take
on this kind of project.  Developing new technology is a 
pain in the ass. It is, as Edison said, one percent 
inspiration and ninety-nine percent perspiration.  
Without the incentive of wealth, no one wants to do it.
Engineers will work on sexy projects like fighter planes and moon
rockets for ordinary salaries, but more mundane technologies
like light bulbs or semiconductors have to be developed by entrepreneurs.Startups
are not just something that happened in Silicon Valley in 
the last couple decades.  Since it became possible to
get rich by creating wealth, everyone who has done it has
used essentially the same recipe: measurement and leverage,
where measurement comes from working with a small
group, and leverage from developing new techniques.
The recipe was the same in Florence in 1200 as it is 
in Santa Clara today.Understanding this may help to answer an important question:
why Europe grew so powerful.
Was it something about the geography of 
Europe?  Was it that Europeans are somehow racially superior?
Was it their religion?  The answer (or at least
the proximate cause) may be that the
Europeans 
rode on the crest of a powerful new idea: allowing those who
made a lot of money to keep it.Once you're allowed to do that, 
people who want to get rich can do it by generating
wealth instead of stealing it.
The resulting technological growth translates not only 
into wealth but into military power.  The theory that led to
the stealth plane was developed by a Soviet mathematician.
But because the Soviet Union didn't have a computer industry,
it remained for them a theory;
they didn't have hardware capable of executing the calculations
fast enough to design an actual airplane.In that respect the Cold War teaches the same lesson as
World War II and, for that matter, most wars in recent history.
Don't let a ruling
class of warriors and politicians squash the entrepreneurs.
The same recipe that makes individuals rich
makes countries powerful.  Let the nerds keep their lunch
money, and you rule the world.Notes
One valuable thing you tend to get only in startups is
uninterruptability.  Different kinds of
work have different time quanta.  Someone proofreading a
manuscript
could probably be interrupted every fifteen minutes
with little loss of productivity.  But the time quantum for
hacking is very long: it might take an hour just to load
a problem into your head.  So the
cost of having someone from personnel
call you about a form you forgot to fill out can be huge.This is why hackers give you such a baleful stare as they
turn from their screen to answer your question.  Inside
their heads a giant house of cards is tottering.The mere possibility of being interrupted deters hackers
from starting hard projects.  This is why they
tend to work late at night, and why it's next to impossible
to write great software in a cubicle (except late at night).One great advantage of startups is that they don't yet have
any of the people who interrupt you.  There is no personnel
department, and thus no form nor anyone to call you about it.
Faced with the idea that people working for startups might be
20 or 30 times as productive as those working for large companies,
executives at large companies will naturally wonder, how could
I get the people working for me to do that?  The answer is
simple: pay them to.Internally most companies are run like Communist states.
If you believe in free markets, why not turn your company into one?Hypothesis: A company will be maximally profitable when each
employee is paid in proportion to the wealth they generate.
Until recently even governments sometimes didn't grasp the
distinction between money and wealth.  Adam
Smith (Wealth of Nations, v:i) mentions several
that tried to preserve their
"wealth" by forbidding the export of gold or silver.
But having more of the medium of exchange would not make
a country richer; if you have more money chasing the same
amount of material wealth, the only result is higher prices.
There are many senses of the word "wealth," not all of
them material.  I'm not trying to make a deep philosophical
point here about which
is the true kind.  I'm writing about one specific,
rather technical sense of the word "wealth."  What
people will give you money for.
This is an interesting sort of wealth to study, because
it is the kind that prevents you from starving.
And what people will give you money for depends on them,
not you.When you're starting a business,
it's easy to slide into thinking that customers
want what you do.  During the Internet Bubble I talked
to a woman who, because she liked the outdoors, was
starting an "outdoor portal." You know what
kind of business you should start if you like
the outdoors?  One to recover data from crashed hard disks.What's the connection?  None at all.  Which is precisely my point.
If you want
to create wealth (in the narrow technical sense of not
starving) then you should be especially skeptical about any
plan that centers on things you like doing.
That is where your idea of what's valuable is least
likely to coincide with other people's.
In the average car restoration you probably do make everyone
else microscopically poorer, by doing a small amount of damage to
the environment.  While environmental costs should be taken
into account, they don't
make wealth a zero-sum game.  For example, if you repair
a machine that's broken because a part has come unscrewed,
you create wealth with no environmental cost.[5b]
This essay was written before Firefox.
Many people feel confused and depressed in
their early twenties.  Life seemed so much more fun in college.
Well, of course it was.  Don't be fooled by the surface similarities.
You've gone from guest to servant.
It's possible to have fun in this new world. 
Among other things, you now get to go behind the doors that say
"authorized personnel only."
But the change is a shock at first, and all the worse
if you're not consciously aware of it.
When VCs asked us how long it would take another startup
to duplicate our software, we used to reply that they probably
wouldn't be able to at all. I think this made us seem naive,
or liars.
Few technologies have one clear inventor.  So as
a rule, if you know the "inventor" of something
(the telephone, the assembly line, the airplane, 
the light bulb, the transistor) it is because their
company made money from it, and the company's PR people worked
hard to spread the story.  If you don't know who invented
something (the automobile, the television, the computer,
the jet engine, the laser), it's because other companies
made all the money.
This is a good plan for life in general.
If you have two choices, choose the harder.
If you're trying to decide whether to go out running or
sit home and watch TV, go running.
Probably the reason this trick works so well is that
when you have two choices and one is harder, the
only reason you're even considering the other is laziness.
You know in the back of your mind what's the right thing
to do, and this trick merely forces you to acknowledge it.
It is probably no accident that the middle class
first appeared in northern Italy and the low countries,
where there were no strong central governments.   These two
regions were the richest of their time and became the twin
centers from which Renaissance civilization radiated.
If they no longer play that role, it is because
other places, like the United States, have been truer to the
principles they discovered.
It may indeed be a sufficient condition.  But if so, why didn't
the Industrial Revolution happen earlier?  Two possible (and
not incompatible) answers: (a) It did.  
The Industrial Revolution was one in a series.
(b) Because in medieval towns, monopolies
and guild regulations initially slowed the development of new means
of production.

The answer is: In his essays, Paul Graham discusses innovation in depth. You should get another multiple of two, at
least, by eliminating the drag 
of the pointy-haired middle
manager who would be your boss in a big company.
Then there is one more multiple: how much smarte... He emphasizes the importance of innovation in the context of startups and innovation.
<|endoftext|>

<|startoftext|>
December 2020As I was deciding what to write about next, I was surprised to find
that two separate essays I'd been planning to write were actually
the same.The first is about how to ace your Y Combinator interview. There
has been so much nonsense written about this topic that I've been
meaning for years to write something telling founders the truth.The second is about something politicians sometimes say  that the
only way to become a billionaire is by exploiting people  and why
this is mistaken.Keep reading, and you'll learn both simultaneously.I know the politicians are mistaken because it was my job to predict
which people will become billionaires. I think I can truthfully say
that I know as much about how to do this as anyone. If the key to
becoming a billionaire  the defining feature of billionaires 
was to exploit people, then I, as a professional billionaire scout,
would surely realize this and look for people who would be good at
it, just as an NFL scout looks for speed in wide receivers.But aptitude for exploiting people is not what Y Combinator looks
for at all. In fact, it's the opposite of what they look for. I'll
tell you what they do look for, by explaining how to convince 
Y Combinator to fund you, and you can see for yourself.What YC looks for, above all, is founders who understand some group
of users and can make what they want. This is so important that
it's YC's motto: "Make something people want."A big company can to some extent force unsuitable products on
unwilling customers, but a startup doesn't have the power to do
that. A startup must sing for its supper, by making things that
genuinely delight its customers. Otherwise it will never get off
the ground.Here's where things get difficult, both for you as a founder and
for the YC partners trying to decide whether to fund you. In a
market economy, it's hard to make something people want that they
don't already have. That's the great thing about market economies.
If other people both knew about this need and were able to satisfy
it, they already would be, and there would be no room for your
startup.Which means the conversation during your YC interview will have to
be about something new: either a new need, or a new way to satisfy
one. And not just new, but uncertain. If it were certain that the
need existed and that you could satisfy it, that certainty would
be reflected in large and rapidly growing revenues, and you wouldn't
be seeking seed funding.So the YC partners have to guess both whether you've discovered a
real need, and whether you'll be able to satisfy it. That's what they
are, at least in this part of their job: professional guessers.
They have 1001 heuristics for doing this, and I'm not going to tell
you all of them, but I'm happy to tell you the most important ones,
because these can't be faked; the only way to "hack" them would be
to do what you should be doing anyway as a founder.The first thing the partners will try to figure out, usually, is
whether what you're making will ever be something a lot of people
want. It doesn't have to be something a lot of people want now.
The product and the market will both evolve, and will influence
each other's evolution. But in the end there has to be something
with a huge market. That's what the partners will be trying to
figure out: is there a path to a huge market?
Sometimes it's obvious there will be a huge market. If 
Boom manages
to ship an airliner at all, international airlines will have to buy
it. But usually it's not obvious. Usually the path to a huge market
is by growing a small market. This idea is important enough that
it's worth coining a phrase for, so let's call one of these small
but growable markets a "larval market."The perfect example of a larval market might be Apple's market when
they were founded in 1976. In 1976, not many people wanted their
own computer. But more and more started to want one, till now every
10 year old on the planet wants a computer (but calls it a "phone").The ideal combination is the group of founders who are 
"living in
the future" in the sense of being at the leading edge of some kind
of change, and who are building something they themselves want.
Most super-successful startups are of this type. Steve Wozniak
wanted a computer. Mark Zuckerberg wanted to engage online with his
college friends. Larry and Sergey wanted to find things on the web.
All these founders were building things they and their peers wanted,
and the fact that they were at the leading edge of change meant
that more people would want these things in the future.But although the ideal larval market is oneself and one's peers,
that's not the only kind. A larval market might also be regional,
for example. You build something to serve one location, and then
expand to others.The crucial feature of the initial market is that it exist. That
may seem like an obvious point, but the lack of it is the biggest
flaw in most startup ideas. There have to be some people who want
what you're building right now, and want it so urgently that they're
willing to use it, bugs and all, even though you're a small company
they've never heard of. There don't have to be many, but there have
to be some. As long as you have some users, there are straightforward
ways to get more: build new features they want, seek out more people
like them, get them to refer you to their friends, and so on. But
these techniques all require some initial seed group of users.So this is one thing the YC partners will almost certainly dig into
during your interview. Who are your first users going to be, and
how do you know they want this? If I had to decide whether to fund
startups based on a single question, it would be "How do you know
people want this?"The most convincing answer is "Because we and our friends want it."
It's even better when this is followed by the news that you've
already built a prototype, and even though it's very crude, your
friends are using it, and it's spreading by word of mouth. If you
can say that and you're not lying, the partners will switch from
default no to default yes. Meaning you're in unless there's some
other disqualifying flaw.That is a hard standard to meet, though. Airbnb didn't meet it.
They had the first part. They had made something they themselves
wanted. But it wasn't spreading. So don't feel bad if you don't hit
this gold standard of convincingness. If Airbnb didn't hit it, it
must be too high.In practice, the YC partners will be satisfied if they feel that
you have a deep understanding of your users' needs. And the Airbnbs
did have that. They were able to tell us all about what motivated
hosts and guests. They knew from first-hand experience, because
they'd been the first hosts. We couldn't ask them a question they
didn't know the answer to. We ourselves were not very excited about
the idea as users, but we knew this didn't prove anything, because
there were lots of successful startups we hadn't been excited about
as users. We were able to say to ourselves "They seem to know what
they're talking about. Maybe they're onto something. It's not growing
yet, but maybe they can figure out how to make it grow during YC."
Which they did, about three weeks into the batch.The best thing you can do in a YC interview is to teach the partners
about your users. So if you want to prepare for your interview, one of the best 
ways to do it is to go talk to your users and find out exactly what
they're thinking. Which is what you should be doing anyway.This may sound strangely credulous, but the YC partners want to
rely on the founders to tell them about the market. Think about
how VCs typically judge the potential market for an idea. They're
not ordinarily domain experts themselves, so they forward the idea
to someone who is, and ask for their opinion. YC doesn't have time
to do this, but if the YC partners can convince themselves that the
founders both (a) know what they're talking about and (b) aren't
lying, they don't need outside domain experts. They can use the
founders themselves as domain experts when evaluating their own
idea.This is why YC interviews aren't pitches. To give as many founders
as possible a chance to get funded, we made interviews as short as
we could: 10 minutes. That is not enough time for the partners to
figure out, through the indirect evidence in a pitch, whether you
know what you're talking about and aren't lying. They need to dig
in and ask you questions. There's not enough time for sequential
access. They need random access.
The worst advice I ever heard about how to succeed in a YC interview
is that you should take control of the interview and make sure to
deliver the message you want to. In other words, turn the interview
into a pitch. ⟨elaborate expletive⟩. It is so annoying when people
try to do that. You ask them a question, and instead of answering
it, they deliver some obviously prefabricated blob of pitch. It
eats up 10 minutes really fast.There is no one who can give you accurate advice about what to do
in a YC interview except a current or former YC partner. People
who've merely been interviewed, even successfully, have no idea of
this, but interviews take all sorts of different forms depending
on what the partners want to know about most. Sometimes they're all
about the founders, other times they're all about the idea. Sometimes
some very narrow aspect of the idea. Founders sometimes walk away
from interviews complaining that they didn't get to explain their
idea completely. True, but they explained enough.Since a YC interview consists of questions, the way to do it well
is to answer them well. Part of that is answering them candidly.
The partners don't expect you to know everything. But if you don't
know the answer to a question, don't try to bullshit your way out
of it. The partners, like most experienced investors, are professional
bullshit detectors, and you are (hopefully) an amateur bullshitter.
And if you try to bullshit them and fail, they may not even tell
you that you failed. So it's better to be honest than to try to
sell them. If you don't know the answer to a question, say you
don't, and tell them how you'd go about finding it, or tell them
the answer to some related question.If you're asked, for example, what could go wrong, the worst possible
answer is "nothing." Instead of convincing them that your idea is
bullet-proof, this will convince them that you're a fool or a liar.
Far better to go into gruesome detail. That's what experts do when
you ask what could go wrong.  The partners know that your idea is
risky. That's what a good bet looks like at this stage: a tiny
probability of a huge outcome.Ditto if they ask about competitors. Competitors are rarely what
kills startups. Poor execution does. But you should know who your
competitors are, and tell the YC partners candidly what your relative
strengths and weaknesses are. Because the YC partners know that
competitors don't kill startups, they won't hold competitors against
you too much. They will, however, hold it against you if you seem
either to be unaware of competitors, or to be minimizing the threat
they pose. They may not be sure whether you're clueless or lying,
but they don't need to be.The partners don't expect your idea to be perfect. This is seed
investing. At this stage, all they can expect are promising hypotheses.
But they do expect you to be thoughtful and honest. So if trying
to make your idea seem perfect causes you to come off as glib or
clueless, you've sacrificed something you needed for something you
didn't.If the partners are sufficiently convinced that there's a path to
a big market, the next question is whether you'll be able to find
it. That in turn depends on three things: the general qualities of
the founders, their specific expertise in this domain, and the
relationship between them. How determined are the founders? Are
they good at building things? Are they resilient enough to keep
going when things go wrong? How strong is their friendship?Though the Airbnbs only did ok in the idea department, they did
spectacularly well in this department. The story of how they'd
funded themselves by making Obama- and McCain-themed breakfast
cereal was the single most important factor in our decision to fund
them. They didn't realize it at the time, but what seemed to them
an irrelevant story was in fact fabulously good evidence of their
qualities as founders. It showed they were resourceful and determined,
and could work together.It wasn't just the cereal story that showed that, though. The whole
interview showed that they cared. They weren't doing this just for
the money, or because startups were cool. The reason they were
working so hard on this company was because it was their project.
They had discovered an interesting new idea, and they just couldn't
let it go.Mundane as it sounds, that's the most powerful motivator of all,
not just in startups, but in most ambitious undertakings: to be
genuinely interested in what 
you're building. This is what really
drives billionaires, or at least the ones who become billionaires
from starting companies. The company is their project.One thing few people realize about billionaires is that all of them
could have stopped sooner. They could have gotten acquired, or found
someone else to run the company. Many founders do. The ones who
become really rich are the ones who keep working. And what makes
them keep working is not just money. What keeps them working is the
same thing that keeps anyone else working when they could stop if
they wanted to: that there's nothing else they'd rather do.That, not exploiting people, is the defining quality of people who
become billionaires from starting companies. So that's what YC looks
for in founders: authenticity. People's motives for starting startups
are usually mixed. They're usually doing it from some combination
of the desire to make money, the desire to seem cool, genuine
interest in the problem, and unwillingness to work for someone else.
The last two are more powerful motivators than the first two. It's
ok for founders to want to make money or to seem cool. Most do.
But if the founders seem like they're doing it just to make money
or just to seem cool, they're not likely to succeed on a big
scale. The founders who are doing it for the money will take the
first sufficiently large acquisition offer, and the ones who are
doing it to seem cool will rapidly discover that there are much
less painful ways of seeming cool.
Y Combinator certainly sees founders whose m.o. is to exploit people.
YC is a magnet for them, because they want the YC brand. But when
the YC partners detect someone like that, they reject them. If bad
people made good founders, the YC partners would face a moral
dilemma. Fortunately they don't, because bad people make bad founders.
This exploitative type of founder is not going to succeed on a large
scale, and in fact probably won't even succeed on a small one,
because they're always going to be taking shortcuts. They see YC
itself as a shortcut.Their exploitation usually begins with their own cofounders, which
is disastrous, since the cofounders' relationship is the foundation
of the company. Then it moves on to the users, which is also
disastrous, because the sort of early adopters a successful startup
wants as its initial users are the hardest to fool. The best this
kind of founder can hope for is to keep the edifice of deception
tottering along until some acquirer can be tricked into buying it.
But that kind of acquisition is never very big.
If professional billionaire scouts know that exploiting people is
not the skill to look for, why do some politicians think this is
the defining quality of billionaires?I think they start from the feeling that it's wrong that one person
could have so much more money than another. It's understandable
where that feeling comes from. It's in our DNA, and even in the DNA
of other species.If they limited themselves to saying that it made them feel bad
when one person had so much more money than other people, who would
disagree? It makes me feel bad too, and I think people who make a
lot of money have a moral obligation to use it for the common good.
The mistake they make is to jump from feeling bad that some people
are much richer than others to the conclusion that there's no
legitimate way to make a very large amount of money. Now we're
getting into statements that are not only falsifiable, but false.There are certainly some people who become rich by doing bad things.
But there are also plenty of people who behave badly and don't make
that much from it. There is no correlation  in fact, probably an
inverse correlation  between how badly you behave and how much
money you make.The greatest danger of this nonsense may not even be that it sends
policy astray, but that it misleads ambitious people. Can you imagine
a better way to destroy social mobility than by telling poor kids
that the way to get rich is by exploiting people, while the rich
kids know, from having watched the preceding generation do it, how
it's really done?I'll tell you how it's really done, so you can at least tell your
own kids the truth. It's all about users. The most reliable way to
become a billionaire is to start a company that 
grows fast, and the
way to grow fast is to make what users want. Newly started startups
have no choice but to delight users, or they'll never even get
rolling. But this never stops being the lodestar, and bigger companies
take their eye off it at their peril. Stop delighting users, and
eventually someone else will.Users are what the partners want to
know about in YC interviews, and what I want to know about when I
talk to founders that we funded ten years ago and who are billionaires
now. What do users want? What new things could you build for them?
Founders who've become billionaires are always eager to talk about
that topic. That's how they became billionaires.Notes
The YC partners have so much practice doing this that they
sometimes see paths that the founders themselves haven't seen yet.
The partners don't try to seem skeptical, as buyers in transactions
often do to increase their leverage. Although the founders feel
their job is to convince the partners of the potential of their
idea, these roles are not infrequently reversed, and the founders
leave the interview feeling their idea has more potential than they
realized.
In practice, 7 minutes would be enough. You rarely change your
mind at minute 8. But 10 minutes is socially convenient.
I myself took the first sufficiently large acquisition offer
in my first startup, so I don't blame founders for doing this.
There's nothing wrong with starting a startup to make money. You
need to make money somehow, and for some people startups are the
most efficient way to do it. I'm just saying that these are not the
startups that get really big.
Not these days, anyway. There were some big ones during the
Internet Bubble, and indeed some big IPOs.Thanks to Trevor Blackwell, Jessica Livingston, Robert Morris, Geoff Ralston, and
Harj Taggar for reading drafts of this.

1

2

3

4

1

2

3

4
<|endoftext|>

<|startoftext|>
Want to start a startup?  Get funded by
Y Combinator.

July 2013One of the most common types of advice we give at Y Combinator is
to do things that don't scale.  A lot of would-be founders believe
that startups either take off or don't.  You build something, make
it available, and if you've made a better mousetrap, people beat a
path to your door as promised.  Or they don't, in which case the
market must not exist.
Actually startups take off because the founders make them take off.
There may be a handful that just grew by themselves, but usually
it takes some sort of push to get them going.  A good metaphor would
be the cranks that car engines had before they got electric starters.
Once the engine was going, it would keep going, but there was a
separate and laborious process to get it going.RecruitThe most common unscalable thing founders have to do at the start
is to recruit users manually.  Nearly all startups have to.  You
can't wait for users to come to you.  You have to go out and get
them.Stripe is one of the most successful startups we've funded, and the
problem they solved was an urgent one.   If anyone could have sat
back and waited for users, it was Stripe.  But in fact they're
famous within YC for aggressive early user acquisition.Startups building things for other startups have a big pool of
potential users in the other companies we've funded, and none took
better advantage of it than Stripe.  At YC we use the term "Collison
installation" for the technique they invented.  More diffident
founders ask "Will you try our beta?" and if the answer is yes,
they say "Great, we'll send you a link."  But the Collison brothers
weren't going to wait. When anyone agreed to try Stripe they'd say
"Right then, give me your laptop" and set them up on the spot.There are two reasons founders resist going out and recruiting users
individually.  One is a combination of shyness and laziness.  They'd
rather sit at home writing code than go out and talk to a bunch of
strangers and probably be rejected by most of them.  But for a
startup to succeed, at least one founder (usually the CEO) will
have to spend a lot of time on sales and marketing.
The other reason founders ignore this path is that the absolute
numbers seem so small at first.  This can't be how the big, famous
startups got started, they think. The mistake they make is to
underestimate the power of compound growth.  We encourage every
startup to measure their progress by weekly growth
rate.  If you have 100 users, you need to get 10 more next week
to grow 10% a week.  And while 110 may not seem much better than
100, if you keep growing at 10% a week you'll be surprised how big
the numbers get.  After a year you'll have 14,000 users, and after
2 years you'll have 2 million.You'll be doing different things when you're acquiring users a
thousand at a time, and growth has to slow down eventually.  But
if the market exists you can usually start by recruiting users
manually and then gradually switch to less manual methods. 
Airbnb is a classic example of this technique.  Marketplaces are
so hard to get rolling that you should expect to take heroic measures
at first. In Airbnb's case, these consisted of going door to door
in New York, recruiting new users and helping existing ones improve
their listings.  When I remember the Airbnbs during YC, I picture
them with rolly bags, because when they showed up for tuesday dinners
they'd always just flown back from somewhere.FragileAirbnb now seems like an unstoppable juggernaut, but early on it
was so fragile that about 30 days of going out and engaging in
person with users made the difference between success and failure.That initial fragility was not a unique feature of Airbnb.  Almost
all startups are fragile initially.  And that's one of the biggest
things inexperienced founders and investors (and reporters and
know-it-alls on forums) get wrong about them.  They unconsciously
judge larval startups by the standards of established ones.  They're
like someone looking at a newborn baby and concluding "there's no
way this tiny creature could ever accomplish anything."It's harmless if reporters and know-it-alls dismiss your startup.
They always get things wrong.   It's even ok if investors dismiss
your startup; they'll change their minds when they see growth.  The
big danger is that you'll dismiss your startup yourself.  I've seen
it happen.  I often have to encourage founders who don't see the
full potential of what they're building.  Even Bill Gates made that
mistake.  He returned to Harvard for the fall semester after starting
Microsoft.  He didn't stay long, but he wouldn't have returned at
all if he'd realized Microsoft was going to be even a fraction of
the size it turned out to be. 
The question to ask about an early stage startup is not "is this
company taking over the world?"  but "how big could this company
get if the founders did the right things?"  And the right things
often seem both laborious and inconsequential at the time. Microsoft
can't have seemed very impressive when it was just a couple guys
in Albuquerque writing Basic interpreters for a market of a few
thousand hobbyists (as they were then called), but in retrospect
that was the optimal path to dominating microcomputer software.
And I know Brian Chesky and Joe Gebbia didn't feel like they were
en route to the big time as they were taking "professional" photos
of their first hosts' apartments.  They were just trying to survive.
But in retrospect that too was the optimal path to dominating a big
market.How do you find users to recruit manually?  If you build something
to solve your own problems, then
you only have to find your peers, which is usually straightforward.
Otherwise you'll have to make a more deliberate effort to locate
the most promising vein of users.  The usual way to do that is to
get some initial set of users by doing a comparatively untargeted
launch, and then to observe which kind seem most enthusiastic, and
seek out more like them.  For example, Ben Silbermann noticed that
a lot of the earliest Pinterest users were interested in design,
so he went to a conference of design bloggers to recruit users, and
that worked well. 
DelightYou should take extraordinary measures not just to acquire users,
but also to make them happy.  For as long as they could (which
turned out to be surprisingly long), Wufoo sent each new user a
hand-written thank you note.  Your first users should feel that
signing up with you was one of the best choices they ever made.
And you in turn should be racking your brains to think of new ways
to delight them.Why do we have to teach startups this?  Why is it counterintuitive
for founders?  Three reasons, I think.One is that a lot of startup founders are trained as engineers,
and customer service is not part of the training of engineers.
You're supposed to build things that are robust and elegant, not
be slavishly attentive to individual users like some kind of
salesperson.  Ironically, part of the reason engineering is
traditionally averse to handholding is that its traditions date
from a time when engineers were less powerful — when they were
only in charge of their narrow domain of building things, rather
than running the whole show.  You can be ornery when you're Scotty,
but not when you're Kirk.Another reason founders don't focus enough on individual customers
is that they worry it won't scale.  But when founders of larval
startups worry about this, I point out that in their current state
they have nothing to lose.  Maybe if they go out of their way to
make existing users super happy, they'll one day have too many to
do so much for.  That would be a great problem to have.  See if you
can make it happen.  And incidentally, when it does, you'll find
that delighting customers scales better than you expected.  Partly
because you can usually find ways to make anything scale more than
you would have predicted, and partly because delighting customers
will by then have permeated your culture.I have never once seen a startup lured down a blind alley by trying
too hard to make their initial users happy.But perhaps the biggest thing preventing founders from realizing
how attentive they could be to their users is that they've never
experienced such attention themselves.  Their standards for customer
service have been set by the companies they've been customers of,
which are mostly big ones.  Tim Cook doesn't send you a hand-written
note after you buy a laptop.  He can't.  But you can.  That's one
advantage of being small: you can provide a level of service no big
company can. 
Once you realize that existing conventions are not the upper bound
on user experience, it's interesting in a very pleasant way to think
about how far you could go to delight your users.ExperienceI was trying to think of a phrase to convey how extreme your attention
to users should be, and I realized Steve Jobs had already done it:
insanely great.  Steve wasn't just using "insanely" as a synonym
for "very."  He meant it more literally — that one should focus
on quality of execution to a degree that in everyday life would be
considered pathological.All the most successful startups we've funded have, and that probably
doesn't surprise would-be founders.  What novice founders don't get
is what insanely great translates to in a larval startup.  When
Steve Jobs started using that phrase, Apple was already an established
company.  He meant the Mac (and its documentation and even
packaging — such is the nature of obsession) should be insanely
well designed and manufactured.  That's not hard for engineers to
grasp.  It's just a more extreme version of designing a robust and
elegant product.What founders have a hard time grasping (and Steve himself might
have had a hard time grasping) is what insanely great morphs into
as you roll the time slider back to the first couple months of a
startup's life.  It's not the product that should be insanely great,
but the experience of being your user.  The product is just one
component of that.  For a big company it's necessarily the dominant
one.  But you can and should give users an insanely great experience
with an early, incomplete, buggy product, if you make up the
difference with attentiveness.Can, perhaps, but should?  Yes.  Over-engaging with early users is
not just a permissible technique for getting growth rolling.  For
most successful startups it's a necessary part of the feedback loop
that makes the product good.  Making a better mousetrap is not an
atomic operation.  Even if you start the way most successful startups
have, by building something you yourself need, the first thing you
build is never quite right.  And except in domains with big penalties
for making mistakes, it's often better not to aim for perfection
initially.  In software, especially, it usually works best to get
something in front of users as soon as it has a quantum of utility,
and then see what they do with it.  Perfectionism is often an excuse
for procrastination, and in any case your initial model of users
is always inaccurate, even if you're one of them. 
The feedback you get from engaging directly with your earliest users
will be the best you ever get.  When you're so big you have to
resort to focus groups, you'll wish you could go over to your users'
homes and offices and watch them use your stuff like you did when
there were only a handful of them.FireSometimes the right unscalable trick is to focus on a deliberately
narrow market.  It's like keeping a fire contained at first to get
it really hot before adding more logs.That's what Facebook did.  At first it was just for Harvard students.
In that form it only had a potential market of a few thousand people,
but because they felt it was really for them, a critical mass of
them signed up.  After Facebook stopped being for Harvard students,
it remained for students at specific colleges for quite a while.
When I interviewed Mark Zuckerberg at Startup School, he said that
while it was a lot of work creating course lists for each school,
doing that made students feel the site was their natural home.Any startup that could be described as a marketplace usually has
to start in a subset of the market, but this can work for other
startups as well.  It's always worth asking if there's a subset of
the market in which you can get a critical mass of users quickly.
Most startups that use the contained fire strategy do it unconsciously.
They build something for themselves and their friends, who happen
to be the early adopters, and only realize later that they could
offer it to a broader market.  The strategy works just as well if
you do it unconsciously.  The biggest danger of not being consciously
aware of this pattern is for those who naively discard part of it.
E.g. if you don't build something for yourself and your friends,
or even if you do, but you come from the corporate world and your
friends are not early adopters, you'll no longer have a perfect
initial market handed to you on a platter.Among companies, the best early adopters are usually other startups.
They're more open to new things both by nature and because, having
just been started, they haven't made all their choices yet.  Plus
when they succeed they grow fast, and you with them.  It was one
of many unforeseen advantages of the YC model (and specifically of
making YC big) that B2B startups now have an instant market of
hundreds of other startups ready at hand.MerakiFor hardware startups there's a variant of
doing things that don't scale that we call "pulling a Meraki."
Although we didn't fund Meraki, the founders were Robert Morris's
grad students, so we know their history.  They got started by doing
something that really doesn't scale: assembling their routers
themselves.Hardware startups face an obstacle that software startups don't.
The minimum order for a factory production run is usually several
hundred thousand dollars.  Which can put you in a catch-22: without
a product you can't generate the growth you need to raise the money
to manufacture your product.  Back when hardware startups had to
rely on investors for money, you had to be pretty convincing to
overcome this.  The arrival of crowdfunding (or more precisely,
preorders) has helped a lot.  But even so I'd advise startups to
pull a Meraki initially if they can.  That's what Pebble did.  The
Pebbles 
assembled
 the first several hundred watches themselves. If
they hadn't gone through that phase, they probably wouldn't have
sold $10 million worth of watches when they did go on Kickstarter.Like paying excessive attention to early customers, fabricating
things yourself turns out to be valuable for hardware startups.
You can tweak the design faster when you're the factory, and you
learn things you'd never have known otherwise.  Eric Migicovsky of
Pebble said one of the things he learned was "how valuable it was to
source good screws."   Who knew?ConsultSometimes we advise founders of B2B startups to take over-engagement
to an extreme, and to pick a single user and act as if they were
consultants building something just for that one user.   The initial
user serves as the form for your mold; keep tweaking till you fit
their needs perfectly, and you'll usually find you've made something
other users want too.  Even if there aren't many of them, there are
probably adjacent territories that have more.  As long as you can
find just one user who really needs something and can act on that
need, you've got a toehold in making something people want, and
that's as much as any startup needs initially. 
Consulting is the canonical example of work that doesn't scale.
But (like other ways of bestowing one's favors liberally) it's safe
to do it so long as you're not being paid to.  That's where companies
cross the line.  So long as you're a product company that's merely
being extra attentive to a customer, they're very grateful even if
you don't solve all their problems.  But when they start paying you
specifically for that attentiveness — when they start paying
you by the hour — they expect you to do everything.Another consulting-like technique for recruiting initially lukewarm
users is to use your software yourselves on their behalf.  We
did that at Viaweb.  When we approached merchants asking if they
wanted to use our software to make online stores, some said no, but
they'd let us make one for them.  Since we would do anything to get
users, we did.  We felt pretty lame at the time.  Instead of
organizing big strategic e-commerce partnerships, we were trying
to sell luggage and pens and men's shirts.  But in retrospect it
was exactly the right thing to do, because it taught us how it would
feel to merchants to use our software.  Sometimes the feedback loop
was near instantaneous: in the middle of building some merchant's
site I'd find I needed a feature we didn't have, so I'd spend a
couple hours implementing it and then resume building the site.ManualThere's a more extreme variant where you don't just use your software,
but are your software.  When you only have a small number of users,
you can sometimes get away with doing by hand things that you plan
to automate later.  This lets you launch faster, and when you do
finally automate yourself out of the loop, you'll know exactly what
to build because you'll have muscle memory from doing it yourself.When manual components look to the user like software, this technique
starts to have aspects of a practical joke.  For example, the way
Stripe delivered "instant" merchant accounts to its first users was
that the founders manually signed them up for traditional merchant
accounts behind the scenes.Some startups could be entirely manual at first. If you can find
someone with a problem that needs solving and you can solve it
manually, go ahead and do that for as long as you can, and then
gradually automate the bottlenecks.  It would be a little frightening
to be solving users' problems in a way that wasn't yet automatic,
but less frightening than the far more common case of having something
automatic that doesn't yet solve anyone's problems.BigI should mention one sort of initial tactic that usually doesn't
work: the Big Launch.  I occasionally meet founders who seem to
believe startups are projectiles rather than powered aircraft, and
that they'll make it big if and only if they're launched with
sufficient initial velocity.  They want to launch simultaneously
in 8 different publications, with embargoes.  And on a tuesday, of
course, since they read somewhere that's the optimum day to launch
something.It's easy to see how little launches matter.  Think of some successful
startups.  How many of their launches do you remember?
All you need from a launch is some initial core of users.  How well
you're doing a few months later will depend more on how happy you
made those users than how many there were of them.
So why do founders think launches matter?  A combination of solipsism
and laziness.  They think what they're building is so great that
everyone who hears about it will immediately sign up.  Plus it would
be so much less work if you could get users merely by broadcasting
your existence, rather than recruiting them one at a time.  But
even if what you're building really is great, getting users will
always be a gradual process — partly because great things
are usually also novel, but mainly because users have other things
to think about.Partnerships too usually don't work.  They don't work for startups
in general, but they especially don't work as a way to get growth
started.  It's a common mistake among inexperienced founders to
believe that a partnership with a big company will be their big
break.  Six months later they're all saying the same thing: that
was way more work than we expected, and we ended up getting practically
nothing out of it. 
It's not enough just to do something extraordinary initially.  You
have to make an extraordinary effort initially.  Any strategy
that omits the effort — whether it's expecting a big launch to
get you users, or a big partner — is ipso facto suspect.VectorThe need to do something unscalably laborious to get started is so
nearly universal that it might be a good idea to stop thinking of
startup ideas as scalars.  Instead we should try thinking of them
as pairs of what you're going to build, plus the unscalable thing(s)
you're going to do initially to get the company going.It could be interesting to start viewing startup ideas this way,
because now that there are two components you can try to be imaginative
about the second as well as the first.  But in most cases the second
component will be what it usually is — recruit users manually
and give them an overwhelmingly good experience — and the main
benefit of treating startups as vectors will be to remind founders
they need to work hard in two dimensions.
In the best case, both components of the vector contribute to your
company's DNA: the unscalable things you have to do to get started
are not merely a necessary evil, but change the company permanently
for the better.  If you have to be aggressive about user acquisition
when you're small, you'll probably still be aggressive when you're
big.  If you have to manufacture your own hardware, or use your
software on users's behalf, you'll learn things you couldn't have
learned otherwise.  And most importantly, if you have to work hard
to delight users when you only have a handful of them, you'll keep
doing it when you have a lot.Notes
Actually Emerson never mentioned mousetraps specifically.  He
wrote "If a man has good corn or wood, or boards, or pigs, to sell,
or can make better chairs or knives, crucibles or church organs,
than anybody else, you will find a broad hard-beaten road to his
house, though it be in the woods."
Thanks to Sam Altman for suggesting I make this explicit.
And no, you can't avoid doing sales by hiring someone to do it for
you.  You have to do sales yourself initially.  Later you can hire
a real salesperson to replace you.
The reason this works is that as you get bigger, your size
helps you grow.  Patrick Collison wrote "At some point, there was
a very noticeable change in how Stripe felt. It tipped from being
this boulder we had to push to being a train car that in fact had
its own momentum."
One of the more subtle ways in which YC can help founders
is by calibrating their ambitions, because we know exactly how a
lot of successful startups looked when they were just getting
started.
If you're building something for which you can't easily get
a small set of users to observe — e.g. enterprise software — and
in a domain where you have no connections, you'll have to rely on
cold calls and introductions.  But should you even be working on
such an idea?
Garry Tan pointed out an interesting trap founders fall into
in the beginning.  They want so much to seem big that they imitate
even the flaws of big companies, like indifference to individual
users.  This seems to them more "professional."  Actually it's
better to embrace the fact that you're small and use whatever
advantages that brings.
Your user model almost couldn't be perfectly accurate, because
users' needs often change in response to what you build for them.
Build them a microcomputer, and suddenly they need to run spreadsheets
on it, because the arrival of your new microcomputer causes someone
to invent the spreadsheet.
If you have to choose between the subset that will sign up
quickest and those that will pay the most, it's usually best to
pick the former, because those are probably the early adopters.
They'll have a better influence on your product, and they won't
make you expend as much effort on sales.  And though they have less
money, you don't need that much to maintain your target growth rate
early on.
Yes, I can imagine cases where you could end up making
something that was really only useful for one user.  But those are
usually obvious, even to inexperienced founders.  So if it's not
obvious you'd be making something for a market of one, don't worry
about that danger.
There may even be an inverse correlation between launch
magnitude and success.  The only launches I remember are famous
flops like the Segway and Google Wave.  Wave is a particularly
alarming example, because I think it was actually a great idea that
was killed partly by its overdone launch.
Google grew big on the back of Yahoo, but that wasn't a
partnership.  Yahoo was their customer.
It will also remind founders that an idea where the second
component is empty — an idea where there is nothing you can do
to get going, e.g. because you have no way to find users to recruit
manually — is probably a bad idea, at least for those founders.Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Kevin
Hale, Steven Levy, Jessica Livingston, Geoff Ralston, and Garry Tan for reading
drafts of this.

Want to start a startup?  Get funded by
Y Combinator.

1

2

3

4

5

6

7

8

9

10

11

12

1

2

3

4

5

6

7

8

9

10

11

12

Japanese Translation

Russian Translation

French Translation

Arabic Translation

Italian Translation

Korean Translation
<|endoftext|>

<|startoftext|>
Want to start a startup?  Get funded by
Y Combinator.

March 2012One of the more surprising things I've noticed while working
on Y Combinator is how frightening the most ambitious startup
ideas are.  In this essay I'm going to demonstrate
this phenomenon by describing some.  Any one of them
could make you a billionaire.  That might sound like an attractive
prospect, and yet when I describe these ideas you may
notice you find yourself shrinking away from them.Don't worry, it's not a sign of weakness.  Arguably it's a sign of
sanity.  The biggest startup ideas are terrifying.  And not just
because they'd be a lot of work.  The biggest ideas seem to threaten
your identity: you wonder if you'd have enough ambition to carry
them through.There's a scene in Being John Malkovich where the nerdy hero
encounters a very attractive, sophisticated woman.  She says to
him:

  Here's the thing: If you ever got me, you wouldn't have a clue
  what to do with me.

That's what these ideas say to us.This phenomenon is one of the most important things you can understand
about startups.  

You'd expect big startup ideas to be
attractive, but actually they tend to repel you.  And that has a
bunch of consequences.  It means these ideas are invisible to most
people who try to think of startup ideas, because their subconscious
filters them out.  Even the most ambitious people are probably best
off approaching them obliquely.1. A New Search EngineThe best ideas are just on the right side of impossible.  I don't
know if this one is possible, but there are signs it might be.
Making a new search engine means competing with Google, and recently
I've noticed some cracks in their fortress.The point when it became clear to me that Microsoft had lost their
way was when they decided to get into the search business.  That
was not a natural move for Microsoft.  They did it because they
were afraid of Google, and Google was in the search business.  But
this meant (a) Google was now setting Microsoft's agenda, and (b)
Microsoft's agenda consisted of stuff they weren't good at.Microsoft : Google :: Google : Facebook.That does not by itself mean
there's room for a new search engine, but lately when using Google
search I've found myself nostalgic for the old days, when
Google was true to its own slightly aspy self.  Google used to give
me a page of the right answers, fast, with no clutter.  Now the
results seem inspired by the Scientologist principle that what's
true is what's true for you.  And the pages don't have the
clean, sparse feel they used to.  Google search results used to
look like the output of a Unix utility.  Now if I accidentally put
the cursor in the wrong place, anything might happen.The way to win here is to build the search engine all the hackers
use.  A search engine whose users consisted of the top 10,000 hackers
and no one else would be in a very powerful position despite its
small size, just as Google was when it was that search engine.  And
for the first time in over a decade the idea of switching seems
thinkable to me.Since anyone capable of starting this company is one of those 10,000
hackers, the route is at least straightforward: make the search
engine you yourself want.  Feel free to make it excessively hackerish.
Make it really good for code search, for example.  Would you like
search queries to be Turing complete?  Anything that gets you those
10,000 users is ipso facto good.Don't worry if something you want to do will constrain you in the
long term, because if you don't get that initial core of users,
there won't be a long term.  If you can just build something that
you and your friends genuinely prefer to Google, you're already
about 10% of the way to an IPO, just as Facebook was (though they
probably didn't realize it) when they got all the Harvard undergrads.2. Replace EmailEmail was not designed to be used the way we use it now.  Email is
not a messaging protocol.  It's a todo list.  Or rather, my inbox
is a todo list, and email is the way things get onto it.  But it
is a disastrously bad todo list.I'm open to different types of solutions to this problem, but I
suspect that tweaking the inbox is not enough, and that email has
to be replaced with a new protocol. 
This new protocol should be a todo list protocol, not
a messaging protocol, although there is a degenerate case where
what someone wants you to do is: read the following text.As a todo list protocol, the new protocol should give more power
to the recipient than email does.  I want there to be more restrictions
on what someone can put on my todo list.  And when someone can put
something on my todo list, I want them to tell me more about what
they want from me.  Do they want me to do something beyond just
reading some text?  How important is it?  (There obviously has to
be some mechanism to prevent people from saying everything is
important.)  When does it have to be done?This is one of those ideas that's like an irresistible force meeting
an immovable object.  On one hand, entrenched protocols are impossible
to replace.  On the other, it seems unlikely that people in
100 years will still be living in the same email hell we do now.
And if email is going to get replaced eventually, why not now?If you do it right, you may be able to avoid the usual chicken 
and egg problem new protocols face, because some of the most powerful
people in the world will be among the first to switch to it.  
They're all at the mercy of email too.Whatever you build, make it fast.  GMail has become painfully slow.

If you made something no better than GMail, but fast, that
alone would let you start to pull users away from GMail.GMail is slow because Google can't afford to spend a lot on it.
But people will pay for this.  I'd have no problem paying $50 a month.
Considering how much time I spend in email, it's kind of scary to
think how much I'd be justified in paying.  At least $1000 a month.
If I spend several hours a day reading and writing email, that would
be a cheap way to make my life better.3. Replace UniversitiesPeople are all over this idea lately, and I think they're onto
something.  I'm reluctant to suggest that an institution that's
been around for a millennium is finished just because of some mistakes
they made in the last few decades, but certainly in the last few
decades US universities seem to have been headed down the wrong
path.  One could do a lot better for a lot less money.I don't think universities will disappear.  They won't be replaced
wholesale.  They'll just lose the de facto monopoly on certain types
of learning that they once had.  There will be many different ways
to learn different things, and some may look quite different from
universities.   Y Combinator itself is arguably one of them.Learning is such a big problem that changing the way people do it
will have a wave of secondary effects.  For example, the name of
the university one went to is treated by a lot of people (correctly
or not) as a credential in its own right.  If learning breaks up
into many little pieces, credentialling may separate from it.  There
may even need to be replacements for campus social life (and oddly
enough, YC even has aspects of that).You could replace high schools too, but there you face bureaucratic
obstacles that would slow down a startup.  Universities seem the
place to start.4. Internet DramaHollywood has been slow to embrace the Internet.  That was a 
mistake, because I think we can now call a winner in the race between
delivery mechanisms, and it is the Internet, not cable.A lot of the reason is the horribleness of cable clients, also known
as TVs.  Our family didn't wait for Apple TV.  We hated our last
TV so much that a few months ago we replaced it with an iMac bolted
to the wall.  It's a little inconvenient to control it with a
wireless mouse, but the overall experience is much better than the
nightmare UI we had to deal with before.Some of the attention people currently devote to watching
movies and TV can be stolen by things that seem completely unrelated,
like social networking apps.  More can be stolen by things that are
a little more closely related, like games.  But there will probably
always remain some residual demand for conventional drama, where
you sit passively and watch as a plot happens.  So how do you deliver
drama via the Internet?  Whatever you make will have to be on a
larger scale than Youtube clips.  When people sit down to watch a
show, they want to know what they're going to get: either part
of a series with familiar characters, or a single longer "movie"
whose basic premise they know in advance.There are two ways delivery and payment could play out.  Either
some company like Netflix or Apple will be the app store for
entertainment, and you'll reach audiences through them.  Or the
would-be app stores will be too overreaching, or too technically
inflexible, and companies will arise to supply payment and streaming
a la carte to the producers of drama.  If that's the way things
play out, there will also be a need for such infrastructure companies.5. The Next Steve JobsI was talking recently to someone who knew Apple well, and I asked
him if the people now running the company would be able to keep
creating new things the way Apple had under Steve Jobs.  His answer
was simply "no."  I already feared that would be the answer.  I
asked more to see how he'd qualify it.  But he didn't qualify it
at all.  No, there will be no more great new stuff beyond whatever's
currently in the pipeline.  Apple's
revenues may continue to rise for a long time, but as Microsoft
shows, revenue is a lagging indicator in the technology business.So if Apple's not going to make the next iPad, who is?  None of the
existing players.  None of them are run by product visionaries, and
empirically you can't seem to get those by hiring them.  Empirically
the way you get a product visionary as CEO is for him to found the
company and not get fired.  So the company that creates the next
wave of hardware is probably going to have to be a startup.I realize it sounds preposterously ambitious for a startup to try
to become as big as Apple.  But no more ambitious than it was for
Apple to become as big as Apple, and they did it.  Plus a startup
taking on this problem now has an advantage the original Apple
didn't: the example of Apple.  Steve Jobs has shown us what's
possible.  That helps would-be successors both directly, as Roger
Bannister did, by showing how much better you can do than people
did before, and indirectly, as Augustus did, by lodging the idea
in users' minds that a single person could unroll the future 
for them. 
Now Steve is gone there's a vacuum we can all feel.  If a new company
led boldly into the future of hardware, users would follow.  The
CEO of that company, the "next Steve Jobs," might not measure up
to Steve Jobs. But he wouldn't have to.  He'd just have to do a
better job than Samsung and HP and Nokia, and that seems pretty
doable.6. Bring Back Moore's LawThe last 10 years have reminded us what Moore's Law actually says.
Till about 2002 you could safely misinterpret it as promising that
clock speeds would double every 18 months.  Actually what it says
is that circuit densities will double every 18 months.  It used to
seem pedantic to point that out.  Not any more.  Intel can no longer
give us faster CPUs, just more of them.This Moore's Law is not as good as the old one.  Moore's Law used
to mean that if your software was slow, all you had to do was wait,
and the inexorable progress of hardware would solve your problems.
Now if your software is slow you have to rewrite it to do more
things in parallel, which is a lot more work than waiting.It would be great if a startup could give us something of the old
Moore's Law back, by writing software that could make a large number
of CPUs look to the developer like one very fast CPU.  There are
several ways to approach this problem.  The most ambitious is to
try to do it automatically: to write a compiler that will parallelize
our code for us.  There's a name for this compiler, the sufficiently
smart compiler, and it is a byword for impossibility.  But is
it really impossible?  Is there no configuration of the bits in
memory of a present day computer that is this compiler?  If you
really think so, you should try to prove it, because that would be
an interesting result.  And if it's not impossible but simply very
hard, it might be worth trying to write it.  The expected value
would be high even if the chance of succeeding was low.The reason the expected value is so high is web services.  If you
could write software that gave programmers the convenience of the
way things were in the old days, you could offer it to them as a
web service.  And that would in turn mean that you got practically
all the users.Imagine there was another processor manufacturer that could still translate
increased circuit densities into increased clock speeds. They'd
take most of Intel's business.  And since web services mean that
no one sees their processors anymore, by writing the sufficiently
smart compiler you could create a situation indistinguishable from
you being that manufacturer, at least for the server market.The least ambitious way of approaching the problem is to start from
the other end, and offer programmers more parallelizable Lego blocks
to build programs out of, like Hadoop and MapReduce.   Then the
programmer still does much of the work of optimization.There's an intriguing middle ground where you build a semi-automatic
weapon—where there's a human in the loop.  You make something
that looks to the user like the sufficiently smart compiler, but
inside has people, using highly developed optimization tools to
find and eliminate bottlenecks in users' programs.   These people
might be your employees, or you might create a marketplace for
optimization.An optimization marketplace would be a way to generate the sufficiently
smart compiler piecemeal, because participants would immediately
start writing bots.  It would be a curious state of affairs if you
could get to the point where everything could be done by bots,
because then you'd have made the sufficiently smart compiler, but
no one person would have a complete copy of it.I realize how crazy all this sounds.  In fact, what I like about
this idea is all the different ways in which it's wrong.  The whole
idea of focusing on optimization is counter to the general trend
in software development for the last several decades.  Trying to
write the sufficiently smart compiler is by definition a mistake.
And even if it weren't, compilers are the sort of software that's
supposed to be created by open source projects, not companies.  Plus
if this works it will deprive all the programmers who take pleasure
in making multithreaded apps of so much amusing complexity. The
forum troll I have by now internalized doesn't even know where to
begin in raising objections to this project.  Now that's what I
call a startup idea.7. Ongoing DiagnosisBut wait, here's another that could face even greater resistance:
ongoing, automatic medical diagnosis.One of my tricks for generating startup ideas is to imagine the
ways in which we'll seem backward to future generations.  And I'm
pretty sure that to people 50 or 100 years in the future, it will
seem barbaric that people in our era waited till they had symptoms
to be diagnosed with conditions like heart disease and cancer.For example, in 2004 Bill Clinton found he was feeling short of
breath.  Doctors discovered that several of his arteries were over
90% blocked and 3 days later he had a quadruple bypass.  It seems
reasonable to assume Bill Clinton has the best medical care available.
And yet even he had to wait till his arteries were over 90% blocked
to learn that the number was over 90%.  Surely at some point in the
future we'll know these numbers the way we now know something like
our weight.  Ditto for cancer.  It will seem preposterous to future
generations that we wait till patients have physical symptoms to
be diagnosed with cancer.  Cancer will show up on some sort of radar
screen immediately.(Of course, what shows up on the radar screen may be different from
what we think of now as cancer.  I wouldn't be surprised if at any
given time we have ten or even hundreds of microcancers going at
once, none of which normally amount to anything.)A lot of the obstacles to ongoing diagnosis will come from the fact
that it's going against the grain of the medical profession.  The
way medicine has always worked is that patients come to doctors
with problems, and the doctors figure out what's wrong.  A lot of
doctors don't like the idea of going on the medical equivalent of
what lawyers call a "fishing expedition," where you go looking for
problems without knowing what you're looking for.  They call the
things that get discovered this way "incidentalomas," and they are
something of a nuisance.For example, a friend of mine once had her brain scanned as part
of a study.  She was horrified when the doctors running the study
discovered what appeared to be a large tumor.  After further testing,
it turned out to be a harmless cyst.  But it cost her a few days
of terror. A lot of doctors worry that if you start scanning people
with no symptoms, you'll get this on a giant scale: a huge number
of false alarms that make patients panic and require expensive and
perhaps even dangerous tests to resolve.  But I think that's just
an artifact of current limitations.  If people were scanned all the
time and we got better at deciding what was a real problem, my
friend would have known about this cyst her whole life and known
it was harmless, just as we do a birthmark.There is room for a lot of startups here.  
In addition to the technical obstacles all
startups face, and the bureaucratic obstacles all medical startups
face, they'll be going against thousands of years of medical
tradition.  But it will happen, and it will be a great thing—so
great that people in the future will feel as sorry for us as we do
for the generations that lived before anaesthesia and antibiotics.TacticsLet me conclude with some tactical advice.  If you want to take on
a problem as big as the ones I've discussed, don't make a direct
frontal attack on it.  Don't say, for example, that you're going
to replace email.  If you do that you raise too many expectations.
Your employees and investors will constantly be asking "are we there
yet?" and you'll have an army of haters waiting to see you fail.
Just say you're building todo-list software.  That sounds harmless.
People can notice you've replaced email when it's a fait accompli.
Empirically, the way to do really big things seems to be to start
with deceptively small things.  Want to dominate microcomputer
software?  Start by writing a Basic interpreter for a machine with
a few thousand users.  Want to make the universal web site?  Start
by building a site for Harvard undergrads to stalk one another.Empirically, it's not just for other people that you need to start
small.  You need to for your own sake.  Neither Bill Gates nor Mark
Zuckerberg knew at first how big their companies were going to get.
All they knew was that they were onto something.  Maybe it's a bad
idea to have really big ambitions initially, because the bigger
your ambition, the longer it's going to take, and the further you
project into the future, the more likely you'll get it wrong.I think the way to use these big ideas is not to try to identify a
precise point in the future and then ask yourself how to get from
here to there, like the popular image of a visionary.  You'll be
better off if you operate like Columbus and just head in a general
westerly direction.  Don't try to construct the future like a
building, because your current blueprint is almost certainly mistaken.
Start with something you know works, and when you expand, expand
westward.The popular image of the visionary is someone with a clear view of
the future, but empirically it may be better to have a blurry one.Notes
It's also one of the most important things VCs fail to
understand about startups.  Most expect founders to walk in with a
clear plan for the future, and judge them based on that.  Few
consciously realize that in the biggest successes there is the least
correlation between the initial plan and what the startup eventually
becomes.
This sentence originally read "GMail is painfully slow."
Thanks to Paul Buchheit for the correction.
Roger Bannister is famous as the first person to run a mile
in under 4 minutes.  But his world record only lasted 46 days.  Once
he showed it could be done, lots of others followed.  Ten years
later Jim Ryun ran a 3:59 mile as a high school junior.
If you want to be the next Apple, maybe you don't even want to start
with consumer electronics.  Maybe at first you make something hackers
use.  Or you make something popular but apparently unimportant,
like a headset or router.  All you need is a bridgehead.
Thanks to Sam Altman, Trevor Blackwell, 
Paul Buchheit, Patrick Collison, Aaron Iba, Jessica
Livingston, Robert Morris, Harj Taggar and Garry Tan
for reading drafts of this.

Want to start a startup?  Get funded by
Y Combinator.

1

2

3

4

1

2

3

4
<|endoftext|>

<|startoftext|>
Want to start a startup?  Get funded by
Y Combinator.

July 2004(This essay is derived from a talk at Oscon 2004.)
A few months ago I finished a new 
book, 
and in reviews I keep
noticing words like "provocative'' and "controversial.'' To say
nothing of "idiotic.''I didn't mean to make the book controversial.  I was trying to make
it efficient.  I didn't want to waste people's time telling them
things they already knew.  It's more efficient just to give them
the diffs.  But I suppose that's bound to yield an alarming book.EdisonsThere's no controversy about which idea is most controversial:
the suggestion that variation in wealth might not be as big a
problem as we think.I didn't say in the book that variation in wealth was in itself a
good thing.  I said in some situations it might be a sign of good
things.  A throbbing headache is not a good thing, but it can be
a sign of a good thing-- for example, that you're recovering
consciousness after being hit on the head.Variation in wealth can be a sign of variation in productivity.
(In a society of one, they're identical.) And that
is almost certainly a good thing: if your society has no variation
in productivity, it's probably not because everyone is Thomas
Edison.  It's probably because you have no Thomas Edisons.In a low-tech society you don't see much variation in productivity.
If you have a tribe of nomads collecting sticks for a fire, how
much more productive is the best stick gatherer going to be than
the worst?  A factor of two?  Whereas when you hand people a complex tool
like a computer, the variation in what they can do with
it is enormous.That's not a new idea.  Fred Brooks wrote about it in 1974, and
the study he quoted was published in 1968.  But I think he
underestimated the variation between programmers.  He wrote about productivity in lines
of code:  the best programmers can solve a given problem in a tenth
the time.  But what if the problem isn't given? In programming, as
in many fields, the hard part isn't solving problems, but deciding
what problems to solve.  Imagination is hard to measure, but
in practice it dominates the kind of productivity that's measured
in lines of code.Productivity varies in any field, but there are few in which it
varies so much.  The variation between programmers
is so great that it becomes a difference in kind.  I don't
think this is something intrinsic to programming, though.  In every field,
technology magnifies differences in productivity.  I think what's
happening in programming is just that we have a lot of technological
leverage.  But in every field the lever is getting longer, so the
variation we see is something that more and more fields will see
as time goes on.  And the success of companies, and countries, will
depend increasingly on how they deal with it.If variation in productivity increases with technology, then the
contribution of the most productive individuals will not only be
disproportionately large, but will actually grow with time.  When
you reach the point where 90% of a group's output is created by 1%
of its members, you lose big if something (whether Viking raids,
or central planning) drags their productivity down to the average.If we want to get the most out of them, we need to understand these
especially productive people.  What motivates them?  What do they
need to do their jobs?  How do you recognize them? How do you
get them to come and work for you?  And then of course there's the
question, how do you become one?More than MoneyI know a handful of super-hackers, so I sat down and thought about
what they have in common.  Their defining quality is probably that
they really love to program.  Ordinary programmers write code to pay
the bills.  Great hackers think of it as something they do for fun,
and which they're delighted to find people will pay them for.Great programmers are sometimes said to be indifferent to money.
This isn't quite true.  It is true that all they really care about
is doing interesting work.  But if you make enough money, you get
to work on whatever you want, and for that reason hackers are
attracted by the idea of making really large amounts of money.
But as long as they still have to show up for work every day, they
care more about what they do there than how much they get paid for
it.Economically, this is a fact of the greatest importance, because
it means you don't have to pay great hackers anything like what
they're worth.  A great programmer might be ten or a hundred times
as productive as an ordinary one, but he'll consider himself lucky
to get paid three times as much.  As I'll explain later, this is
partly because great hackers don't know how good they are.  But
it's also because money is not the main thing they want.What do hackers want?  Like all craftsmen, hackers like good tools.
In fact, that's an understatement.  Good hackers find it unbearable
to use bad tools.  They'll simply refuse to work on projects with
the wrong infrastructure.At a startup I once worked for, one of the things pinned up on our
bulletin board was an ad from IBM.  It was a picture of an AS400,
and the headline read, I think, "hackers despise
it.'' When you decide what infrastructure to use for a project, you're
not just making a technical decision.  You're also making a social
decision, and this may be the more important of the two.  For
example, if your company wants to write some software, it might
seem a prudent choice to write it in Java.  But when you choose a
language, you're also choosing a community.  The programmers you'll
be able to hire to work on a Java project won't be as
smart as the
ones you could get to work on a project written in Python.
And the quality of your hackers probably matters more than the
language you choose.  Though, frankly, the fact that good hackers
prefer Python to Java should tell you something about the relative
merits of those languages.Business types prefer the most popular languages because they view
languages as standards. They don't want to bet the company on
Betamax.  The thing about languages, though, is that they're not
just standards.  If you have to move bits over a network, by all
means use TCP/IP.  But a programming language isn't just a format.
A programming language is a medium of expression.I've read that Java has just overtaken Cobol as the most popular
language.  As a standard, you couldn't wish for more.  But as a
medium of expression, you could do a lot better.  Of all the great
programmers I can think of, I know of only one who would voluntarily
program in Java.  And of all the great programmers I can think of
who don't work for Sun, on Java, I know of zero.Great hackers also generally insist on using open source software.
Not just because it's better, but because it gives them more control.
Good hackers insist on control.  This is part of what makes them
good hackers:  when something's broken, they need to fix it.  You
want them to feel this way about the software they're writing for
you.  You shouldn't be surprised when they feel the same way about
the operating system.A couple years ago a venture capitalist friend told me about a new
startup he was involved with.  It sounded promising.  But the next
time I talked to him, he said they'd decided to build their software
on Windows NT, and had just hired a very experienced NT developer
to be their chief technical officer.  When I heard this, I thought,
these guys are doomed.  One, the CTO couldn't be a first rate
hacker, because to become an eminent NT developer he would have
had to use NT voluntarily, multiple times, and I couldn't imagine
a great hacker doing that; and two, even if he was good, he'd have
a hard time hiring anyone good to work for him if the project had
to be built on NT. The Final FrontierAfter software, the most important tool to a hacker is probably
his office.  Big companies think the function of office space is to express
rank.  But hackers use their offices for more than that: they
use their office as a place to think in.  And if you're a technology
company, their thoughts are your product.  So making hackers work
in a noisy, distracting environment is like having a paint factory
where the air is full of soot.The cartoon strip Dilbert has a lot to say about cubicles, and with
good reason.  All the hackers I know despise them.  The mere prospect
of being interrupted is enough to prevent hackers from working on
hard problems.  If you want to get real work done in an office with
cubicles, you have two options: work at home, or come in early or
late or on a weekend, when no one else is there.  Don't companies
realize this is a sign that something is broken?  An office
environment is supposed to be something that helps
you work, not something you work despite.Companies like Cisco are proud that everyone there has a cubicle,
even the CEO.  But they're not so advanced as they think; obviously
they still view office space as a badge of rank.  Note too that
Cisco is famous for doing very little product development in house.
They get new technology by buying the startups that created it-- where
presumably the hackers did have somewhere quiet to work.One big company that understands what hackers need is Microsoft.
I once saw a recruiting ad for Microsoft with a big picture of a
door.  Work for us, the premise was, and we'll give you a place to
work where you can actually get work done.   And you know, Microsoft
is remarkable among big companies in that they are able to develop
software in house.  Not well, perhaps, but well enough.If companies want hackers to be productive, they should look at
what they do at home.  At home, hackers can arrange things themselves
so they can get the most done.  And when they work at home, hackers
don't work in noisy, open spaces; they work in rooms with doors.  They
work in cosy, neighborhoody places with people around and somewhere
to walk when they need to mull something over, instead of in glass
boxes set in acres of parking lots.  They have a sofa they can take
a nap on when they feel tired, instead of sitting in a coma at
their desk, pretending to work.  There's no crew of people with
vacuum cleaners that roars through every evening during the prime
hacking hours.  There are no meetings or, God forbid, corporate
retreats or team-building exercises.  And when you look at what
they're doing on that computer, you'll find it reinforces what I
said earlier about tools.  They may have to use Java and Windows
at work, but at home, where they can choose for themselves, you're
more likely to find them using Perl and Linux.Indeed, these statistics about Cobol or Java being the most popular
language can be misleading.  What we ought to look at, if we want
to know what tools are best, is what hackers choose when they can
choose freely-- that is, in projects of their own.  When you ask
that question, you find that open source operating systems already
have a dominant market share, and the number one language is probably
Perl.InterestingAlong with good tools, hackers want interesting projects.  What
makes a project interesting?  Well, obviously overtly sexy
applications like stealth planes or special effects software would
be interesting to work on.  But any application can be interesting
if it poses novel technical challenges.  So it's hard to predict
which problems hackers will like, because some become
interesting only when the people working on them discover a new
kind of solution.  Before ITA
(who wrote the software inside Orbitz),
the people working on airline fare searches probably thought it
was one of the most boring applications imaginable.  But ITA made
it interesting by 
redefining the problem in a more ambitious way.I think the same thing happened at Google.  When Google was founded,
the conventional wisdom among the so-called portals was that search
was boring and unimportant.  But the guys at Google didn't think
search was boring, and that's why they do it so well.This is an area where managers can make a difference.  Like a parent
saying to a child, I bet you can't clean up your whole room in
ten minutes, a good manager can sometimes redefine a problem as a
more interesting one.  Steve Jobs seems to be particularly good at
this, in part simply by having high standards.  There were a lot
of small, inexpensive computers before the Mac.  He redefined the
problem as: make one that's beautiful.  And that probably drove
the developers harder than any carrot or stick could.They certainly delivered.  When the Mac first appeared, you didn't
even have to turn it on to know it would be good; you could tell
from the case.  A few weeks ago I was walking along the street in
Cambridge, and in someone's trash I saw what appeared to be a Mac
carrying case.  I looked inside, and there was a Mac SE.  I carried
it home and plugged it in, and it booted.  The happy Macintosh
face, and then the finder.  My God, it was so simple.  It was just
like ... Google.Hackers like to work for people with high standards.  But it's not
enough just to be exacting.  You have to insist on the right things.
Which usually means that you have to be a hacker yourself.  I've
seen occasional articles about how to manage programmers.  Really
there should be two articles: one about what to do if
you are yourself a programmer, and one about what to do if you're not.  And the 
second could probably be condensed into two words:  give up.The problem is not so much the day to day management.  Really good
hackers are practically self-managing.  The problem is, if you're
not a hacker, you can't tell who the good hackers are.  A similar
problem explains why American cars are so ugly.  I call it the
design paradox.  You might think that you could make your products
beautiful just by hiring a great designer to design them.  But if
you yourself don't have good taste, 
how are you going to recognize
a good designer?  By definition you can't tell from his portfolio.
And you can't go by the awards he's won or the jobs he's had,
because in design, as in most fields, those tend to be driven by
fashion and schmoozing, with actual ability a distant third.
There's no way around it:  you can't manage a process intended to
produce beautiful things without knowing what beautiful is.  American
cars are ugly because American car companies are run by people with
bad taste.Many people in this country think of taste as something elusive,
or even frivolous.  It is neither.  To drive design, a manager must
be the most demanding user of a company's products.  And if you
have really good taste, you can, as Steve Jobs does, make satisfying
you the kind of problem that good people like to work on.Nasty Little ProblemsIt's pretty easy to say what kinds of problems are not interesting:
those where instead of solving a few big, clear, problems, you have
to solve a lot of nasty little ones.  One of the worst kinds of
projects is writing an interface to a piece of software that's
full of bugs.  Another is when you have to customize
something for an individual client's complex and ill-defined needs.
To hackers these kinds of projects are the death of a thousand
cuts.The distinguishing feature of nasty little problems is that you
don't learn anything from them.   Writing a compiler is interesting
because it teaches you what a compiler is.  But writing an interface
to a buggy piece of software doesn't teach you anything, because the
bugs are random.   So it's not just fastidiousness that makes good
hackers avoid nasty little problems.  It's more a question of
self-preservation.  Working on nasty little problems makes you
stupid.  Good hackers avoid it for the same reason models avoid
cheeseburgers.Of course some problems inherently have this character.  And because
of supply and demand, they pay especially well.  So a company that
found a way to get great hackers to work on tedious problems would
be very successful.  How would you do it?One place this happens is in startups.  At our startup we had 
Robert Morris working as a system administrator.  That's like having the
Rolling Stones play at a bar mitzvah.  You can't hire that kind of
talent.  But people will do any amount of drudgery for companies
of which they're the founders.  Bigger companies solve the problem by partitioning the company.
They get smart people to work for them by establishing a separate
R&D department where employees don't have to work directly on
customers' nasty little problems.  In this model, the research
department functions like a mine. They produce new ideas; maybe
the rest of the company will be able to use them.You may not have to go to this extreme.  
Bottom-up programming
suggests another way to partition the company: have the smart people
work as toolmakers.  If your company makes software to do x, have
one group that builds tools for writing software of that type, and
another that uses these tools to write the applications.  This way
you might be able to get smart people to write 99% of your code,
but still keep them almost as insulated from users as they would
be in a traditional research department.  The toolmakers would have
users, but they'd only be the company's own developers.  If Microsoft used this approach, their software wouldn't be so full
of security holes, because the less smart people writing the actual
applications wouldn't be doing low-level stuff like allocating
memory.  Instead of writing Word directly in C, they'd be plugging
together big Lego blocks of Word-language.  (Duplo, I believe, is
the technical term.)ClumpingAlong with interesting problems, what good hackers like is other
good hackers.  Great hackers tend to clump together-- sometimes
spectacularly so, as at Xerox Parc.   So you won't attract good
hackers in linear proportion to how good an environment you create
for them.  The tendency to clump means it's more like the square
of the environment.  So it's winner take all.  At any given time,
there are only about ten or twenty places where hackers most want to
work, and if you aren't one of them, you won't just have fewer
great hackers, you'll have zero.Having great hackers is not, by itself, enough to make a company
successful.  It works well for Google and ITA, which are two of
the hot spots right now, but it didn't help Thinking Machines or
Xerox.  Sun had a good run for a while, but their business model
is a down elevator.  In that situation, even the best hackers can't
save you.I think, though, that all other things being equal, a company that
can attract great hackers will have a huge advantage.  There are
people who would disagree with this.  When we were making the rounds
of venture capital firms in the 1990s, several told us that software
companies didn't win by writing great software, but through brand,
and dominating channels, and doing the right deals.They really seemed to believe this, and I think I know why.  I
think what a lot of VCs are looking for, at least unconsciously,
is the next Microsoft.  And of course if Microsoft is your model,
you shouldn't be looking for companies that hope to win by writing
great software.  But VCs are mistaken to look for the next Microsoft,
because no startup can be the next Microsoft unless some other
company is prepared to bend over at just the right moment and be
the next IBM.It's a mistake to use Microsoft as a model, because their whole
culture derives from that one lucky break.  Microsoft is a bad data
point.  If you throw them out, you find that good products do tend
to win in the market.  What VCs should be looking for is the next
Apple, or the next Google.I think Bill Gates knows this.  What worries him about Google is
not the power of their brand, but the fact that they have
better hackers. 
RecognitionSo who are the great hackers?  How do you know when you meet one?
That turns out to be very hard.  Even hackers can't tell.  I'm
pretty sure now that my friend Trevor Blackwell is a great hacker.
You may have read on Slashdot how he made his 
own Segway.  The
remarkable thing about this project was that he wrote all the
software in one day (in Python, incidentally).For Trevor, that's
par for the course.  But when I first met him, I thought he was a
complete idiot.  He was standing in Robert Morris's office babbling
at him about something or other, and I remember standing behind
him making frantic gestures at Robert to shoo this nut out of his
office so we could go to lunch.  Robert says he misjudged Trevor
at first too.  Apparently when Robert first met him, Trevor had
just begun a new scheme that involved writing down everything about
every aspect of his life on a stack of index cards, which he carried
with him everywhere.  He'd also just arrived from Canada, and had
a strong Canadian accent and a mullet.The problem is compounded by the fact that hackers, despite their
reputation for social obliviousness, sometimes put a good deal of
effort into seeming smart.  When I was in grad school I used to
hang around the MIT AI Lab occasionally. It was kind of intimidating
at first.  Everyone there spoke so fast.  But after a while I
learned the trick of speaking fast.  You don't have to think any
faster; just use twice as many words to say everything.  With this amount of noise in the signal, it's hard to tell good
hackers when you meet them.  I can't tell, even now.  You also
can't tell from their resumes.  It seems like the only way to judge
a hacker is to work with him on something.And this is the reason that high-tech areas 
only happen around universities.  The active ingredient
here is not so much the professors as the students.  Startups grow up
around universities because universities bring together promising young
people and make them work on the same projects.  The
smart ones learn who the other smart ones are, and together
they cook up new projects of their own.Because you can't tell a great hacker except by working with him,
hackers themselves can't tell how good they are.  This is true to
a degree in most fields.  I've found that people who
are great at something are not so much convinced of their own
greatness as mystified at why everyone else seems so incompetent.
But it's particularly hard for hackers to know how good they are,
because it's hard to compare their work.  This is easier in most
other fields.  In the hundred meters, you know in 10 seconds who's
fastest.  Even in math there seems to be a general consensus about
which problems are hard to solve, and what constitutes a good
solution.  But hacking is like writing.  Who can say which of two
novels is better?  Certainly not the authors.With hackers, at least, other hackers can tell.  That's because,
unlike novelists, hackers collaborate on projects.  When you get
to hit a few difficult problems over the net at someone, you learn
pretty quickly how hard they hit them back.  But hackers can't
watch themselves at work.  So if you ask a great hacker how good
he is, he's almost certain to reply, I don't know.  He's not just
being modest.  He really doesn't know.And none of us know, except about people we've actually worked
with.  Which puts us in a weird situation: we don't know who our
heroes should be.  The hackers who become famous tend to become
famous by random accidents of PR.  Occasionally I need to give an
example of a great hacker, and I never know who to use.  The first
names that come to mind always tend to be people I know personally,
but it seems lame to use them.  So, I think, maybe I should say
Richard Stallman, or Linus Torvalds, or Alan Kay, or someone famous
like that.  But I have no idea if these guys are great hackers.
I've never worked with them on anything.If there is a Michael Jordan of hacking, no one knows, including
him.CultivationFinally, the question the hackers have all been wondering about:
how do you become a great hacker?  I don't know if it's possible
to make yourself into one.  But it's certainly possible to do things
that make you stupid, and if you can make yourself stupid, you
can probably make yourself smart too.The key to being a good hacker may be to work on what you like.
When I think about the great hackers I know, one thing they have
in common is the extreme 
difficulty of making them work 
on anything they
don't want to.  I don't know if this is cause or effect; it may be
both.To do something well you have to love it.  
So to the extent you
can preserve hacking as something you love, you're likely to do it
well.  Try to keep the sense of wonder you had about programming at
age 14.  If you're worried that your current job is rotting your
brain, it probably is.The best hackers tend to be smart, of course, but that's true in
a lot of fields.  Is there some quality that's unique to hackers?
I asked some friends, and the number one thing they mentioned was
curiosity.  
I'd always supposed that all smart people were curious--
that curiosity was simply the first derivative of knowledge.  But
apparently hackers are particularly curious, especially about how
things work.  That makes sense, because programs are in effect
giant descriptions of how things work.Several friends mentioned hackers' ability to concentrate-- their
ability, as one put it, to "tune out everything outside their own
heads.''  I've certainly noticed this.  And I've heard several 
hackers say that after drinking even half a beer they can't program at
all.   So maybe hacking does require some special ability to focus.
Perhaps great hackers can load a large amount of context into their
head, so that when they look at a line of code, they see not just
that line but the whole program around it.  John McPhee
wrote that Bill Bradley's success as a basketball player was due
partly to his extraordinary peripheral vision.  "Perfect'' eyesight
means about 47 degrees of vertical peripheral vision.  Bill Bradley
had 70; he could see the basket when he was looking at the floor.
Maybe great hackers have some similar inborn ability.  (I cheat by
using a very dense language, 
which shrinks the court.)This could explain the disconnect over cubicles.  Maybe the people
in charge of facilities, not having any concentration to shatter,
have no idea that working in a cubicle feels to a hacker like having
one's brain in a blender.  (Whereas Bill, if the rumors of autism
are true, knows all too well.)One difference I've noticed between great hackers and smart people
in general is that hackers are more 
politically incorrect.  To the
extent there is a secret handshake among good hackers, it's when they
know one another well enough to express opinions that would get
them stoned to death by the general public.  And I can see why
political incorrectness would be a useful quality in programming.
Programs are very complex and, at least in the hands of good
programmers, very fluid.  In such situations it's helpful to have
a habit of questioning assumptions.Can you cultivate these qualities?  I don't know.  But you can at
least not repress them.  So here is my best shot at a recipe.  If
it is possible to make yourself into a great hacker, the way to do
it may be to make the following deal with yourself: you never have
to work on boring projects (unless your family will starve otherwise),
and in return, you'll never allow yourself to do a half-assed job.
All the great hackers I know seem to have made that deal, though
perhaps none of them had any choice in the matter.Notes
 In fairness, I have to say that IBM makes decent hardware.  I
wrote this on an IBM laptop. They did turn out to be doomed.  They shut down a few months
later. I think this is what people mean when they talk
about the "meaning of life."  On the face of it, this seems an 
odd idea.  Life isn't an expression; how could it have meaning?
But it can have a quality that feels a lot like meaning.  In a project
like a compiler, you have to solve a lot of problems, but the problems
all fall into a pattern, as in a signal.  Whereas when the problems
you have to solve are random, they seem like noise.
 Einstein at one point worked designing refrigerators. (He had equity.) It's hard to say exactly what constitutes research in the
computer world, but as a first approximation, it's software that
doesn't have users.I don't think it's publication that makes the best hackers want to work
in research departments.  I think it's mainly not having to have a
three hour meeting with a product manager about problems integrating
the Korean version of Word 13.27 with the talking paperclip. Something similar has been happening for a long time in the
construction industry. When you had a house built a couple hundred
years ago, the local builders built everything in it.  But increasingly
what builders do is assemble components designed and manufactured
by someone else.  This has, like the arrival of desktop publishing,
given people the freedom to experiment in disastrous ways, but it
is certainly more efficient. Google is much more dangerous to Microsoft than Netscape was.
Probably more dangerous than any other company has ever been.  Not
least because they're determined to fight.  On their job listing
page, they say that one of their "core values'' is "Don't be evil.''
From a company selling soybean oil or mining equipment, such a
statement would merely be eccentric.  But I think all of us in the
computer world recognize who that is a declaration of war on.Thanks to Jessica Livingston, Robert Morris, and Sarah Harlin
for reading earlier versions of this talk.

Want to start a startup?  Get funded by
Y Combinator.

Audio of talk

The Python Paradox

Japanese Translation

Russian Translation

Italian Translation

Spanish Translation

If you liked this, you may also like
Hackers & Painters.

If you liked this, you may also like
Hackers & Painters.
<|endoftext|>

<|startoftext|>
May 2003(This essay is derived from a guest lecture at Harvard, which incorporated
an earlier talk at Northeastern.)When I finished grad school in computer science I went
to art school to study painting.  A lot of people seemed surprised
that someone interested in computers would also be interested in painting.
They seemed to think that
hacking and painting were very different kinds of work-- that
hacking was cold, precise, and methodical, and that
painting was the frenzied expression of some primal urge.Both of these images are wrong.  Hacking and painting have a
lot in common.  In fact, of all the different types of people I've
known, hackers and painters are among the most alike.What hackers and painters have in common is that they're
both makers.  Along with composers, architects, and writers,
what hackers and painters are trying to do is make good things.
They're not doing research per se, though if in the course of
trying to make good things they discover some new technique,
so much the better.I've never liked the term "computer science."  The main
reason I don't like it is that there's no such thing.
Computer science is a
grab bag of tenuously related areas thrown together
by an accident of history, like Yugoslavia.
At one end you have people who are really mathematicians,
but call what they're doing computer science so they can get DARPA grants.
In the middle you have people working on
something like the natural history of computers-- studying the
behavior of algorithms for routing data through
networks, for example.  And then at the other extreme you
have the hackers, who are trying to
write interesting software, and for whom computers are just a
medium of expression, as concrete is for architects or
paint for painters.  It's as if
mathematicians, physicists, and architects all had to be in
the same department.Sometimes what the hackers do is called "software engineering,"
but this term is just as misleading.
Good software designers are no more engineers than architects are.
The border between architecture and engineering is not sharply
defined, but it's there.
It falls between what and how: architects decide what to do,
and engineers figure out how to do it.What and how should not be kept too separate.  You're
asking for trouble if you try to decide what to do without
understanding how to do it.
But hacking can certainly be more than just deciding how to
implement some spec.  At its best, it's creating the spec-- though
it turns out the best way to do that is to implement it.Perhaps one day
"computer science" will, like Yugoslavia, get broken up into its
component parts.  That might be a good thing.  Especially if it
meant independence for my native land, hacking.Bundling all these different types of work together in one
department may be convenient administratively, but it's confusing
intellectually. That's the other reason I don't like the name
"computer science."  Arguably the people in the middle are doing
something like an experimental science.  But the people at either
end, the hackers and the mathematicians, are not actually doing science.The mathematicians don't seem bothered by this.  They happily
set to work proving theorems like the other mathematicians
over in the math department, and probably soon stop noticing
that the building they work in says ``computer science'' on the
outside.  But for the hackers this label is a problem.
If what they're doing is called science, it makes them feel they
ought to be acting scientific.
So instead of doing what they really want to do, which is   
to design beautiful software, hackers in universities and
research labs feel they ought to be writing research papers.In the best case, the papers are just a formality.  Hackers write
cool software, and then write a paper about it, and the paper
becomes a proxy for the achievement represented by the software.
But often this mismatch causes problems.  It's easy to
drift away from building beautiful things toward building ugly
things that make more suitable subjects for research papers.Unfortunately, beautiful things don't always make the
best subjects for papers.
Number one, research must be original-- and
as anyone who has written a PhD dissertation knows, the way to
be sure that you're exploring virgin territory is to stake
out a piece of ground that no one wants.  Number two, research must be
substantial-- and awkward systems yield meatier papers,
because you can write about the obstacles you have to overcome
in order to get things done.  Nothing yields meaty problems like
starting with the wrong assumptions.  Most of AI is an example
of this rule; if you assume that knowledge can be represented
as a list of predicate logic expressions whose arguments represent
abstract concepts, you'll have a lot of
papers to write about how to make this work.  As Ricky Ricardo
used to say, "Lucy, you got a lot of explaining to do."The way to create something beautiful is often to make subtle
tweaks to something that already exists, or to combine existing
ideas in a slightly new way.  This kind of work is hard to
convey in a research paper.So why do universities and research labs continue to judge
hackers by publications?
For the same reason that "scholastic aptitude"
gets measured by simple-minded standardized tests, or
the productivity of programmers gets measured in lines of code.
These tests
are easy to apply, and there is nothing so tempting as an easy test
that kind of works.Measuring what hackers are actually trying to do, designing
beautiful software, would be much more difficult.  You need
a good sense of design to judge 
good design.  And
there is no correlation, except possibly
a negative 
one, between people's ability to recognize good
design and their confidence that they can.The only external test is time.  Over time, beautiful
things tend to thrive, and ugly
things tend to get discarded.  Unfortunately, the amounts of time
involved can be longer than human lifetimes.  Samuel Johnson
said it took a hundred years for a writer's reputation to
converge.  You have to wait for the writer's
influential friends to die, and then for all their followers
to die.I think hackers just have to resign themselves to having a large random
component in their reputations.  In this they are no different
from other makers.  In fact, they're lucky by comparison.   
The influence of fashion is not nearly so great in hacking as it
is in painting.There are worse things than having people misunderstand your
work.  A worse danger is that you
will yourself misunderstand your work.  Related fields are
where you go looking for ideas.  If you find yourself in the computer science
department, there is a natural temptation to believe, for example,
that hacking is the applied version of what theoretical computer
science is the theory of.   All
the time I was in graduate school I had an uncomfortable feeling
in the back of my mind that I ought to know more theory,
and that it was very remiss of me to have forgotten all that
stuff within three weeks of the final exam.Now I realize I was
mistaken.  Hackers need to understand the theory of computation
about as much as painters need to understand paint chemistry.
You need to know how to calculate time and
space complexity and about
Turing completeness.  You might also want to remember at
least the concept of a state machine, in case you have to write
a parser or a regular expression library.  Painters in fact   
have to remember a good deal more about paint chemistry than 
that.I've found that the best sources of ideas
are not the other fields that have the word "computer" in
their names, but the other fields inhabited by makers.
Painting has been a much richer source of ideas than the
theory of computation.For example, I was taught in college
that one ought to figure out a program
completely on paper
before even going near a computer.  I found that I did not
program this way.  I found that I liked to program
sitting in front of a computer, not a piece of paper.  Worse
still, instead of patiently writing out a complete program
and assuring myself it was correct, I tended to just spew
out code that was hopelessly broken, and gradually beat it into
shape.  Debugging, I was taught, was a kind of final pass where
you caught typos and oversights.  The way I worked, it
seemed like programming consisted of debugging.For a long time I felt bad about this, just as I once
felt bad that I didn't hold my pencil the way they taught me
to in elementary school.
If I had only looked over at
the other makers, the painters or the architects, I would
have realized that there was a name for what I was doing:
sketching.  As far as I can tell, the
way they taught me to program in college was all wrong.
You should figure out programs as you're writing them,
just as writers and painters and architects do.Realizing this has real implications for software design.
It means that a programming language should, above all, be
malleable.  A programming language is for 
thinking of
programs, not for expressing programs you've already thought
of.  It should be a pencil, not a pen.  Static typing would
be a fine idea if people actually did write programs the way
they taught me to in college.  But that's not how any of the  
hackers I know write programs.  We need a language that lets us
scribble and smudge and smear, not a language where you have
to sit with a teacup of types balanced on your knee and make
polite conversation with a strict old aunt of a compiler.While we're on the subject of static typing, identifying with
the makers will save us from another problem that afflicts
the sciences: math envy.  Everyone in the sciences
secretly believes that mathematicians are smarter than they are.  
I think mathematicians also believe this.  At any rate,
the result is that scientists tend to make their
work look as mathematical as possible.  In a field like
physics this probably doesn't do much harm, but the further you
get from the natural sciences, the more of a problem it
becomes.A page of formulas just looks so impressive.
(Tip: for extra impressiveness, use Greek variables.)  And
so there is a great temptation to work on problems you
can treat formally, rather than problems that are, say,
important.If hackers identified with other makers, like writers and
painters, they wouldn't feel tempted to do      
this.  Writers and painters don't suffer from math envy.
They feel as if they're doing something completely unrelated.
So are hackers, I think.If universities and research labs keep hackers from doing
the kind of work they want to do,
perhaps the place for them is in companies.
Unfortunately, most companies won't let hackers do what they
want either.  Universities and research labs force hackers
to be scientists, and companies force them to be engineers.I only discovered this myself quite recently.  When Yahoo bought
Viaweb, they asked me what I wanted to do.  I had never
liked the business side very much, and said that I just wanted to
hack.  When I got to Yahoo, I found that what hacking meant
to them was implementing software, not designing it.  Programmers
were seen as technicians who translated the visions (if
that is the word) of product managers into code.This seems to be the
default plan in big companies.  They do it because
it decreases the standard deviation of the outcome.
Only a small percentage of hackers can actually design software,
and it's hard for the
people running a company to pick these out.  So instead of
entrusting the future of the software to
one brilliant hacker, most companies set things up so that it is
designed by committee, and the hackers merely
implement the design.If you want to make money at some point, remember this,
because this is one of the reasons startups win.  Big companies want
to decrease the standard deviation of design outcomes because they
want to avoid disasters.  But when you damp oscillations, you
lose the high points as well as the low.  This is not a problem for
big companies, because they don't win by making great
products.  Big companies win by sucking less than other big companies.So if you can figure out a way to get in a
design war with a company big enough that its software is   
designed by product managers, they'll never be able to keep up
with you.  These opportunities are not easy to find, though.
It's hard to engage a big company in a design war,
just as it's hard to engage an opponent inside a castle in hand
to hand combat.  It would be pretty easy to write a better
word processor than Microsoft Word, for example, but Microsoft,
within the castle of their operating system monopoly,
probably wouldn't even notice if you did.The place to fight design wars is in new markets, where no one
has yet managed to establish any fortifications.  That's where
you can win big by taking the bold approach to design, and
having the same people both design and implement the product.  
Microsoft themselves did this at the start.  So did Apple.
And Hewlett-Packard.  I suspect almost every successful startup
has.So one way to build great software is to start your own
startup.  There are two problems with this, though.  One is
that in a startup you have to do so much besides write software.
At Viaweb I considered myself lucky if I
got to hack a quarter of the time.  And the things I had to   
do the other three quarters of the time ranged from tedious
to terrifying.  I have a benchmark for this, because I
once had to leave a board meeting to have
some cavities filled.  I remember sitting back in the
dentist's chair, waiting for the drill, and feeling like
I was on vacation.The other problem with startups is that there is not much
overlap between the kind of software that makes money and the
kind that's interesting to write.  Programming languages
are interesting to write, and Microsoft's first product was
one, in fact, but no one will pay for programming languages
now.  If you want to make money, you tend to be forced to work
on problems that are too nasty for anyone to solve for free.All makers face this problem.  Prices are
determined by supply and demand, and there is just not as much
demand for things that are fun to work on as there is for
things that solve the mundane problems of individual customers.
Acting in off-Broadway plays just doesn't pay as well as
wearing a gorilla suit in someone's booth at a
trade show.  Writing novels doesn't pay as well as writing
ad copy for garbage disposals.
And hacking programming languages doesn't pay as well
as figuring out how to connect some company's
legacy database to their Web server.I think the answer to this problem, in the case of software,
is a concept known to nearly all makers: the day job.
This phrase began with musicians, who
perform at night.  More generally, it means that you have one
kind of work you do for money, and another for love.Nearly all makers have day jobs early in their careers.
Painters and writers notoriously do.  If you're lucky
you can get a day job that's closely
related to your real work.  Musicians often
seem to work in record stores.  A hacker working on some
programming language or operating system might likewise be able to
get a day job using it.  When I say that the answer is for hackers to have day jobs, 
and work on beautiful software on the side, I'm not proposing
this as a new idea.  This is what open-source hacking is all   
about.  What I'm saying is that open-source is probably the right
model, because it has been independently confirmed by all the  
other makers.It seems surprising to me that any employer would be reluctant
to let hackers work on open-source projects.
At Viaweb, we would have been reluctant to hire anyone
who didn't.  When we interviewed
programmers, the main
thing we cared about was what kind of software they
wrote in their spare time.
You can't do anything really well unless
you love it, and if you love to hack you'll inevitably
be working on projects of your own. Because hackers are makers rather than scientists,
the right place to look for metaphors is not in the
sciences, but among other kinds of makers.  What else can painting
teach us about hacking?One thing we can learn, or at least confirm, from the
example of painting is how to learn to hack.  You learn to
paint mostly by doing it.
Ditto for hacking.  Most hackers don't learn to hack by
taking college courses in programming.  They learn to hack
by writing programs of their own at age thirteen.  Even in   
college classes, you learn to hack mostly by hacking. Because painters leave a trail of work behind them, you
can watch them learn by doing.  If you look at the work
of a painter in chronological order, you'll find that each  
painting builds on things that have been learned in previous
ones.  When there's something in
a painting that works very well, you can usually find version 
1 of it in a smaller form in some earlier painting.I think most makers work this way.  Writers and architects seem
to as well.  Maybe it would be good for hackers
to act more like painters, and regularly start over from scratch,
instead of continuing to work for years on one project, and
trying to incorporate all their later ideas as revisions.The fact that hackers learn to hack by doing it is another
sign of how different hacking is from the sciences.  Scientists
don't learn science by doing it, but by doing labs and problem sets.
Scientists start out doing work that's perfect, in the sense
that they're just trying to reproduce work someone else has 
already done for them.
Eventually, they get
to the point where they can do original work.
Whereas hackers, from the start, are doing original work; it's
just very bad.  So hackers start original, and get good, and
scientists start good, and get original.
The other way makers learn is from examples.
For a painter, a museum is a reference library of techniques.
For hundreds of years it has been part of the traditional
education of painters to copy the works of the great masters,
because copying forces you to look closely
at the way a painting is made.Writers do this too.
Benjamin Franklin learned to write by summarizing the points   
in the essays of Addison and Steele and then trying to
reproduce them.  Raymond Chandler did the same thing
with detective stories.Hackers, likewise, can learn to program by looking at 
good programs-- not just at what they do, but the source
code too.  One of the less publicized benefits
of the open-source movement is that it has made it easier
to learn to program.  When I learned to program, we had to rely
mostly on examples in books.  The one big chunk of
code available then was Unix, but even this was not   
open source.  Most of the people who read the source
read it in illicit photocopies of John Lions' book, which
though written in 1977 was not allowed to be published
until 1996.Another example we can take from painting is the way that
paintings are created by gradual refinement.  Paintings usually
begin with a sketch.
Gradually the details get filled in.
But it is not merely a process of filling in. Sometimes   
the original plans turn out to be mistaken.
Countless paintings,
when you look at them in xrays, turn out to have limbs that
have been moved or facial features that have been readjusted.Here's a case where we can learn from painting.  I think hacking
should work this way too.  It's unrealistic
to expect that the specifications for a program will be
perfect. You're
better off if you admit this up front, and write programs in
a way that allows specifications to change on the fly.(The structure of large companies makes this hard for them
to do, so here is another place where startups have an advantage.)Everyone by now presumably knows about the danger of premature
optimization.  I think we should be just as worried about
premature design-- deciding too early what
a program should do.The right tools can help us avoid
this danger.
A good programming language should, like oil paint, make it
easy to change your mind.  Dynamic typing is a win here because
you don't have to
commit to specific data representations up front.
But the key to flexibility, I think, is to make the language
very abstract.
The easiest program to change is one that's very short.
This sounds like a paradox, but a great painting
has to be better than it has to be.
For example, when Leonardo
painted the portrait of Ginevra de Benci
in the National Gallery, he put a juniper bush behind her head.
In it he carefully
painted each individual leaf.  Many painters might have thought,
this is just something to put in the background to frame
her head.  No one will look that closely at it.Not Leonardo.  How hard he worked on part of a painting didn't
depend at all on how closely he expected anyone to look at it.
He was like Michael Jordan.  Relentless.Relentlessness wins because, in the aggregate, unseen details
become visible.
When people walk by the portrait of Ginevra de Benci,
their attention is often immediately arrested by it,
even before they look at the label and notice that it says
Leonardo da Vinci.  All those unseen details combine to produce
something that's just stunning, like a thousand barely audible
voices all singing in tune.Great software, likewise, requires a fanatical devotion to
beauty.  If you look inside good software, you find that
parts no one is ever supposed to see are beautiful too.
I'm not claiming I write great software, but I
know that when it comes to code I behave in a way that would
make me eligible for prescription drugs if I approached everyday
life the same way.
It drives me crazy to see code that's badly indented,
or that uses ugly variable names.If a hacker were a mere implementor, turning a spec into code, then
he could just work his way through it from one end to the other like
someone digging a ditch.  But if the hacker is a creator, we have
to take inspiration into account.In hacking, like painting,
work comes in cycles.  Sometimes you get excited about some
new project and you want to work sixteen hours a day on it. 
Other times nothing seems interesting.To do good work you have to take these cycles into
account, because they're affected by how you react to them.
When you're driving a
car with a manual transmission on a hill, you have to back off
the clutch sometimes to avoid stalling.  Backing
off can likewise prevent ambition from stalling.
In both painting and hacking there are some
tasks that are terrifyingly ambitious, and others that are
comfortingly routine.  It's a good idea to save some easy
tasks for moments when you would otherwise stall.In hacking, this can literally mean saving up bugs.
I like debugging: it's the
one time that hacking is as straightforward as   
people think it is.  You have a
totally constrained problem, and all you have to do is solve
it.  Your program is supposed to do x.  Instead it does y.
Where does it go wrong? You know you're going to win
in the end.  It's as relaxing as painting a wall.The example of painting can teach us not only how to manage our
own work, but how to work together.  A lot of the
great art of the past is the work of multiple hands, though
there may only be one name on the wall next to it in the
museum.  Leonardo was an apprentice in the workshop of
Verrocchio and painted one of the angels in his Baptism of
Christ.  This sort of thing was the rule, not the exception.
Michelangelo was considered especially dedicated for insisting
on painting all the figures on the ceiling of the Sistine
Chapel himself.As far as I know, when painters worked together on a painting,
they never worked on the same parts.  It was common
for the master to paint the principal figures and for assistants
to paint the others and the background.  But you never had
one guy painting over the work of another.I think this is the right model for collaboration in software
too.  Don't push it too far.  When a piece of code is
being hacked by three or four different people, no one of whom
really owns it, it will end up being like a common-room.  It will
tend to feel bleak and abandoned, and accumulate cruft.
The right
way to collaborate, I think, is to divide projects into sharply
defined modules, each with a definite owner, and with interfaces
between them that are as carefully designed and, if possible,
as articulated as programming languages.Like painting, most software is intended for
a human audience.  And so hackers, like painters, must have
empathy to do really great work.  You have to be able to see
things from the user's point of view.When I was a kid I was always being told to look at things from
someone else's point of view.  What this always meant in
practice was to do what someone else wanted, instead of what
I wanted.  This of course gave empathy a bad name, and I made a
point of not cultivating it.Boy, was I wrong.  It turns out that looking at things from 
other people's point of view is practically the secret of
success.  It doesn't necessarily mean being self-sacrificing.
Far from it.  Understanding how someone else sees things
doesn't imply that you'll act in his interest; in some
situations-- in war, for example-- you want to do exactly
the opposite. Most makers make things for a human audience.
And to engage an audience you have to understand what they need.
Nearly all the greatest paintings are paintings of people,
for example, because people are what people are interested in.Empathy is probably the single most important difference
between a good hacker and a great one.  Some hackers
are quite smart, but when it comes to empathy are
practically solipsists.  It's hard for such      
people to design great software , because they can't
see things from the user's point of view.One way to tell how good people are at empathy is to watch
them explain a technical question to someone without a technical
background.  We probably all know people who, though otherwise smart,
are just comically bad at this.  If someone asks them at
a dinner party what a programming language is, they'll
say something like ``Oh, a high-level language is what
the compiler uses as input to generate object code.''
High-level language?  Compiler?  Object code?  Someone who 
doesn't know what a programming language is obviously doesn't
know what these things are, either.Part of what software has to do is explain itself.  So to   
write good software you have to understand how little users   
understand.
They're going to walk up to the software with no preparation, and
it had better do what they guess it will, because they're
not going to read the manual.  The best system I've ever seen 
in this respect was the original Macintosh, in 1985.
It did what software almost never does: it just worked. Source code, too, should explain itself.  If I could get people to
remember just one quote about programming, it would be the
one at the beginning of Structure and Interpretation of Computer
Programs.

Programs should be written for people to read, and
only incidentally for machines to execute.

You need to have 
empathy not just for your users, but for your readers.  It's in  
your interest, because you'll be one of them.
Many a hacker has written a program only to
find on returning to it six months later that he has no idea   
how it works.  I know several people who've sworn off Perl after
such experiences. Lack of empathy is associated with intelligence, to the point
that there is even something of a fashion for it in some places.
But I don't think there's any correlation.
You can do well in math and
the natural sciences without having to learn empathy, and people in these
fields tend to be smart, so the two qualities have come to be
associated.  But there are plenty of dumb people who are bad at
empathy too.  Just listen to the people who call in with questions on
talk shows.  They ask whatever it is they're asking in
such a roundabout way
that the hosts often have to rephrase the question for them.So, if hacking works like painting and writing, is it as cool?
After all, you only get one life.
You might as well spend it working on something great.Unfortunately, the question is hard to answer.  There is always
a big time lag in prestige.  It's like light from a distant star.
Painting has prestige now because of great work people did five hundred
years ago.  At the time, no one thought
these paintings were as important as we do today.  It would have
seemed very odd to people at the time that Federico da Montefeltro,
the Duke of Urbino, would one day be known mostly as the guy
with the strange nose in a painting 
by Piero della Francesca.So while I admit that hacking doesn't seem as cool as painting now,
we should remember that painting itself didn't seem as cool in
its glory days as it does now.What we can say with some confidence is that these are the glory
days of hacking.  In most fields the great work is done early on.
The paintings made between 1430 and 1500 are still unsurpassed.
Shakespeare appeared just as professional theater was being born,

and pushed the medium
so far that every playwright since has had to live in his shadow.
Albrecht Durer did the same thing with engraving, and Jane Austen
with the novel.Over and over we see the same pattern.  A new medium appears, and
people are so excited about it that they explore most of its
possibilities in the first couple generations.   Hacking seems
to be in this phase now.Painting was not, in Leonardo's time, as cool as his work
helped make it.
How cool hacking turns out to be will depend on what we can
do with this new medium.  

Notes The greatest damage that photography has done
to painting may be the fact that it killed the best day job.
Most of the great painters in history supported
themselves by painting portraits.   I've been told that Microsoft discourages
employees from contributing to open-source projects, even in
their spare time.
But so many of the best hackers work on open-source
projects now that the main effect of this policy may be
to ensure that they won't be able to hire any first-rate
programmers. What you learn about programming in college is much like
what you learn about books or clothes or dating: what bad taste you
had in high school. Here's an example of applied empathy.
At Viaweb, if we couldn't decide between two alternatives, we'd
ask, what would our competitors hate most?  At one point a
competitor added a feature to their software that was basically
useless, but since it was one of few they had that we didn't, they
made much of it in the trade press.
We could have tried to explain that the feature was useless,
but we decided it would annoy our competitor more if we
just implemented it ourselves, so we hacked together our own
version that afternoon. Except text editors and compilers.  Hackers don't need empathy to
design these, because they are themselves typical users. Well, almost.  They overshot the available RAM somewhat,
causing much inconvenient disk swapping, but this could be fixed
within a few months by buying an additional disk drive. The way to make programs easy to read is not to
stuff them with comments. I would take Abelson and Sussman's
quote a step further.  Programming languages should be designed
to express algorithms, and only incidentally to tell computers
how to execute them.  A good programming language
ought to be better for explaining software than English.
You should only
need comments when there is some kind of kludge you need to warn
readers about, just as on a road there are only
arrows on parts with unexpectedly sharp curves.
Thanks to Trevor Blackwell, Robert Morris, Dan Giffin, and Lisa
Randall for reading drafts of this, and to Henry Leitner
and Larry Finkelstein for inviting me to speak.

Japanese Translation

Spanish Translation

German Translation

Portuguese Translation

Czech Translation

Why Good Design Comes from Bad Design

Knuth: Computer Programming as an Art

You'll find this essay and 14 others in
Hackers & Painters.

You'll find this essay and 14 others in
Hackers & Painters.
<|endoftext|>

<|startoftext|>
Want to start a startup?  Get funded by
Y Combinator.

November 2012The way to get startup ideas is not to try to think of startup
ideas.  It's to look for problems, preferably problems you have
yourself.The very best startup ideas tend to have three things in common:
they're something the founders themselves want, that they themselves
can build, and that few others realize are worth doing.  Microsoft,
Apple, Yahoo, Google, and Facebook all began this way.
ProblemsWhy is it so important to work on a problem you have?  Among other
things, it ensures the problem really exists.  It sounds obvious
to say you should only work on problems that exist.  And yet by far
the most common mistake startups make is to solve problems no one
has.I made it myself.  In 1995 I started a company to put art galleries
online.  But galleries didn't want to be online.  It's not how the
art business works.  So why did I spend 6 months working on this
stupid idea?  Because I didn't pay attention to users.  I invented
a model of the world that didn't correspond to reality, and worked
from that.  I didn't notice my model was wrong until I tried
to convince users to pay for what we'd built.  Even then I took
embarrassingly long to catch on.  I was attached to my model of the
world, and I'd spent a lot of time on the software.  They had to
want it!Why do so many founders build things no one wants?  Because they
begin by trying to think of startup ideas.  That m.o. is doubly
dangerous: it doesn't merely yield few good ideas; it yields bad
ideas that sound plausible enough to fool you into working on them.At YC we call these "made-up" or "sitcom" startup ideas.  Imagine
one of the characters on a TV show was starting a startup.  The
writers would have to invent something for it to do.  But coming
up with good startup ideas is hard.  It's not something you can do
for the asking.  So (unless they got amazingly lucky) the writers
would come up with an idea that sounded plausible, but was actually
bad.For example, a social network for pet owners.  It doesn't sound
obviously mistaken.  Millions of people have pets.  Often they care
a lot about their pets and spend a lot of money on them.  Surely
many of these people would like a site where they could talk to
other pet owners.  Not all of them perhaps, but if just 2 or 3
percent were regular visitors, you could have millions of users.
You could serve them targeted offers, and maybe charge for premium
features. 
The danger of an idea like this is that when you run it by your
friends with pets, they don't say "I would never use this." They
say "Yeah, maybe I could see using something like that." Even when
the startup launches, it will sound plausible to a lot of people.
They don't want to use it themselves, at least not right now, but
they could imagine other people wanting it.  Sum that reaction
across the entire population, and you have zero users. 

WellWhen a startup launches, there have to be at least some users who
really need what they're making — not just people who could see
themselves using it one day, but who want it urgently.  Usually
this initial group of users is small, for the simple reason that
if there were something that large numbers of people urgently needed
and that could be built with the amount of effort a startup usually
puts into a version one, it would probably already exist.  Which
means you have to compromise on one dimension: you can either build
something a large number of people want a small amount, or something
a small number of people want a large amount.  Choose the latter.
Not all ideas of that type are good startup ideas, but nearly all
good startup ideas are of that type.Imagine a graph whose x axis represents all the people who might
want what you're making and whose y axis represents how much they
want it.  If you invert the scale on the y axis, you can envision
companies as holes.  Google is an immense crater: hundreds of
millions of people use it, and they need it a lot.  A startup just
starting out can't expect to excavate that much volume.  So you
have two choices about the shape of hole you start with.  You can
either dig a hole that's broad but shallow, or one that's narrow
and deep, like a well.Made-up startup ideas are usually of the first type.  Lots of people
are mildly interested in a social network for pet owners.Nearly all good startup ideas are of the second type.  Microsoft
was a well when they made Altair Basic.  There were only a couple
thousand Altair owners, but without this software they were programming
in machine language.  Thirty years later Facebook had the same
shape.  Their first site was exclusively for Harvard students, of
which there are only a few thousand, but those few thousand users
wanted it a lot.When you have an idea for a startup, ask yourself: who wants this
right now?  Who wants this so much that they'll use it even when
it's a crappy version one made by a two-person startup they've never
heard of?  If you can't answer that, the idea is probably bad. 
You don't need the narrowness of the well per se.  It's depth you
need; you get narrowness as a byproduct of optimizing for depth
(and speed).  But you almost always do get it.  In practice the
link between depth and narrowness is so strong that it's a good
sign when you know that an idea will appeal strongly to a specific
group or type of user.But while demand shaped like a well is almost a necessary condition
for a good startup idea, it's not a sufficient one.  If Mark
Zuckerberg had built something that could only ever have appealed
to Harvard students, it would not have been a good startup idea.
Facebook was a good idea because it started with a small market
there was a fast path out of.  Colleges are similar enough that if
you build a facebook that works at Harvard, it will work at any
college. So you spread rapidly through all the colleges.  Once you
have all the college students, you get everyone else simply by
letting them in.Similarly for Microsoft: Basic for the Altair; Basic for other
machines; other languages besides Basic; operating systems;
applications; IPO.
SelfHow do you tell whether there's a path out of an idea?  How do you
tell whether something is the germ of a giant company, or just a
niche product?  Often you can't. The founders of Airbnb didn't
realize at first how big a market they were tapping.  Initially
they had a much narrower idea.  They were going to let hosts rent
out space on their floors during conventions.  They didn't foresee
the expansion of this idea; it forced itself upon them gradually.
All they knew at first is that they were onto something.  That's
probably as much as Bill Gates or Mark Zuckerberg knew at first.Occasionally it's obvious from the beginning when there's a path
out of the initial niche.  And sometimes I can see a path that's
not immediately obvious; that's one of our specialties at YC.  But
there are limits to how well this can be done, no matter how much
experience you have.  The most important thing to understand about
paths out of the initial idea is the meta-fact that these are hard
to see.So if you can't predict whether there's a path out of an idea, how
do you choose between ideas?  The truth is disappointing but
interesting: if you're the right sort of person, you have the right
sort of hunches.  If you're at the leading edge of a field that's
changing fast, when you have a hunch that something is worth doing,
you're more likely to be right.In Zen and the Art of Motorcycle Maintenance, Robert Pirsig says:

  You want to know how to paint a perfect painting? It's easy.  Make
  yourself perfect and then just paint naturally.

I've wondered about that passage since I read it in high school.
I'm not sure how useful his advice is for painting specifically,
but it fits this situation well.  Empirically, the way to have good
startup ideas is to become the sort of person who has them.Being at the leading edge of a field doesn't mean you have to be
one of the people pushing it forward.  You can also be at the leading
edge as a user.  It was not so much because he was a programmer
that Facebook seemed a good idea to Mark Zuckerberg as because he
used computers so much.  If you'd asked most 40 year olds in 2004
whether they'd like to publish their lives semi-publicly on the
Internet, they'd have been horrified at the idea.  But Mark already
lived online; to him it seemed natural.Paul Buchheit says that people at the leading edge of a rapidly
changing field "live in the future."  Combine that with Pirsig and
you get:

  Live in the future, then build what's missing.

That describes the way many if not most of the biggest startups got
started.  Neither Apple nor Yahoo nor Google nor Facebook were even
supposed to be companies at first.  They grew out of things their
founders built because there seemed a gap in the world.If you look at the way successful founders have had their ideas,
it's generally the result of some external stimulus hitting a
prepared mind.  Bill Gates and Paul Allen hear about the Altair and
think "I bet we could write a Basic interpreter for it." Drew Houston
realizes he's forgotten his USB stick and thinks "I really need to
make my files live online." Lots of people heard about the Altair.
Lots forgot USB sticks.  The reason those stimuli caused those
founders to start companies was that their experiences had prepared
them to notice the opportunities they represented.The verb you want to be using with respect to startup ideas is not
"think up" but "notice." At YC we call ideas that grow naturally
out of the founders' own experiences "organic" startup ideas.  The
most successful startups almost all begin this way.That may not have been what you wanted to hear.  You may have
expected recipes for coming up with startup ideas, and instead I'm
telling you that the key is to have a mind that's prepared in the
right way.  But disappointing though it may be, this is the truth.
And it is a recipe of a sort, just one that in the worst case takes
a year rather than a weekend.If you're not at the leading edge of some rapidly changing field,
you can get to one.  For example, anyone reasonably smart can
probably get to an edge of programming (e.g. building mobile apps)
in a year.  Since a successful startup will consume at least 3-5
years of your life, a year's preparation would be a reasonable
investment.  Especially if you're also looking for a cofounder.
You don't have to learn programming to be at the leading edge of a
domain that's changing fast.  Other domains change fast.  But while
learning to hack is not necessary, it is for the forseeable future
sufficient. As Marc Andreessen put it, software is eating the world,
and this trend has decades left to run.Knowing how to hack also means that when you have ideas, you'll be
able to implement them.  That's not absolutely necessary (Jeff Bezos
couldn't) but it's an advantage.  It's a big advantage, when you're
considering an idea like putting a college facebook online, if
instead of merely thinking "That's an interesting idea," you can
think instead "That's an interesting idea.  I'll try building an
initial version tonight."  It's even better when you're both a
programmer and the target user, because then the cycle of generating
new versions and testing them on users can happen inside one head.
NoticingOnce you're living in the future in some respect, the way to notice
startup ideas is to look for things that seem to be missing.  If
you're really at the leading edge of a rapidly changing field, there
will be things that are obviously missing.  What won't be obvious
is that they're startup ideas.  So if you want to find startup
ideas, don't merely turn on the filter "What's missing?" Also turn
off every other filter, particularly "Could this be a big company?"
There's plenty of time to apply that test later.  But if you're
thinking about that initially, it may not only filter out lots
of good ideas, but also cause you to focus on bad ones.Most things that are missing will take some time to see.  You almost
have to trick yourself into seeing the ideas around you.But you know the ideas are out there.  This is not one of those
problems where there might not be an answer.  It's impossibly
unlikely that this is the exact moment when technological progress
stops.  You can be sure people are going to build things in the
next few years that will make you think "What did I do before x?"And when these problems get solved, they will probably seem flamingly
obvious in retrospect.  What you need to do is turn off the filters
that usually prevent you from seeing them.  The most powerful is
simply taking the current state of the world for granted.  Even the
most radically open-minded of us mostly do that.  You couldn't get
from your bed to the front door if you stopped to question everything.But if you're looking for startup ideas you can sacrifice some of
the efficiency of taking the status quo for granted and start to
question things.  Why is your inbox overflowing?  Because you get
a lot of email, or because it's hard to get email out of your inbox?
Why do you get so much email?  What problems are people trying to
solve by sending you email?  Are there better ways to solve them?
And why is it hard to get emails out of your inbox?  Why do you
keep emails around after you've read them?  Is an inbox the optimal
tool for that?Pay particular attention to things that chafe you.  The advantage
of taking the status quo for granted is not just that it makes life
(locally) more efficient, but also that it makes life more tolerable.
If you knew about all the things we'll get in the next 50 years but
don't have yet, you'd find present day life pretty constraining,
just as someone from the present would if they were sent back 50
years in a time machine.  When something annoys you, it could be
because you're living in the future.When you find the right sort of problem, you should probably be
able to describe it as obvious, at least to you.  When we started
Viaweb, all the online stores were built by hand, by web designers
making individual HTML pages.  It was obvious to us as programmers
that these sites would have to be generated by software.
Which means, strangely enough, that coming up with startup ideas
is a question of seeing the obvious.  That suggests how weird this
process is: you're trying to see things that are obvious, and yet
that you hadn't seen.Since what you need to do here is loosen up your own mind, it may
be best not to make too much of a direct frontal attack on the
problem — i.e. to sit down and try to think of ideas.  The best
plan may be just to keep a background process running, looking for
things that seem to be missing.  Work on hard problems, driven
mainly by curiosity, but have a second self watching over your
shoulder, taking note of gaps and anomalies.  
Give yourself some time.  You have a lot of control over the rate
at which you turn yours into a prepared mind, but you have less
control over the stimuli that spark ideas when they hit it.  If
Bill Gates and Paul Allen had constrained themselves to come up
with a startup idea in one month, what if they'd chosen a month
before the Altair appeared?  They probably would have worked on a
less promising idea.  Drew Houston did work on a less promising
idea before Dropbox: an SAT prep startup.  But Dropbox was a much
better idea, both in the absolute sense and also as a match for his
skills.
A good way to trick yourself into noticing ideas is to work on
projects that seem like they'd be cool.  If you do that, you'll
naturally tend to build things that are missing.  It wouldn't seem
as interesting to build something that already existed.Just as trying to think up startup ideas tends to produce bad ones,
working on things that could be dismissed as "toys" often produces
good ones.  When something is described as a toy, that means it has
everything an idea needs except being important.  It's cool; users
love it; it just doesn't matter.  But if you're living in the future
and you build something cool that users love, it may matter more
than outsiders think.  Microcomputers seemed like toys when Apple
and Microsoft started working on them.  I'm old enough to remember
that era; the usual term for people with their own microcomputers
was "hobbyists."  BackRub seemed like an inconsequential science
project.  The Facebook was just a way for undergrads to stalk one
another.At YC we're excited when we meet startups working on things that
we could imagine know-it-alls on forums dismissing as toys.  To us
that's positive evidence an idea is good.If you can afford to take a long view (and arguably you can't afford
not to), you can turn "Live in the future and build what's missing"
into something even better:

  Live in the future and build what seems interesting.

SchoolThat's what I'd advise college students to do, rather than trying
to learn about "entrepreneurship."  "Entrepreneurship" is something
you learn best by doing it.  The examples of the most successful
founders make that clear.  What you should be spending your time
on in college is ratcheting yourself into the future.  College is
an incomparable opportunity to do that.  What a waste to sacrifice
an opportunity to solve the hard part of starting a startup — becoming 
the sort of person who can have organic startup ideas — by 
spending time learning about the easy part.  Especially since
you won't even really learn about it, any more than you'd learn
about sex in a class.  All you'll learn is the words for things.The clash of domains is a particularly fruitful source of ideas.
If you know a lot about programming and you start learning about
some other field, you'll probably see problems that software could
solve.  In fact, you're doubly likely to find good problems in
another domain: (a) the inhabitants of that domain are not as likely
as software people to have already solved their problems with
software, and (b) since you come into the new domain totally ignorant,
you don't even know what the status quo is to take it for granted.So if you're a CS major and you want to start a startup, instead
of taking a class on entrepreneurship you're better off taking a
class on, say, genetics.  Or better still, go work for a biotech
company.  CS majors normally get summer jobs at computer hardware
or software companies.  But if you want to find startup ideas, you
might do better to get a summer job in some unrelated field. 
Or don't take any extra classes, and just build things.  It's no
coincidence that Microsoft and Facebook both got started in January.
At Harvard that is (or was) Reading Period, when students have no
classes to attend because they're supposed to be studying for finals.
But don't feel like you have to build things that will become startups.  That's
premature optimization. Just build things.  Preferably with other
students.  It's not just the classes that make a university such a
good place to crank oneself into the future.  You're also surrounded
by other people trying to do the same thing.  If you work together
with them on projects, you'll end up producing not just organic
ideas, but organic ideas with organic founding teams — and that,
empirically, is the best combination.Beware of research.  If an undergrad writes something all his friends
start using, it's quite likely to represent a good startup idea.
Whereas a PhD dissertation is extremely unlikely to.  For some
reason, the more a project has to count as research, the less likely
it is to be something that could be turned into a startup.

I think the reason is that the subset of ideas that count as research
is so narrow that it's unlikely that a project that satisfied that
constraint would also satisfy the orthogonal constraint of solving
users' problems.  Whereas when students (or professors) build
something as a side-project, they automatically gravitate toward
solving users' problems — perhaps even with an additional energy
that comes from being freed from the constraints of research.
CompetitionBecause a good idea should seem obvious, when you have one you'll
tend to feel that you're late.  Don't let that deter you.  Worrying
that you're late is one of the signs of a good idea.  Ten minutes
of searching the web will usually settle the question.  Even if you
find someone else working on the same thing, you're probably not
too late.  It's exceptionally rare for startups to be killed by
competitors — so rare that you can almost discount the possibility.
So unless you discover a competitor with the sort of lock-in that
would prevent users from choosing you, don't discard the idea.If you're uncertain, ask users.  The question of whether you're too
late is subsumed by the question of whether anyone urgently needs
what you plan to make.  If you have something that no competitor
does and that some subset of users urgently need, you have a
beachhead.  
The question then is whether that beachhead is big enough. Or more
importantly, who's in it: if the beachhead consists of people doing
something lots more people will be doing in the future, then it's
probably big enough no matter how small it is.  For example, if
you're building something differentiated from competitors by the
fact that it works on phones, but it only works on the newest phones,
that's probably a big enough beachhead.Err on the side of doing things where you'll face competitors.
Inexperienced founders usually give competitors more credit than
they deserve.  Whether you succeed depends far more on you than on
your competitors.  So better a good idea with competitors than a
bad one without.You don't need to worry about entering a "crowded market" so long
as you have a thesis about what everyone else in it is overlooking.
In fact that's a very promising starting point.  Google was that
type of idea.  Your thesis has to be more precise than "we're going
to make an x that doesn't suck" though. You have to be able to
phrase it in terms of something the incumbents are overlooking.
Best of all is when you can say that they didn't have the courage
of their convictions, and that your plan is what they'd have done
if they'd followed through on their own insights.  Google was that
type of idea too.  The search engines that preceded them shied away
from the most radical implications of what they were doing — particularly 
that the better a job they did, the faster users would
leave.A crowded market is actually a good sign, because it means both
that there's demand and that none of the existing solutions are
good enough.  A startup can't hope to enter a market that's obviously
big and yet in which they have no competitors.  So any startup that
succeeds is either going to be entering a market with existing
competitors, but armed with some secret weapon that will get them
all the users (like Google), or entering a market that looks small
but which will turn out to be big (like Microsoft).  

FiltersThere are two more filters you'll need to turn off if you want to
notice startup ideas: the unsexy filter and the schlep filter.Most programmers wish they could start a startup by just writing
some brilliant code, pushing it to a server, and having users pay
them lots of money.  They'd prefer not to deal with tedious problems
or get involved in messy ways with the real world.  Which is a
reasonable preference, because such things slow you down.  But this
preference is so widespread that the space of convenient startup
ideas has been stripped pretty clean.  If you let your mind wander
a few blocks down the street to the messy, tedious ideas, you'll
find valuable ones just sitting there waiting to be implemented.The schlep filter is so dangerous that I wrote a separate essay
about the condition it induces, which I called 
schlep blindness.
I gave Stripe as an example of a startup that benefited from turning
off this filter, and a pretty striking example it is.  Thousands
of programmers were in a position to see this idea; thousands of
programmers knew how painful it was to process payments before
Stripe.  But when they looked for startup ideas they didn't see
this one, because unconsciously they shrank from having to deal
with payments.  And dealing with payments is a schlep for Stripe,
but not an intolerable one.  In fact they might have had net less
pain; because the fear of dealing with payments kept most people
away from this idea, Stripe has had comparatively smooth sailing
in other areas that are sometimes painful, like user acquisition.
They didn't have to try very hard to make themselves heard by users,
because users were desperately waiting for what they were building.The unsexy filter is similar to the schlep filter, except it keeps
you from working on problems you despise rather than ones you fear.
We overcame this one to work on Viaweb. There were interesting
things about the architecture of our software, but we weren't
interested in ecommerce per se.  We could see the problem was one
that needed to be solved though.Turning off the schlep filter is more important than turning off
the unsexy filter, because the schlep filter is more likely to be
an illusion.  And even to the degree it isn't, it's a worse form
of self-indulgence.  Starting a successful startup is going to be
fairly laborious no matter what.  Even if the product doesn't entail
a lot of schleps, you'll still have plenty dealing with investors,
hiring and firing people, and so on.  So if there's some idea you
think would be cool but you're kept away from by fear of the schleps
involved, don't worry: any sufficiently good idea will have as many.The unsexy filter, while still a source of error, is not as entirely
useless as the schlep filter.  If you're at the leading edge of a
field that's changing rapidly, your ideas about what's sexy will
be somewhat correlated with what's valuable in practice.  Particularly
as you get older and more experienced.  Plus if you find an idea
sexy, you'll work on it more enthusiastically. 

RecipesWhile the best way to discover startup ideas is to become the sort
of person who has them and then build whatever interests you,
sometimes you don't have that luxury.  Sometimes you need an idea
now.  For example, if you're working on a startup and your initial
idea turns out to be bad.For the rest of this essay I'll talk about tricks for coming up
with startup ideas on demand.  Although empirically you're better
off using the organic strategy, you could succeed this way. You
just have to be more disciplined.  When you use the organic method,
you don't even notice an idea unless it's evidence that something
is truly missing.  But when you make a conscious effort to think
of startup ideas, you have to replace this natural constraint with
self-discipline.  You'll see a lot more ideas, most of them bad,
so you need to be able to filter them.One of the biggest dangers of not using the organic method is the
example of the organic method.  Organic ideas feel like inspirations.
There are a lot of stories about successful startups that began
when the founders had what seemed a crazy idea but "just knew" it
was promising.  When you feel that about an idea you've had while
trying to come up with startup ideas, you're probably mistaken.When searching for ideas, look in areas where you have some expertise.
If you're a database expert, don't build a chat app for teenagers
(unless you're also a teenager).  Maybe it's a good idea, but you
can't trust your judgment about that, so ignore it.  There have to
be other ideas that involve databases, and whose quality you can
judge.  Do you find it hard to come up with good ideas involving
databases?  That's because your expertise raises your standards.
Your ideas about chat apps are just as bad, but you're giving
yourself a Dunning-Kruger pass in that domain.The place to start looking for ideas is things you need.  There
must be things you need.
One good trick is to ask yourself whether in your previous job you
ever found yourself saying "Why doesn't someone make x?  If someone
made x we'd buy it in a second." If you can think of any x people
said that about, you probably have an idea.  You know there's demand,
and people don't say that about things that are impossible to build.More generally, try asking yourself whether there's something unusual
about you that makes your needs different from most other people's.
You're probably not the only one.  It's especially good if you're
different in a way people will increasingly be.If you're changing ideas, one unusual thing about you is the idea
you'd previously been working on.  Did you discover any needs while
working on it?  Several well-known startups began this way.  Hotmail
began as something its founders wrote to talk about their previous
startup idea while they were working at their day jobs. 
A particularly promising way to be unusual is to be young.  Some
of the most valuable new ideas take root first among people in their
teens and early twenties.  And while young founders are at a
disadvantage in some respects, they're the only ones who really
understand their peers.  It would have been very hard for someone
who wasn't a college student to start Facebook.  So if you're a
young founder (under 23 say), are there things you and your friends
would like to do that current technology won't let you?The next best thing to an unmet need of your own is an unmet need
of someone else.  Try talking to everyone you can about the gaps
they find in the world.  What's missing?  What would they like to
do that they can't?  What's tedious or annoying, particularly in
their work?  Let the conversation get general; don't be trying too
hard to find startup ideas.  You're just looking for something to
spark a thought.  Maybe you'll notice a problem they didn't consciously
realize they had, because you know how to solve it.When you find an unmet need that isn't your own, it may be somewhat
blurry at first.  The person who needs something may not know exactly
what they need.  In that case I often recommend that founders act
like consultants — that they do what they'd do if they'd been
retained to solve the problems of this one user.  People's problems
are similar enough that nearly all the code you write this way will
be reusable, and whatever isn't will be a small price to start out
certain that you've reached the bottom of the well.
One way to ensure you do a good job solving other people's problems
is to make them your own.  When Rajat Suri of E la Carte decided
to write software for restaurants, he got a job as a waiter to learn
how restaurants worked.  That may seem like taking things to extremes,
but startups are extreme.  We love it when founders do such things.In fact, one strategy I recommend to people who need a new idea is
not merely to turn off their schlep and unsexy filters, but to seek
out ideas that are unsexy or involve schleps.  Don't try to start
Twitter.  Those ideas are so rare that you can't find them by looking
for them.  Make something unsexy that people will pay you for.A good trick for bypassing the schlep and to some extent the unsexy
filter is to ask what you wish someone else would build, so that
you could use it.  What would you pay for right now?Since startups often garbage-collect broken companies and industries,
it can be a good trick to look for those that are dying, or deserve
to, and try to imagine what kind of company would profit from their
demise.  For example, journalism is in free fall at the moment.
But there may still be money to be made from something like journalism.
What sort of company might cause people in the future to say "this
replaced journalism" on some axis?But imagine asking that in the future, not now.  When one company
or industry replaces another, it usually comes in from the side.
So don't look for a replacement for x; look for something that
people will later say turned out to be a replacement for x.  And
be imaginative about the axis along which the replacement occurs.
Traditional journalism, for example, is a way for readers to get
information and to kill time, a way for writers to make money and
to get attention, and a vehicle for several different types of
advertising.  It could be replaced on any of these axes (it has
already started to be on most).When startups consume incumbents, they usually start by serving
some small but important market that the big players ignore.  It's
particularly good if there's an admixture of disdain in the big
players' attitude, because that often misleads them.  For example,
after Steve Wozniak built the computer that became the Apple I, he
felt obliged to give his then-employer Hewlett-Packard the option
to produce it.  Fortunately for him, they turned it down, and one
of the reasons they did was that it used a TV for a monitor, which
seemed intolerably déclassé to a high-end hardware company like HP
was at the time. 
Are there groups of 
scruffy 
but sophisticated users like the early
microcomputer "hobbyists" that are currently being ignored by the
big players?  A startup with its sights set on bigger things can
often capture a small market easily by expending an effort that
wouldn't be justified by that market alone.Similarly, since the most successful startups generally ride some
wave bigger than themselves, it could be a good trick to look for
waves and ask how one could benefit from them.  The prices of gene
sequencing and 3D printing are both experiencing Moore's Law-like
declines.  What new things will we be able to do in the new world
we'll have in a few years?  What are we unconsciously ruling out
as impossible that will soon be possible?
OrganicBut talking about looking explicitly for waves makes it clear that
such recipes are plan B for getting startup ideas.  Looking for
waves is essentially a way to simulate the organic method.  If
you're at the leading edge of some rapidly changing field, you don't
have to look for waves; you are the wave.Finding startup ideas is a subtle business, and that's why most
people who try fail so miserably.  It doesn't work well simply to
try to think of startup ideas.  If you do that, you get bad ones
that sound dangerously plausible.  The best approach is more indirect:
if you have the right sort of background, good startup ideas will
seem obvious to you.  But even then, not immediately.  It takes
time to come across situations where you notice something missing.
And often these gaps won't seem to be ideas for companies, just
things that would be interesting to build.  Which is why it's good
to have the time and the inclination to build things just because
they're interesting.Live in the future and build what seems interesting.  Strange as
it sounds, that's the real recipe.
Notes
This form of bad idea has been around as long as the web.  It
was common in the 1990s, except then people who had it used to say
they were going to create a portal for x instead of a social network
for x.  Structurally the idea is stone soup: you post a sign saying
"this is the place for people interested in x," and all those people
show up and you make money from them.  What lures founders into
this sort of idea are statistics about the millions of people who
might be interested in each type of x.  What they forget is that
any given person might have 20 affinities by this standard, and no
one is going to visit 20 different communities regularly.
I'm not saying, incidentally, that I know for sure a social
network for pet owners is a bad idea.  I know it's a bad idea the
way I know randomly generated DNA would not produce a viable organism.
The set of plausible sounding startup ideas is many times larger
than the set of good ones, and many of the good ones don't even
sound that plausible.  So if all you know about a startup idea is
that it sounds plausible, you have to assume it's bad.
More precisely, the users' need has to give them sufficient
activation energy to start using whatever you make, which can vary
a lot.  For example, the activation energy for enterprise software
sold through traditional channels is very high, so you'd have to
be a lot better to get users to switch.  Whereas the activation
energy required to switch to a new search engine is low.  Which in
turn is why search engines are so much better than enterprise
software.
This gets harder as you get older.  While the space of ideas
doesn't have dangerous local maxima, the space of careers does.
There are fairly high walls between most of the paths people take
through life, and the older you get, the higher the walls become.
It was also obvious to us that the web was going to be a big
deal.  Few non-programmers grasped that in 1995, but the programmers
had seen what GUIs had done for desktop computers.
Maybe it would work to have this second self keep a journal,
and each night to make a brief entry listing the gaps and anomalies
you'd noticed that day.  Not startup ideas, just the raw gaps and
anomalies.
Sam Altman points out that taking time to come up with an
idea is not merely a better strategy in an absolute sense, but also
like an undervalued stock in that so few founders do it.There's comparatively little competition for the best ideas, because
few founders are willing to put in the time required to notice them.
Whereas there is a great deal of competition for mediocre ideas,
because when people make up startup ideas, they tend to make up the
same ones.
For the computer hardware and software companies, summer jobs
are the first phase of the recruiting funnel.  But if you're good
you can skip the first phase.  If you're good you'll have no trouble
getting hired by these companies when you graduate, regardless of
how you spent your summers.
The empirical evidence suggests that if colleges want to help
their students start startups, the best thing they can do is leave
them alone in the right way.
I'm speaking here of IT startups; in biotech things are different.
This is an instance of a more general rule: focus on users,
not competitors.  The most important information about competitors
is what you learn via users anyway.
In practice most successful startups have elements of both.
And you can describe each strategy in terms of the other by adjusting
the boundaries of what you call the market.  But it's useful to
consider these two ideas separately.
I almost hesitate to raise that point though.  Startups are
businesses; the point of a business is to make money; and with that
additional constraint, you can't expect you'll be able to spend all
your time working on what interests you most.
The need has to be a strong one.  You can retroactively
describe any made-up idea as something you need.  But do you really
need that recipe site or local event aggregator as much as Drew
Houston needed Dropbox, or Brian Chesky and Joe Gebbia needed Airbnb?Quite often at YC I find myself asking founders "Would you use this
thing yourself, if you hadn't written it?" and you'd be surprised
how often the answer is no.
Paul Buchheit points out that trying to sell something bad
can be a source of better ideas:"The best technique I've found for dealing with YC companies that
have bad ideas is to tell them to go sell the product ASAP (before
wasting time building it). Not only do they learn that nobody
wants what they are building, they very often come back with a
real idea that they discovered in the process of trying to sell
the bad idea."
Here's a recipe that might produce the next Facebook, if
you're college students.  If you have a connection to one of the
more powerful sororities at your school, approach the queen bees
thereof and offer to be their personal IT consultants, building
anything they could imagine needing in their social lives that
didn't already exist.  Anything that got built this way would be
very promising, because such users are not just the most demanding
but also the perfect point to spread from.I have no idea whether this would work.
And the reason it used a TV for a monitor is that Steve Wozniak
started out by solving his own problems.  He, like most of his
peers, couldn't afford a monitor.Thanks to Sam Altman, Mike Arrington, Paul Buchheit, John Collison,
Patrick Collison, Garry Tan, and Harj Taggar for reading drafts of
this, and Marc Andreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan,
Mike Moritz and Kevin Systrom for answering my questions about
startup history.

Want to start a startup?  Get funded by
Y Combinator.

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

Japanese Translation

Italian Translation

Spanish Translation
<|endoftext|>

<|startoftext|>
Want to start a startup?  Get funded by
Y Combinator.

May 2004
(This essay was originally published in Hackers 
& Painters.)
If you wanted to get rich, how would you do it? I think your best
bet would be to start or join a startup.  That's been a 
reliable way to get rich for hundreds of years.  The word "startup" 
dates from the 1960s, but what happens in one is 
very similar to the venture-backed trading voyages of the
Middle Ages.Startups usually involve technology, so much so that the phrase
"high-tech startup" is almost redundant.  A startup is a small
company that takes on a hard technical problem.Lots of people get rich knowing nothing more than that.
You don't have to know physics to be a good pitcher.  But
I think it could give you an edge to understand the underlying principles.
Why do startups have to be small?  
Will a startup inevitably stop being a startup as it
grows larger?  
And why do they so often work on
developing new technology?   Why are there so many startups
selling new drugs or computer software, and none selling corn oil
or laundry detergent?The PropositionEconomically, you can think of a startup as a way to 
compress your whole working life into a few years.  Instead
of working at a low intensity for forty years, you work as
hard as you possibly can for four.  This pays especially well
in technology, where you earn a premium for working fast.Here is a brief sketch of the economic proposition.  If you're
a good hacker in your mid twenties, you can
get a job paying about $80,000 per year.  So on average 
such a hacker must be
able to do at least $80,000 worth of work per year for the 
company just to break even.  You could probably
work twice as many hours as a corporate employee, and if
you focus you can probably get three times as much done in
an hour. 

You should get another multiple of two, at
least, by eliminating the drag 
of the pointy-haired middle
manager who would be your boss in a big company.
Then there is one more multiple: how much smarter are you
than your job description expects you to be?
Suppose another multiple of three.  Combine all these multipliers, and I'm
claiming you could be 36 times more 
productive than you're expected to be in a random corporate
job. 

  If a fairly good hacker is worth $80,000 a year at a 
big company, then a smart
hacker working very hard without any corporate
bullshit to slow him down should be able to do work worth about
$3 million a year.Like all back-of-the-envelope calculations, this one
has a lot of wiggle room.  I wouldn't try to
defend the actual numbers.  But I stand by the 
structure of the calculation.  I'm not claiming
the multiplier is precisely 36, but it is certainly more
than 10, and probably rarely as high as 100.If $3 million a year seems
high, remember that we're talking about the limit case:
the case where you not only have zero leisure time
but indeed work so hard that you endanger your health.Startups are not magic.  They don't change the laws of
wealth creation.  They just represent a point at the far end of the curve.
There is a conservation law at work here: if
you want to make a million dollars, you have to endure a 
million dollars' worth of pain.  
For example, one way to
make a million dollars would be to work for the 
Post Office your whole life, and save every penny of your 
salary.  Imagine the stress of working for the Post 
Office for fifty years.   In a startup you compress all
this stress into three or four years.  You do tend to get a 
certain 
bulk discount if you buy the economy-size pain,
but you can't evade the fundamental conservation law.
If starting a startup were easy, everyone would do it.Millions, not BillionsIf $3 million a year seems high to some people, it will seem
low to others.  Three million? 
How do I get to be a billionaire, like Bill Gates?So let's get Bill Gates out of the way right now.  It's not
a good idea to use famous rich people 
as examples, because the press only 
write about the very richest, and these tend to be outliers.
Bill Gates is a smart, determined, and hardworking man,
but you need more than
that to make as much money as he has.  You also need to be
very lucky.There is a large random
factor in the success of any company.  So the guys you end 
up reading about in the papers are the ones who are very 
smart, totally dedicated, and win the lottery.
Certainly Bill is smart and dedicated, but Microsoft also 
happens to have been the beneficiary of one of the most spectacular
blunders in the history of business: the licensing deal for
DOS.  No doubt Bill did 
everything he could to steer IBM into making that blunder, 
and he has done an excellent job of exploiting it, but if
there had been one person with a brain on IBM's side,
Microsoft's future would have been very different.
Microsoft at that stage had little leverage over IBM.
They were effectively a component supplier.  If IBM had 
required an exclusive license, as they should have, Microsoft
would still have signed the deal.  It would still have
meant a lot of money for them,  and IBM
could easily have gotten an operating system elsewhere.Instead IBM ended up using all its power in the market
to give Microsoft control of the PC standard.  From 
that point, all Microsoft had to do was execute.  They
never had to bet the company on a bold decision.  All they
had to do was play hardball with licensees and copy more
innovative products reasonably promptly.If IBM hadn't made this mistake, Microsoft would
still have been a successful company, but it
could not have grown so big so fast. 
Bill Gates would be rich, but he'd be somewhere
near the bottom of the Forbes 400 with the other guys his age.There are a lot of ways to get
rich, and this essay is about only one of them.  This
essay is about how to make money by creating wealth and
getting paid for it.  There are plenty of other ways to 
get money, including chance, speculation, marriage, inheritance, 
theft, extortion, fraud, monopoly,
graft, lobbying,
counterfeiting, and prospecting.  Most of the greatest fortunes
have probably involved several of these.The advantage of creating wealth, as a way to get rich,
is not just that it's more legitimate 
(many of the other methods are now illegal) 
but that it's more
straightforward.  You just have to do something people want.Money Is Not WealthIf you want to create wealth, it will help to understand what it is.  
Wealth is not the same thing as money. 

  Wealth is as old as
human history.  Far older, in fact; ants have wealth. 
Money is a comparatively recent invention.Wealth is the fundamental thing.  Wealth is stuff we want: food, 
clothes, houses, cars, gadgets, travel to interesting places,
and so on.  You can have wealth without
having money.  If you had a magic machine that
could on command make you a car or cook you dinner or do your
laundry, or do anything else you wanted, you wouldn't need money.
Whereas if you were in the middle of Antarctica, where there is
nothing to buy, it wouldn't matter how much money you had.Wealth is what you want, not money.  But if wealth is the important
thing, why does everyone talk about making money?   It is
a kind of shorthand: money is a way of moving wealth, and in practice
they are usually interchangeable.  But they are not the same thing,
and unless you plan to get rich by counterfeiting, talking about
making money can make it harder to understand how to 
make money.Money is a side effect of specialization.
In a specialized society, most of the
things you need, you can't make for yourself.  If you want a potato
or a pencil or a place to live, you have to get it from someone
else.How do you get the person who grows the potatoes to give you some?
By giving him something he wants in return.  But you can't get
very far by trading things directly with the people who
need them.  If you make violins, and none of the local
farmers wants one, how will you eat?The solution societies find, as they get more specialized, is to
make the trade into a two-step process.  Instead of trading violins
directly for potatoes, you trade violins for, say, silver, 
which you can then trade again for anything else you need.  The
intermediate stuff-- the medium of exchange-- can be anything that's
rare and portable.  Historically metals have been the most common,
but recently we've been using a medium of exchange, called the dollar,
that doesn't physically exist.  It works as a medium of exchange,
however, because its rarity 
is guaranteed by the U.S. Government.The advantage of a medium of exchange is that it makes trade work.
The disadvantage is that it tends to obscure what trade really
means.  People think that what a business does is make money.
But money is just the intermediate stage-- just
a shorthand-- for whatever people want.
What most businesses really do is make  
wealth.  They do something people want. 
The Pie FallacyA surprising number of people retain from childhood the idea
that there is a fixed amount of wealth in the world. 
There is, in any normal family, a fixed amount of money at 
any moment.  But that's not the same thing.When wealth is talked about in this context, it is often
described as a pie.  "You can't make the pie larger,"
say politicians.
When you're
talking about the amount of money in one family's bank
account, or the amount available to a government from one
year's tax revenue, this is true.  
If one person gets more, someone else has to get less.I can remember believing, as a child, that if a few
rich people had all the money, it left less for everyone else.
Many people seem to continue to believe something like this
well into adulthood.  This fallacy is usually there in the 
background when you hear someone talking about how x percent
of the population have y percent of the wealth.  If you plan
to start a startup, then whether you realize it or not, you're
planning to disprove the Pie Fallacy.What leads people astray here is the abstraction of
money.  Money is not wealth.  It's
just something we use to move wealth around.
So although there may be, in certain specific moments (like
your family, this month) a fixed amount of money available to
trade with other people for things you want,
there is not a fixed amount of wealth in the world.  
You can make more wealth.  Wealth has been getting created and
destroyed (but on balance, created) for all of human history.Suppose you own a beat-up old car. 
Instead of sitting on your butt next
summer, you could spend the time restoring your car to pristine condition.
In doing so you create wealth.  The world is-- and
you specifically are-- one pristine old car the richer.  And not
just in some metaphorical way.  If you sell your car,
you'll get more for it.In restoring your old car you have made yourself
richer.  You haven't made anyone else poorer.  So there is
obviously not a fixed pie.  And in fact, when you look at 
it this way, you wonder why anyone would think there was. 
Kids know, without knowing they know, that they can create
wealth.  If you need to give someone a present and don't
have any money, you make one.  But kids are so bad at making
things that they consider home-made presents to be a distinct,
inferior, sort of thing to store-bought ones-- a mere expression
of the proverbial thought that counts. 
And indeed, the lumpy ashtrays
we made for our parents did not have much of a resale market.CraftsmenThe people most likely to grasp that wealth can be
created are the ones who are good at making things, the craftsmen.
Their hand-made objects become store-bought ones. 
But with the rise of industrialization there are fewer and
fewer craftsmen.  One of the biggest remaining groups  is
computer programmers.A programmer can sit down in front of a computer and
create wealth.  A good piece of software is, in itself, 
a valuable thing.
There is no manufacturing to confuse the issue.  Those
characters you type 
are a complete, finished product.
If someone sat down and wrote a web
browser that didn't suck (a fine idea, by the way), the world
would be that much richer.
[5b]Everyone in a company works together to create
wealth, in the sense of making more things people want.
Many of the employees (e.g. the people in the mailroom or
the personnel department) work at one remove from the 
actual making of stuff.  Not the programmers.  They
literally think the product, one line at a time.
And so it's clearer to programmers that wealth is something
that's made, rather than being distributed, like slices of a
pie, by some imaginary Daddy.It's also obvious to programmers that there are huge variations
in the rate at which wealth is created.  At Viaweb we had one
programmer who was a sort of monster of productivity.  
I remember watching what he did one long day and estimating that
he had added several hundred thousand dollars
to the market value of the company. 
A great programmer, on a roll, could 
create a million dollars worth of wealth in a couple weeks.
A mediocre programmer over the same period will generate zero or
even negative wealth (e.g. by introducing bugs).This is
why so many of the best programmers are libertarians.
In our world, you sink or swim, and there are no excuses.
When those far removed from the creation of wealth-- undergraduates,
reporters, politicians-- hear
that the richest 5% of the people have 
half the total wealth, they tend to think injustice!
An experienced programmer would be more likely to think
is that all?  The top 5% of programmers
probably write 99% of the good software.Wealth can be created without being sold.  Scientists, till
recently at least, effectively donated the wealth they 
created.  We are all richer for knowing about penicillin,
because we're less likely to die from infections.  Wealth
is whatever people want, and not dying is certainly something
we want.  Hackers often donate their work by 
writing open source software that anyone can use for free.
I am much the richer for the operating system
FreeBSD, which I'm running on the computer I'm using now,
and so is Yahoo, which runs it on all their servers.What a Job IsIn industrialized countries, people belong to one institution or
another at least until their twenties.  After all those years you get
used to the idea of belonging to a group of people who all get up
in the morning, go to some set of buildings, and do things that they
do not, ordinarily, enjoy doing.  Belonging to such a group becomes
part of your identity: name, age, role, institution.
If you have to introduce yourself, or
someone else describes you, it will be as something like, John
Smith, age 10, a student at such and such elementary school, or
John Smith, age 20, a student at such and such college.When John Smith finishes school he is expected to get a job.  And
what getting a job seems to mean is joining another institution.
Superficially it's a lot like college.  You pick the companies you
want to work for and apply to join them.  If one likes you, you
become a member of this new group.  You get up in the morning and
go to a new set of buildings, and do things that you do not, ordinarily,
enjoy doing.  There are a few differences: life is not as much fun,
and you get paid, instead of paying, as you did in college.  But
the similarities feel greater than the differences.  John Smith is
now John Smith, 22, a software developer at such and such corporation.In fact John Smith's
life has changed more than he realizes.  Socially, a company
looks much like college, but the deeper you go into the
underlying reality, the more different it gets.What a company does, and has to do if it wants to continue to
exist, is earn money.  And the way most companies make money
is by creating wealth.  Companies can be so specialized that this
similarity is concealed, but it is not only manufacturing 
companies that create wealth.  A big component of wealth is
location. 
Remember that magic machine that could
make you cars and cook you dinner and so on?  It would not be
so useful if it delivered your dinner to a random location
in central Asia.  
If wealth means what people want, companies that move
things also create wealth.  Ditto for
many other kinds of companies that don't make anything
physical.  Nearly all companies exist to do something people
want.And that's what you do, as well, when you go to work for a company.
But here there is another layer that tends to obscure the underlying
reality.  In a company, the work you do is averaged together with
a lot of other people's.  
You may not even be aware you're doing something people
want.  Your contribution may be indirect.  But the company as a
whole must be giving people something they want, or they won't make
any money.  And if they are paying you x dollars a year, then on
average you must be contributing at least x dollars a year worth
of work, or the company will be spending more than it makes,
and will go out of business.Someone graduating from college thinks, and is told, that he needs
to get a job, as if the important thing were becoming a member of 
an institution.  A more direct way to put it would be: you need to
start doing something people want.  You don't
need to
join a company to do that.  All a company is is a group of people
working together to do something people want.  It's doing something people
want that matters, not joining the group. 
For most people the   
best plan probably is to go to work for some existing
company.  But it is a good idea to understand what's happening   
when you do this.  A job means doing something people want,
averaged together with everyone else in that company.Working HarderThat averaging gets to be a problem.
I think the single biggest problem afflicting large companies is the   
difficulty of assigning a value to each person's work. 
For the most part they punt.  In a
big company you get paid a fairly predictable salary for working 
fairly hard.  You're expected not to be obviously incompetent or
lazy, but you're not expected to devote your whole life to your
work.It turns out, though, that there are economies of scale in how much of your
life you devote to your work.  In the right kind of business,  
someone who really devoted himself to work could generate ten or
even a hundred times as much wealth as an average
employee.  A programmer, for example, instead of chugging along
maintaining and updating an existing piece of software, could write
a whole new piece of software, and with it create a new source of
revenue.Companies are not set up to reward people who want to do this. 
You can't go to your boss and say, I'd like to start working ten
times as hard, so will you please pay me ten times as much? For
one thing, the official fiction is that you are already working as
hard as you can.  But a more serious problem is that the company
has no way of measuring the value of your work.Salesmen are an exception.  It's easy 
to measure how much revenue they generate, and they're
usually paid a percentage of it.  If a salesman wants to work harder,
he can just start doing it, and he will automatically
get paid proportionally more.There is one other job besides sales where big companies can
hire first-rate people: in the top management jobs. 
And for the same reason: their performance can
be measured.  The top managers are
held responsible for the performance of the entire company.
Because an ordinary employee's performance can't usually
be measured, he is not expected to do
more than put in a solid effort.  Whereas top management, like
salespeople, have to actually come up with the numbers.
The CEO of a company that tanks cannot plead that he put in  
a solid effort.  If the company does badly, he's done badly.A company that could pay all its employees so straightforwardly   
would be enormously successful.  Many employees would work harder
if they could get paid for it.  More importantly,
such a company would attract people who wanted to work
especially hard. 
It would crush its competitors.Unfortunately, companies can't pay everyone like salesmen.  Salesmen
work alone.  Most employees' work is tangled together.  Suppose
a company makes some kind of consumer gadget.  The 
engineers build a reliable gadget with all kinds of new features;
the industrial designers design a beautiful case for it; and then
the marketing people convince everyone that
it's something they've got to have.  How do you know how much of the
gadget's sales are due to each group's efforts?  Or, for that
matter, how much is due to the creators of past gadgets that gave
the company a reputation for quality?  There's no way to  
untangle all their contributions.  Even if you could read the minds
of the consumers, you'd find these factors were all blurred together.If you want to go faster, it's a problem to have your work
tangled together with a large number of other people's.  In a  
large group, your performance is not separately measurable-- and 
the rest of the group slows you down.Measurement and LeverageTo get rich you need to get yourself in a situation with two
things, measurement and leverage.  You need to be in a
position where your performance can be measured, or there is
no way to get paid more by doing more.  And you have to
have leverage, in the sense that the decisions you make have   
a big effect.Measurement alone is not enough.  An example of a job with
measurement but not leverage is doing piecework in a
sweatshop.  Your performance is measured and you get paid  
accordingly, but you have no scope for decisions.  The only
decision you get to make is how fast you work, and that
can probably only increase your earnings by a factor
of two or three.An example of a job with both measurement and leverage would
be lead actor in a movie.  Your performance can be measured in the
gross of the movie.  And you have leverage in the sense that your
performance can make or break it.CEOs also have both measurement and leverage.  They're measured,
in that the performance of the company is their performance.
And they have leverage in that their decisions
set the whole company moving in one direction or another.I think everyone who gets rich by their own efforts will be
found to be in a situation with measurement and leverage.    
Everyone I can think of does: CEOs, movie stars, 
hedge fund managers, professional athletes.  A good hint to the
presence of leverage is the possibility of failure.
Upside must be balanced by downside, so if there is 
big potential for gain there must also be a terrifying
possibility of loss.  CEOs, stars, fund managers, and athletes
all live with the sword hanging over their heads;
the moment they start to suck, they're out.  If you're in
a job that feels safe, you are not going to get rich,
because if there is no danger there is almost certainly no leverage.But you don't have to become a CEO or a movie star to
be in a situation with measurement and leverage.  All you        
need to do is be part of a small group working on a
hard problem.Smallness = MeasurementIf you can't measure the value of the work done by individual  
employees, you can get close.  You can measure the value
of the work done by small groups.One level at which you can accurately measure the revenue
generated by employees is at the level of the whole company.   
When the company is small, you are thereby fairly close to 
measuring the contributions of individual employees.  A viable
startup might only have ten employees, which puts you within a
factor of ten of measuring individual effort.Starting or joining a startup is thus as close as most
people can get to saying to one's boss, I want to work ten times
as hard, so please pay me ten times as much.  There are two
differences: you're not saying it to your boss, but directly to the
customers (for whom your boss is only a proxy after all), and
you're not doing it individually, but along with a small group
of other ambitious people.It will, ordinarily, be a group.  Except in a few unusual kinds
of work, like acting or writing books, you can't be a company 
of one person.  
And the people you work with had better be good, because it's their work that
yours is going to be averaged with.A big company is like a giant galley driven by a thousand rowers.
Two things keep the speed of the
galley down.  One is that individual rowers don't see any
result from working harder. 
The other is that, in a group of a
thousand people, the average rower is likely  to be
pretty average.If you took ten people at random out of the big galley and
put them in a boat by themselves, they could probably go  
faster.  They would have both carrot and stick to motivate   
them.  An energetic rower would be encouraged by the thought
that he could have a visible effect on the speed of
the boat.  And if someone was lazy, the others would be more likely
to notice and complain.But the real advantage of the ten-man boat shows when 
you take the ten best rowers out of the big galley
and put them in a boat together.  They will have all
the extra motivation that comes from being in a small group.
But more importantly, by selecting that small a group
you can get the best rowers.  Each one will be in
the top 1%.  It's a much better deal for them to average  
their work together with a small group of their peers than to    
average it with everyone.That's the real point of startups.  Ideally, you are getting
together with a group of other people who also want to work
a lot harder, and get paid a lot more, than they would in
a big company.  And because startups tend to get founded 
by self-selecting groups of ambitious people who already 
know one another (at least by reputation), the level of 
measurement is more precise than you get from smallness alone.
A startup is not merely ten people, but ten people like you.Steve Jobs once said that the success or failure of a startup
depends on the first ten employees.  I agree. If 
anything, it's more like the first five.
Being small is not, in itself, what makes startups kick butt,   
but rather that small groups can be select.
You don't want small in the sense of a
village, but small in the sense of an all-star team.The larger a group, the closer its average member will be to the average
for the population as a whole.   So all other things being
equal, a very able person in a big company is probably
getting a bad deal, because his performance is dragged down by
the overall lower performance of the others.  Of course,
all other things often are not equal: the able person may 
not care about money, or may prefer the stability of a large
company.  But a very able person who does care about money
will ordinarily do better to go off and work with a small
group of peers.Technology = LeverageStartups offer anyone a way to be in a situation with
measurement and leverage.
They allow measurement because they're small,
and they offer leverage because they
make money by inventing new technology.What is technology?  It's technique. It's the way  
we all do things.  And when
you discover a new way to do things, its value is multiplied
by all the people who use it.  It is the proverbial fishing
rod, rather than the fish.  That's the difference between a
startup and a restaurant or a barber shop.  You fry eggs or cut 
hair one customer at a time.  Whereas if 
you solve a technical problem that a lot of people care about,
you help everyone who uses your solution.  
That's leverage.If you look at history, it seems that most people
who got rich by creating wealth did it by developing
new technology.  You just can't fry eggs or cut hair fast enough.
What made the Florentines rich in 1200 
was the discovery of new techniques for making the high-tech 
product of the time, fine woven cloth.  What made the
Dutch rich in 1600 was the discovery of shipbuilding and
navigation techniques that enabled them to dominate the seas
of the Far East.Fortunately there is a natural fit between smallness and
solving hard problems.  The leading edge of technology moves
fast.  Technology that's valuable today could be worthless
in a couple years.  Small companies are more at home in this
world, because they don't have layers of bureaucracy to
slow them down.
Also, technical advances tend to come from unorthodox approaches,
and small companies are less constrained by convention.Big companies can develop technology.  They just can't do it
quickly.  Their size makes them slow and prevents
them from rewarding employees for the extraordinary
effort required.  So in practice big companies only get to develop 
technology in fields where large capital requirements prevent startups from
competing with them, like microprocessors, power plants, 
or passenger aircraft.  And even in those fields they depend heavily
on startups for components and ideas.It's obvious that biotech or software startups exist to solve
hard technical problems, but 
I think it will also be found to be true 
in businesses that don't seem to be about technology.  McDonald's,
for example, grew big by designing a system, the McDonald's 
franchise, that could then be reproduced at will all over the 
face of the earth.  A McDonald's franchise is controlled by rules
so precise that it is practically
a piece of software.  Write once, run everywhere.
Ditto for Wal-Mart.  Sam Walton got rich not by being a 
retailer, but by designing a new kind of store.Use difficulty as a guide not just in selecting the overall
aim of your company, but also at decision points along the way.
At Viaweb one of our rules of thumb was run upstairs.
Suppose you are a little, nimble guy being chased by a big,
fat, bully.  You open a door and find yourself in a    
staircase.  Do you go up or down?  I say up.  The
bully can probably run downstairs as fast as you can.
Going upstairs his bulk will be more of a disadvantage.
Running upstairs is hard for you but even harder for him.What this meant in practice was that we deliberately sought      
hard problems.  If there were two features we could add to our
software, both equally valuable in proportion to their difficulty,
we'd always take the harder one.  Not just because it was 
more valuable, but because it was harder.
We delighted in forcing bigger, slower competitors
to follow us over difficult ground.
Like guerillas, startups prefer the difficult terrain of the
mountains, where the troops of the central government
can't follow.  I can remember times when we were just
exhausted after wrestling all day with some horrible technical
problem.  And I'd be delighted, because something that was 
hard for us would be impossible for our competitors.This is not just a good way to run a startup.  It's what
a startup is.
Venture capitalists know about this and have a phrase for it:
barriers to entry.  If you go to a VC with a new 
idea and ask him to invest in it, one of the first things
he'll ask is, how hard would this be for someone else to  
develop?  That is, how much difficult ground
have you put between yourself and potential pursuers? 

And you had better have a convincing explanation of why 
your technology would be hard to duplicate.  Otherwise as
soon as some big company becomes aware of it, they'll make
their own, and with their brand name, capital, and
distribution clout, they'll take away your market overnight.
You'd be like guerillas caught in the open field by regular
army forces.One way to put up barriers to entry is through patents. 
But patents may not provide much protection. 
Competitors commonly find ways to work around a patent.
And if they can't, they 
may simply violate it and invite you to sue them.
A big company is not afraid to be sued; it's an everyday thing
for them.  They'll make sure that suing them is expensive and
takes a long time.
Ever heard of Philo Farnsworth?  He invented
television.  The reason you've never
heard of him is that his company was not the one to make
money from it. 

The company that did was RCA, and
Farnsworth's reward for his efforts was a decade of
patent litigation.Here, as so often, the best defense is a good offense.  If
you can develop technology that's simply too hard for
competitors to duplicate, you don't need to rely on other
defenses.  Start by picking a hard problem, and
then at every decision point, take the harder choice. 
The Catch(es)If it were simply a matter of working harder than 
an ordinary employee and getting paid proportionately, it would
obviously be a good deal to start a startup.  Up to a point it
would be more fun. I don't think many people 
like the slow pace of big companies, the interminable meetings,
the water-cooler conversations, the clueless middle managers,
and so on.Unfortunately there are a couple catches.  One is that you
can't choose the point on the curve that you want to inhabit.
You can't decide, for example, that you'd like to work just
two or three times as hard, and get paid that much more.  When
you're running a startup, your competitors decide how
hard you work.  And they pretty much all make the same decision:
as hard as you possibly can.The other catch is that the payoff is only on average proportionate
to your productivity.  There is, as I said before, a large
random multiplier in the success of any company.  So in
practice the deal is not that you're 30 times as productive and get 
paid 30 times as much.  It is that you're 30 times as productive,
and get paid between zero and a thousand times as much.
If the mean is 30x, the median is probably zero.
Most startups tank, and not just the dogfood 
portals we all heard about during
the Internet Bubble.  It's common for a startup
to be developing a genuinely good product, take slightly
too long to do it, run out of money, and have to shut down.A startup is like a mosquito.  A bear can absorb a hit and a crab
is armored against one, but a mosquito is designed for one thing:
to score.  No energy is wasted on defense.  The defense of mosquitos, 
as a species, is that there are a lot of them, but this is little 
consolation to the individual mosquito.Startups, like mosquitos, tend to be an all-or-nothing proposition.
And you don't generally know which of the two you're going to
get till the last minute. 
Viaweb came close to tanking several times. Our trajectory
was like a sine wave.  Fortunately we got bought at
the top of the cycle, but it was damned close.   While we were
visiting Yahoo in California to talk about selling the company
to them, we had to borrow a conference room to reassure
an investor who was about to back out of a new round of funding 
that we needed to stay alive.The all-or-nothing aspect of startups was not something we wanted.
Viaweb's hackers were all extremely risk-averse.
If there had been some way just to work super hard and get
paid for it, without having a lottery mixed in, we would have
been delighted.  We would have much preferred a 100% chance of
$1 million to a 20% chance of $10 million, even though 
theoretically the second is worth twice as much.   Unfortunately,
there is not currently any space in the business world where
you can get the first deal.The closest you can get is by
selling your startup in the early stages, giving up upside  
(and risk) for a smaller but guaranteed payoff.  We had a 
chance to do this, and stupidly, as we then thought, let it slip by.
After that we became comically eager to sell.
For the next year or so,
if anyone expressed the slightest curiosity about Viaweb
we would try to sell them the company.  But there were no takers,
so we had to keep going.It would have been a bargain to 
buy us at an early stage, but companies doing acquisitions are not
looking for bargains.  A company big enough to acquire 
startups will be big enough to be fairly conservative, and 
within the company the people in charge of acquisitions will
be among the more conservative, because they are likely to be
business school types who joined the company late.  
They would rather overpay for a safe choice.  So
it is easier to sell an established startup, even at a large
premium, than an early-stage one.Get UsersI think it's a good idea to get bought, if you can.  Running a
business is different from growing one.
It is just as well to let a big company take over once you reach 
cruising altitude.  It's
also financially wiser, because selling allows you to diversify.
What would you think of a financial advisor who put all his
client's assets into one volatile stock?How do you get bought?  Mostly by doing the same things 
you'd do if you didn't intend to sell the company.  Being 
profitable, for example.   But getting bought is also an art
in its own right, and one that we spent a lot of time trying
to master.Potential buyers will
always delay if they can.  The hard part about getting
bought is getting them to act.  For most people, the most powerful motivator
is not the hope of gain, but the fear of loss.  For potential
acquirers, the most powerful motivator is the prospect that 
one of their competitors will buy you.  This, as we found, 
causes CEOs to take red-eyes.  
The second biggest is the worry that, if they don't buy you 
now, you'll continue to grow rapidly and will cost more to
acquire later, or even become a competitor.In both cases, what it all comes down to is users.  
You'd think that a company about to buy you would do a lot of
research and decide for themselves how valuable your technology
was.  Not at all.  What they go by is the number of users you
have.In effect, acquirers assume the customers know who has the
best technology.  And this is not as stupid as it sounds.  Users 
are the only real proof that you've created wealth.  Wealth is 
what people want, and if people aren't using your software,
maybe it's not just because you're bad at marketing.  Maybe it's
because you haven't made what they want.Venture capitalists have a list of danger signs to watch out for.
Near the top is the company run by techno-weenies who are 
obsessed with solving interesting technical problems, instead
of making users happy.  In a startup, you're not just trying to
solve problems.  You're trying to solve problems that 
users care about.So I think you should make users the test, just as 
acquirers do.  Treat a startup as an optimization problem 
in which performance is measured by number of users.  As anyone
who has tried to optimize software knows, the key is measurement.
When you try to guess where your program is slow, and what would
make it faster, you almost always guess wrong.Number of users may not be the perfect test, but it will 
be very close.  It's what acquirers care about.  It's what 
revenues depend on.  
It's what makes competitors unhappy.
It's what impresses reporters, and potential
new users.  Certainly it's a better test than your a priori
notions of what problems are important to solve, no matter how
technically adept you are.Among other things, treating a startup as an optimization
problem will help you avoid another
pitfall that VCs worry about, and rightly-- taking a long time
to develop a product.  Now we can recognize this as something
hackers already know to avoid: premature optimization.  Get a version 
1.0 out there as soon as you can.  Until you have some users to
measure, you're optimizing based on guesses.The ball you need to keep your eye on here is the underlying
principle that wealth is what people want.  If you plan to get 
rich by creating wealth, you have to know what people want.  
So few businesses really pay attention to making customers happy.
How often do you walk into a store, or call a company on the
phone, with a feeling of dread in the back of your mind?
When you hear "your call is important to us, please stay on
the line," do you think, oh good, now everything will be all right?A restaurant can afford to serve the occasional burnt dinner.
But in technology, you cook one thing and that's what everyone
eats.  So any difference between what people want and what
you deliver is multiplied.  
You please or annoy
customers wholesale.  The closer you can get to what they want,
the more wealth you generate.Wealth and PowerMaking wealth is not the only way to get rich.  For most of
human history it has not even been the most common.  Until
a few centuries ago,
the main sources of wealth were mines, slaves and serfs,
land, and cattle,
and the only ways to acquire these rapidly were by inheritance,
marriage, conquest, or confiscation.  
Naturally wealth had a bad reputation.Two things changed.  The first was the rule of law.  For most of the world's
history, if you did somehow accumulate a fortune, the ruler or his 
henchmen 
would find a way to steal it.
But in medieval Europe something new happened.
A new class of merchants and manufacturers
began to collect in towns. 

Together they were able to withstand the local feudal
lord.  So 
for the first time in our history, the bullies stopped stealing the
nerds' lunch money.
This was naturally a great incentive,
and possibly indeed the main cause of the second big change,
industrialization.A great deal has been written about the causes of the Industrial 
Revolution.  But surely a necessary, if not sufficient, condition
was that people who made fortunes be able to enjoy them in peace.

One piece of evidence is what happened to countries
that tried to return to the old model, like the Soviet
Union, and to a lesser extent Britain under the labor
governments of the 1960s and early 1970s.  Take away the incentive
of wealth, and technical innovation grinds to a halt.Remember what a startup is, economically: 
a way of saying, I want to work faster.  Instead of accumulating
money slowly by being paid a regular wage for fifty years, I 
want to get it over with as soon as possible.  So governments
that forbid you to accumulate wealth are in effect decreeing
that you work slowly.  They're willing to let you earn $3 million over
fifty years, but they're not willing to let you work so hard that
you can do it in two.  They are like
the corporate boss that you can't go to and say, I want to work
ten times as hard, so please pay me ten times a much.
Except this is not a boss you can escape by starting your own
company.The problem with working slowly is not just that technical
innovation happens slowly.  It's that it tends not to happen at all.
It's only when you're deliberately looking for hard problems,
as a way to use speed to the greatest advantage, that you take
on this kind of project.  Developing new technology is a 
pain in the ass. It is, as Edison said, one percent 
inspiration and ninety-nine percent perspiration.  
Without the incentive of wealth, no one wants to do it.
Engineers will work on sexy projects like fighter planes and moon
rockets for ordinary salaries, but more mundane technologies
like light bulbs or semiconductors have to be developed by entrepreneurs.Startups
are not just something that happened in Silicon Valley in 
the last couple decades.  Since it became possible to
get rich by creating wealth, everyone who has done it has
used essentially the same recipe: measurement and leverage,
where measurement comes from working with a small
group, and leverage from developing new techniques.
The recipe was the same in Florence in 1200 as it is 
in Santa Clara today.Understanding this may help to answer an important question:
why Europe grew so powerful.
Was it something about the geography of 
Europe?  Was it that Europeans are somehow racially superior?
Was it their religion?  The answer (or at least
the proximate cause) may be that the
Europeans 
rode on the crest of a powerful new idea: allowing those who
made a lot of money to keep it.Once you're allowed to do that, 
people who want to get rich can do it by generating
wealth instead of stealing it.
The resulting technological growth translates not only 
into wealth but into military power.  The theory that led to
the stealth plane was developed by a Soviet mathematician.
But because the Soviet Union didn't have a computer industry,
it remained for them a theory;
they didn't have hardware capable of executing the calculations
fast enough to design an actual airplane.In that respect the Cold War teaches the same lesson as
World War II and, for that matter, most wars in recent history.
Don't let a ruling
class of warriors and politicians squash the entrepreneurs.
The same recipe that makes individuals rich
makes countries powerful.  Let the nerds keep their lunch
money, and you rule the world.Notes
One valuable thing you tend to get only in startups is
uninterruptability.  Different kinds of
work have different time quanta.  Someone proofreading a
manuscript
could probably be interrupted every fifteen minutes
with little loss of productivity.  But the time quantum for
hacking is very long: it might take an hour just to load
a problem into your head.  So the
cost of having someone from personnel
call you about a form you forgot to fill out can be huge.This is why hackers give you such a baleful stare as they
turn from their screen to answer your question.  Inside
their heads a giant house of cards is tottering.The mere possibility of being interrupted deters hackers
from starting hard projects.  This is why they
tend to work late at night, and why it's next to impossible
to write great software in a cubicle (except late at night).One great advantage of startups is that they don't yet have
any of the people who interrupt you.  There is no personnel
department, and thus no form nor anyone to call you about it.
Faced with the idea that people working for startups might be
20 or 30 times as productive as those working for large companies,
executives at large companies will naturally wonder, how could
I get the people working for me to do that?  The answer is
simple: pay them to.Internally most companies are run like Communist states.
If you believe in free markets, why not turn your company into one?Hypothesis: A company will be maximally profitable when each
employee is paid in proportion to the wealth they generate.
Until recently even governments sometimes didn't grasp the
distinction between money and wealth.  Adam
Smith (Wealth of Nations, v:i) mentions several
that tried to preserve their
"wealth" by forbidding the export of gold or silver.
But having more of the medium of exchange would not make
a country richer; if you have more money chasing the same
amount of material wealth, the only result is higher prices.
There are many senses of the word "wealth," not all of
them material.  I'm not trying to make a deep philosophical
point here about which
is the true kind.  I'm writing about one specific,
rather technical sense of the word "wealth."  What
people will give you money for.
This is an interesting sort of wealth to study, because
it is the kind that prevents you from starving.
And what people will give you money for depends on them,
not you.When you're starting a business,
it's easy to slide into thinking that customers
want what you do.  During the Internet Bubble I talked
to a woman who, because she liked the outdoors, was
starting an "outdoor portal." You know what
kind of business you should start if you like
the outdoors?  One to recover data from crashed hard disks.What's the connection?  None at all.  Which is precisely my point.
If you want
to create wealth (in the narrow technical sense of not
starving) then you should be especially skeptical about any
plan that centers on things you like doing.
That is where your idea of what's valuable is least
likely to coincide with other people's.
In the average car restoration you probably do make everyone
else microscopically poorer, by doing a small amount of damage to
the environment.  While environmental costs should be taken
into account, they don't
make wealth a zero-sum game.  For example, if you repair
a machine that's broken because a part has come unscrewed,
you create wealth with no environmental cost.[5b]
This essay was written before Firefox.
Many people feel confused and depressed in
their early twenties.  Life seemed so much more fun in college.
Well, of course it was.  Don't be fooled by the surface similarities.
You've gone from guest to servant.
It's possible to have fun in this new world. 
Among other things, you now get to go behind the doors that say
"authorized personnel only."
But the change is a shock at first, and all the worse
if you're not consciously aware of it.
When VCs asked us how long it would take another startup
to duplicate our software, we used to reply that they probably
wouldn't be able to at all. I think this made us seem naive,
or liars.
Few technologies have one clear inventor.  So as
a rule, if you know the "inventor" of something
(the telephone, the assembly line, the airplane, 
the light bulb, the transistor) it is because their
company made money from it, and the company's PR people worked
hard to spread the story.  If you don't know who invented
something (the automobile, the television, the computer,
the jet engine, the laser), it's because other companies
made all the money.
This is a good plan for life in general.
If you have two choices, choose the harder.
If you're trying to decide whether to go out running or
sit home and watch TV, go running.
Probably the reason this trick works so well is that
when you have two choices and one is harder, the
only reason you're even considering the other is laziness.
You know in the back of your mind what's the right thing
to do, and this trick merely forces you to acknowledge it.
It is probably no accident that the middle class
first appeared in northern Italy and the low countries,
where there were no strong central governments.   These two
regions were the richest of their time and became the twin
centers from which Renaissance civilization radiated.
If they no longer play that role, it is because
other places, like the United States, have been truer to the
principles they discovered.
It may indeed be a sufficient condition.  But if so, why didn't
the Industrial Revolution happen earlier?  Two possible (and
not incompatible) answers: (a) It did.  
The Industrial Revolution was one in a series.
(b) Because in medieval towns, monopolies
and guild regulations initially slowed the development of new means
of production.

Comment on this essay.

Want to start a startup?  Get funded by
Y Combinator.

1

2

3

4

5

[5b]

5b

6

7

8

9

10

11

1

2

3

4

5

5b

6

7

8

9

10

11

Russian Translation

Arabic Translation

Spanish Translation

You'll find this essay and 14 others in
Hackers & Painters.

You'll find this essay and 14 others in
Hackers & Painters.
<|endoftext|>

<|startoftext|>
November 2014It struck me recently how few of the most successful people I know
are mean.  There are exceptions, but remarkably few.Meanness isn't rare.  In fact, one of the things the internet has
shown us is how mean people can be.  A few decades ago, only famous
people and professional writers got to publish their opinions.  Now
everyone can, and we can all see the long tail of
meanness that had previously been hidden.And yet while there are clearly a lot of mean people out there,
there are next to none among the most successful people I know.
What's going on here?  Are meanness and success inversely correlated?Part of what's going on, of course, is selection bias.  I only know
people who work in certain fields: startup founders, programmers,
professors. I'm willing to believe that successful people in other
fields are mean.  Maybe successful hedge fund managers are mean; I
don't know enough to say.  It seems quite likely that most successful
drug lords are mean.  But there are at least big chunks of the world
that mean people don't rule, and that territory seems to be growing.My wife and Y Combinator cofounder Jessica is one of those rare
people who have x-ray vision for character. Being married to her
is like standing next to an airport baggage scanner. She came to
the startup world from investment banking, and she has always been
struck both by how consistently successful startup founders turn
out to be good people, and how consistently bad people fail as
startup founders.Why?  I think there are several reasons.  One is that being mean
makes you stupid. That's why I hate fights. You never do your best
work in a fight, because fights are not sufficiently general.
Winning is always a function of the situation and the people involved.
You don't win fights by thinking of big ideas but by thinking of
tricks that work in one particular case.  And yet fighting is just
as much work as thinking about real problems. Which is particularly
painful to someone who cares how their brain is used: your brain
goes fast but you get nowhere, like a car spinning its wheels.Startups don't win by attacking. They win by transcending. There
are exceptions of course, but usually the way to win is to race
ahead, not to stop and fight.Another reason mean founders lose is that they can't get the best
people to work for them. They can hire people who will put up with
them because they need a job. But the best people have other options.
A mean person can't convince the best people to work for him unless
he is super convincing. And while having the best people helps any
organization, it's critical for startups.There is also a complementary force at work: if you want to build
great things, it helps to be driven by a spirit of benevolence. The startup founders who end up
richest are not the ones driven by money.  The ones driven by money
take the big acquisition offer that nearly every successful startup
gets en route.

The ones who keep going are driven by something
else. They may not say so explicitly, but they're usually trying
to improve the world.  Which means people with a desire to improve
the world have a natural advantage.
The exciting thing is that startups are not just one random type
of work in which meanness and success are inversely correlated.
This kind of work is the future.For most of history success meant control of scarce resources.  One
got that by fighting, whether literally in the case of pastoral
nomads driving hunter-gatherers into marginal lands, or metaphorically
in the case of Gilded Age financiers contending with one another
to assemble railroad monopolies. For most of history, success meant
success at zero-sum games. And in most of them meanness was not a
handicap but probably an advantage.That is changing. Increasingly the games that matter are not zero-sum.
Increasingly you win not by fighting to get control of a scarce
resource, but by having new ideas and building new things.
There have long been games where you won by having new ideas. In
the third century BC, Archimedes won by doing that. At least until
an invading Roman army killed him. Which illustrates why
this change is happening: for new ideas to matter, you need a certain
degree of civil order.  And not just not being at war.  You also
need to prevent the sort of economic violence that nineteenth century
magnates practiced against one another and communist countries
practiced against their citizens.  People need to feel that what
they create can't be stolen.
That has always been the case for thinkers, which is why this trend
began with them.  When you think of successful people from history
who weren't ruthless, you get mathematicians and writers and artists.
The exciting thing is that their m.o. seems to be spreading.  The
games played by intellectuals are leaking into the real world, and
this is reversing the historical polarity of the relationship between
meanness and success.So I'm really glad I stopped to think about this. Jessica and I
have always worked hard to teach our kids not to be mean.  We
tolerate noise and mess and junk food, but not meanness.  And now
I have both an additional reason to crack down on it, and an
additional argument to use when I do: that being mean makes you
fail.
Notes
I'm not saying all founders who take big acquisition offers
are driven only by money, but rather that those who don't aren't.
Plus one can have benevolent motives for being driven by money — for 
example, to take care of one's family, or to be free to work
on projects that improve the world.
It's unlikely that every successful startup improves the
world.  But their founders, like parents, truly believe they do.
Successful founders are in love with their companies.  And while
this sort of love is as blind as the love people have for one
another, it is genuine.
Peter 
Thiel would point out that successful founders still
get rich from controlling monopolies, just monopolies they create
rather than ones they capture.  And while this is largely true, it
means a big change in the sort of person who wins.
To be fair, the Romans didn't mean to kill Archimedes.  The
Roman commander specifically ordered that he be spared. But he got
killed in the chaos anyway.In sufficiently disordered times, even thinking requires
control of scarce resources, because living at all is a scarce
resource.Thanks to Sam Altman, Ron Conway, Daniel Gackle, Jessica Livingston, Robert Morris,
Geoff Ralston, and Fred Wilson for reading drafts of this.

1

2

3

4

1

2

3

4

Portuguese Translation

Japanese Translation

Arabic Translation
<|endoftext|>

<|startoftext|>
This is a sample article about large language models (LLMs). Large language models are AI systems trained on vast amounts of text data that can generate human-like text based on the input they receive.

One of the most well-known LLMs is GPT-2, developed by OpenAI. Released in 2019, GPT-2 was a significant advancement in natural language processing, capable of generating coherent paragraphs of text.

LlamaIndex is a data framework designed to help developers build LLM applications. It provides tools for ingesting, structuring, and accessing private or domain-specific data for LLM applications. By indexing data, LlamaIndex makes it more accessible for LLM queries.

When working with LLMs and tools like LlamaIndex, it's important to consider factors such as context length, relevance of retrieved information, and the quality of the underlying dataset. These factors significantly impact the performance and accuracy of text generation.

Experimentation with different prompt structures, context windows, and retrieval methods can lead to improved results when working with LLMs and indexed data.
<|endoftext|>

<|startoftext|>
Want to start a startup?  Get funded by
Y Combinator.

January 2012There are great startup ideas lying around unexploited right under
our noses.  One reason we don't see them is a phenomenon I call
schlep blindness.  Schlep was originally a Yiddish word but has
passed into general use in the US.  It means a tedious, unpleasant
task.No one likes schleps, but hackers especially dislike them.  
Most hackers who start startups wish they could do it by just writing
some clever software, putting it on a server somewhere, and watching
the money roll in—without ever having to talk to users, or negotiate
with other companies, or deal with other people's broken code.
Maybe that's possible, but I haven't seen it.One of the many things we do at Y Combinator is teach hackers about
the inevitability of schleps.  No, you can't start a startup by
just writing code.  I remember going through this realization myself.
There was a point in 1995 when I was still trying to convince myself
I could start a company by just writing code.  But I soon learned
from experience that schleps are not merely inevitable, but pretty
much what business consists of.  A company is defined by the schleps
it will undertake.  And schleps should be dealt with the same way
you'd deal with a cold swimming pool: just jump in.  Which is not
to say you should seek out unpleasant work per se, but that you
should never shrink from it if it's on the path to something great.The most dangerous thing about our dislike of schleps is that much
of it is unconscious.  Your unconscious won't even let you see ideas
that involve painful schleps.  That's schlep blindness.The phenomenon isn't limited to startups.  Most people don't
consciously decide not to be in as good physical shape as Olympic
athletes, for example.  Their unconscious mind decides for them,
shrinking from the work involved.The most striking example I know of schlep blindness is 
Stripe, or
rather Stripe's idea.  For over a decade, every hacker who'd ever
had to process payments online knew how painful the experience was.
Thousands of people must have known about this problem.  And yet
when they started startups, they decided to build recipe sites, or
aggregators for local events.  Why?  Why work on problems few care
much about and no one will pay for, when you could fix one of the
most important components of the world's infrastructure?  Because
schlep blindness prevented people from even considering the idea
of fixing payments.Probably no one who applied to Y Combinator to work on a recipe
site began by asking "should we fix payments, or build a recipe
site?" and chose the recipe site.  Though the idea of fixing payments
was right there in plain sight, they never saw it, because their
unconscious mind shrank from the complications involved.  You'd
have to make deals with banks.  How do you do that?  Plus you're
moving money, so you're going to have to deal with fraud, and people
trying to break into your servers.  Plus there are probably all
sorts of regulations to comply with.  It's a lot more intimidating
to start a startup like this than a recipe site.That scariness makes ambitious ideas doubly valuable.  In addition
to their intrinsic value, they're like undervalued stocks in the
sense that there's less demand for them among founders.  If you
pick an ambitious idea, you'll have less competition, because
everyone else will have been frightened off by the challenges
involved.  (This is also true of starting a startup generally.)How do you overcome schlep blindness?  Frankly, the most valuable
antidote to schlep blindness is probably ignorance.  Most successful
founders would probably say that if they'd known when they were
starting their company about the obstacles they'd have to overcome,
they might never have started it.  Maybe that's one reason the most
successful startups of all so often have young founders.In practice the founders grow with the problems.  But no one seems
able to foresee that, not even older, more experienced founders.
So the reason younger founders have an advantage is that they make
two mistakes that cancel each other out.  They don't know how much
they can grow, but they also don't know how much they'll need to.
Older founders only make the first mistake.Ignorance can't solve everything though.  Some ideas so obviously
entail alarming schleps that anyone can see them.  How do you see
ideas like that?  The trick I recommend is to take yourself out of
the picture.  Instead of asking "what problem should I solve?" ask
"what problem do I wish someone else would solve for me?"  If someone
who had to process payments before Stripe had tried asking that,
Stripe would have been one of the first things they wished for.It's too late now to be Stripe, but there's plenty still broken in
the world, if you know how to see it.Thanks to Sam Altman, Paul Buchheit, Patrick Collison,
Aaron Iba, Jessica Livingston, Emmett Shear, and Harj Taggar
for reading drafts of this.

Want to start a startup?  Get funded by
Y Combinator.
<|endoftext|>

<|startoftext|>
Want to start a startup?  Get funded by
Y Combinator.

September 2012A startup is a company designed to grow fast.  Being newly founded
does not in itself make a company a startup.  Nor is it necessary
for a startup to work on technology, or take venture funding, or
have some sort of "exit."  The only essential thing is growth.
Everything else we associate with startups follows from growth.If you want to start one it's important to understand that. Startups
are so hard that you can't be pointed off to the side and hope to
succeed.  You have to know that growth is what you're after.  The
good news is, if you get growth, everything else tends to fall into
place.  Which means you can use growth like a compass to make almost
every decision you face.
RedwoodsLet's start with a distinction that should be obvious but is often
overlooked: not every newly founded company is a startup.  Millions
of companies are started every year in the US.  Only a tiny fraction
are startups.  Most are service businesses — restaurants, barbershops,
plumbers, and so on.  These are not startups, except in a few unusual
cases.  A barbershop isn't designed to grow fast.  Whereas a search
engine, for example, is.When I say startups are designed to grow fast, I mean it in two
senses.  Partly I mean designed in the sense of intended, because
most startups fail.  But I also mean startups are different by
nature, in the same way a redwood seedling has a different destiny
from a bean sprout.That difference is why there's a distinct word, "startup," for
companies designed to grow fast.  If all companies were essentially
similar, but some through luck or the efforts of their founders
ended up growing very fast, we wouldn't need a separate word.  We
could just talk about super-successful companies and less successful
ones.  But in fact startups do have a different sort of DNA from
other businesses.  Google is not just a barbershop whose founders
were unusually lucky and hard-working.  Google was different from
the beginning.To grow rapidly, you need to make something you can sell to a big
market.  That's the difference between Google and a barbershop.  A
barbershop doesn't scale.For a company to grow really big, it must (a) make something lots
of people want, and (b) reach and serve all those people.  Barbershops
are doing fine in the (a) department.  Almost everyone needs their
hair cut.  The problem for a barbershop, as for any retail
establishment, is (b).  A barbershop serves customers in person,
and few will travel far for a haircut.  And even if they did, the
barbershop couldn't accomodate them. 
Writing software is a great way to solve (b), but you can still end
up constrained in (a).  If you write software to teach Tibetan to
Hungarian speakers, you'll be able to reach most of the people who
want it, but there won't be many of them.   If you make software
to teach English to Chinese speakers, however, you're in startup
territory.Most businesses are tightly constrained in (a) or (b).  The distinctive
feature of successful startups is that they're not.
IdeasIt might seem that it would always be better to start a startup
than an ordinary business.  If you're going to start a company, why
not start the type with the most potential?  The catch is that this
is a (fairly) efficient market.   If you write software to teach
Tibetan to Hungarians, you won't have much competition.  If you
write software to teach English to Chinese speakers, you'll face
ferocious competition, precisely because that's such a larger prize.
The constraints that limit ordinary companies also protect them.
That's the tradeoff.  If you start a barbershop, you only have to
compete with other local barbers.  If you start a search engine you
have to compete with the whole world.The most important thing that the constraints on a normal business
protect it from is not competition, however, but the difficulty of
coming up with new ideas.  If you open a bar in a particular
neighborhood, as well as limiting your potential and protecting you
from competitors, that geographic constraint also helps define your
company.  Bar + neighborhood is a sufficient idea for a small
business.  Similarly for companies constrained in (a).  Your niche
both protects and defines you.Whereas if you want to start a startup, you're probably going to
have to think of something fairly novel.  A startup has to make
something it can deliver to a large market, and ideas of that type
are so valuable that all the obvious ones are already taken.That space of ideas has been so thoroughly picked over that a startup
generally has to work on something everyone else has overlooked.
I was going to write that one has to make a conscious effort to
find ideas everyone else has overlooked.  But that's not how most
startups get started.  Usually successful startups happen because
the founders are sufficiently different from other people that ideas
few others can see seem obvious to them.  Perhaps later they step
back and notice they've found an idea in everyone else's blind spot,
and from that point make a deliberate effort to stay there. 

But at the moment when successful startups get started, much of the
innovation is unconscious.What's different about successful founders is that they can see
different problems.  It's a particularly good combination both to
be good at technology and to face problems that can be solved by
it, because technology changes so rapidly that formerly bad ideas
often become good without anyone noticing.  Steve Wozniak's problem
was that he wanted his own computer.  That was an unusual problem
to have in 1975.  But technological change was about to make it a
much more common one.  Because he not only wanted a computer but
knew how to build them, Wozniak was able to make himself one.  And
the problem he solved for himself became one that Apple solved for
millions of people in the coming years.  But by the time it was
obvious to ordinary people that this was a big market, Apple was
already established.Google has similar origins.  Larry Page and Sergey Brin wanted to
search the web.  But unlike most people they had the technical
expertise both to notice that existing search engines were not as
good as they could be, and to know how to improve them.  Over the
next few years their problem became everyone's problem, as the web
grew to a size where you didn't have to be a picky search expert
to notice the old algorithms weren't good enough.  But as happened
with Apple, by the time everyone else realized how important search
was, Google was entrenched.That's one connection between startup ideas and technology.  Rapid
change in one area uncovers big, soluble problems in other areas.
Sometimes the changes are advances, and what they change is solubility.
That was the kind of change that yielded Apple; advances in chip
technology finally let Steve Wozniak design a computer he could
afford.  But in Google's case the most important change was the
growth of the web. What changed there was not solubility but bigness.The other connection between startups and technology is that startups
create new ways of doing things, and new ways of doing things are,
in the broader sense of the word, new technology.  
When a startup both begins with an
idea exposed by technological change and makes a product consisting
of technology in the narrower sense (what used to be called "high
technology"), it's easy to conflate the two.  But the two connections
are distinct and in principle one could start a startup that was
neither driven by technological change, nor whose product consisted
of technology except in the broader sense. 
RateHow fast does a company have to grow to be considered a startup?
There's no precise answer to that.  "Startup" is a pole, not a
threshold.  Starting one is at first no more than a declaration of
one's ambitions.  You're committing not just to starting a company,
but to starting a fast growing one, and you're thus committing to
search for one of the rare ideas of that type.  But at first you
have no more than commitment.  Starting a startup is like being an
actor in that respect.  "Actor" too is a pole rather than a threshold.
At the beginning of his career, an actor is a waiter who goes to
auditions.  Getting work makes him a successful actor, but he doesn't
only become an actor when he's successful.So the real question is not what growth rate makes a company a
startup, but what growth rate successful startups tend to have.
For founders that's more than a theoretical question, because it's
equivalent to asking if they're on the right path.The growth of a successful startup usually has three phases:

 There's an initial period of slow or no growth while the startup
  tries to figure out what it's doing. As the startup figures out how to make something lots of people
  want and how to reach those people, there's a period of rapid
  growth. Eventually a successful startup will grow into a big company.
  Growth will slow, partly due to internal limits and partly because
  the company is starting to bump up against the limits of the
  markets it serves.  
  

Together these three phases produce an S-curve.  The phase whose
growth defines the startup is the second one, the ascent.  Its
length and slope determine how big the company will be.The slope is the company's growth rate.  If there's one number every
founder should always know, it's the company's growth rate.  That's
the measure of a startup.  If you don't know that number, you don't
even know if you're doing well or badly.When I first meet founders and ask what their growth rate is,
sometimes they tell me "we get about a hundred new customers a
month."  That's not a rate.  What matters is not the absolute number
of new customers, but the ratio of new customers to existing ones.
If you're really getting a constant number of new customers every
month, you're in trouble, because that means your growth rate is
decreasing.During Y Combinator we measure growth rate per week, partly because
there is so little time before Demo Day, and partly because startups
early on need frequent feedback from their users to tweak what
they're doing. 
A good growth rate during YC is 5-7% a week.  If you can hit 10% a
week you're doing exceptionally well.  If you can only manage 1%,
it's a sign you haven't yet figured out what you're doing.The best thing to measure the growth rate of is revenue.  The next
best, for startups that aren't charging initially, is active users.
That's a reasonable proxy for revenue growth because whenever the
startup does start trying to make money, their revenues will probably
be a constant multiple of active users. 

CompassWe usually advise startups to pick a growth rate they think they
can hit, and then just try to hit it every week.  The key word here
is "just." If they decide to grow at 7% a week and they hit that
number, they're successful for that week.  There's nothing more
they need to do.  But if they don't hit it, they've failed in the
only thing that mattered, and should be correspondingly alarmed.Programmers will recognize what we're doing here.  We're turning
starting a startup into an optimization problem.  And anyone who
has tried optimizing code knows how wonderfully effective that sort
of narrow focus can be.  Optimizing code means taking an existing
program and changing it to use less of something, usually time or
memory.  You don't have to think about what the program should do,
just make it faster.  For most programmers this is very satisfying
work.  The narrow focus makes it a sort of puzzle, and you're
generally surprised how fast you can solve it.Focusing on hitting a growth rate reduces the otherwise bewilderingly
multifarious problem of starting a startup to a single problem.
You can use that target growth rate to make all your decisions for
you; anything that gets you the growth you need is ipso facto right.
Should you spend two days at a conference?  Should you hire another
programmer?  Should you focus more on marketing?  Should you spend
time courting some big customer?  Should you add x feature? Whatever
gets you your target growth rate. 
Judging yourself by weekly growth doesn't mean you can look no more
than a week ahead.  Once you experience the pain of missing your
target one week (it was the only thing that mattered, and you failed
at it), you become interested in anything that could spare you such
pain in the future.  So you'll be willing for example to hire another
programmer, who won't contribute to this week's growth but perhaps
in a month will have implemented some new feature that will get you
more users.   But only if (a) the distraction of hiring someone
won't make you miss your numbers in the short term, and (b) you're
sufficiently worried about whether you can keep hitting your numbers
without hiring someone new.It's not that you don't think about the future, just that you think
about it no more than necessary.In theory this sort of hill-climbing could get a startup into
trouble.  They could end up on a local maximum.  But in practice
that never happens.  Having to hit a growth number every week forces
founders to act, and acting versus not acting is the high bit of
succeeding.  Nine times out of ten, sitting around strategizing is
just a form of procrastination.  Whereas founders' intuitions about
which hill to climb are usually better than they realize.  Plus the
maxima in the space of startup ideas are not spiky and isolated.
Most fairly good ideas are adjacent to even better ones.The fascinating thing about optimizing for growth is that it can
actually discover startup ideas.  You can use the need for growth
as a form of evolutionary pressure.  If you start out with some
initial plan and modify it as necessary to keep hitting, say, 10%
weekly growth, you may end up with a quite different company than
you meant to start.  But anything that grows consistently at 10% a
week is almost certainly a better idea than you started with.There's a parallel here to small businesses.  Just as the constraint
of being located in a particular neighborhood helps define a bar,
the constraint of growing at a certain rate can help define a
startup.You'll generally do best to follow that constraint wherever it leads
rather than being influenced by some initial vision, just as a
scientist is better off following the truth wherever it leads rather
than being influenced by what he wishes were the case.  When Richard
Feynman said that the imagination of nature was greater than the
imagination of man, he meant that if you just keep following the
truth you'll discover cooler things than you could ever have made
up. For startups, growth is a constraint much like truth. Every
successful startup is at least partly a product of the imagination
of growth.  

ValueIt's hard to find something that grows consistently at several
percent a week, but if you do you may have found something surprisingly
valuable.  If we project forward we see why.

weeklyyearly
1%1.7x
2%2.8x
5%12.6x
7%33.7x
10%142.0x

A company that grows at 1% a week will grow 1.7x a year, whereas a
company that grows at 5% a week will grow 12.6x.  A company making
$1000 a month (a typical number early in YC) and growing at 1% a
week will 4 years later be making $7900 a month, which is less than
a good programmer makes in salary in Silicon Valley.  A startup
that grows at 5% a week will in 4 years be making $25 million a
month. 
Our ancestors must rarely have encountered cases of exponential
growth, because our intuitions are no guide here.  What happens
to fast growing startups tends to surprise even the founders.Small variations in growth rate produce qualitatively different
outcomes.  That's why there's a separate word for startups, and why
startups do things that ordinary companies don't, like raising money
and getting acquired.  And, strangely enough, it's also why they
fail so frequently.Considering how valuable a successful startup can become, anyone
familiar with the concept of expected value would be surprised if
the failure rate weren't high.  If a successful startup could make
a founder $100 million, then even if the chance of succeeding were
only 1%, the expected value of starting one would be $1 million.
And the probability of a group of sufficiently smart and determined
founders succeeding on that scale might be significantly over 1%.
For the right people — e.g. the young Bill Gates — the probability
might be 20% or even 50%.  So it's not surprising that so many want
to take a shot at it.  In an efficient market, the number of failed
startups should be proportionate to the size of the successes.  And
since the latter is huge the former should be too. 
What this means is that at any given time, the great majority of
startups will be working on something that's never going to go
anywhere, and yet glorifying their doomed efforts with the grandiose
title of "startup."This doesn't bother me.  It's the same with other high-beta vocations,
like being an actor or a novelist.  I've long since gotten used to
it.  But it seems to bother a lot of people, particularly those
who've started ordinary businesses.  Many are annoyed that these
so-called startups get all the attention, when hardly any of them
will amount to anything.If they stepped back and looked at the whole picture they might be
less indignant.  The mistake they're making is that by basing their
opinions on anecdotal evidence they're implicitly judging by the
median rather than the average.  If you judge by the median startup,
the whole concept of a startup seems like a fraud.  You have to
invent a bubble to explain why founders want to start them or
investors want to fund them.  But it's a mistake to use the median
in a domain with so much variation.  If you look at the average
outcome rather than the median, you can understand why investors
like them, and why, if they aren't median people, it's a rational
choice for founders to start them.
DealsWhy do investors like startups so much?  Why are they so hot to
invest in photo-sharing apps, rather than solid money-making
businesses?  Not only for the obvious reason.The test of any investment is the ratio of return to risk.  Startups
pass that test because although they're appallingly risky, the
returns when they do succeed are so high.  But that's not the only
reason investors like startups.  An ordinary slower-growing business
might have just as good a ratio of return to risk, if both were
lower.  So why are VCs interested only in high-growth companies?
The reason is that they get paid by getting their capital back,
ideally after the startup IPOs, or failing that when it's acquired.The other way to get returns from an investment is in the form of
dividends.  Why isn't there a parallel VC industry that invests in
ordinary companies in return for a percentage of their profits?
Because it's too easy for people who control a private company to
funnel its revenues to themselves (e.g. by buying overpriced
components from a supplier they control) while making it look like
the company is making little profit.  Anyone who invested in private
companies in return for dividends would have to pay close attention
to their books.The reason VCs like to invest in startups is not simply the returns,
but also because such investments are so easy to oversee.  The
founders can't enrich themselves without also enriching the investors.
Why do founders want to take the VCs' money?  Growth, again.  The
constraint between good ideas and growth operates in both directions.
It's not merely that you need a scalable idea to grow.  If you have
such an idea and don't grow fast enough, competitors will.  Growing
too slowly is particularly dangerous in a business with network
effects, which the best startups usually have to some degree.Almost every company needs some amount of funding to get started.
But startups often raise money even when they are or could be
profitable.  It might seem foolish to sell stock in a profitable
company for less than you think it will later be worth, but it's
no more foolish than buying insurance.  Fundamentally that's how
the most successful startups view fundraising.  They could grow the
company on its own revenues, but the extra money and help supplied
by VCs will let them grow even faster.  Raising money lets you
choose your growth rate.Money to grow faster is always at the command of the most successful
startups, because the VCs need them more than they need the VCs.
A profitable startup could if it wanted just grow on its own revenues.
Growing slower might be slightly dangerous, but chances are it
wouldn't kill them.  Whereas VCs need to invest in startups, and
in particular the most successful startups, or they'll be out of
business.  Which means that any sufficiently promising startup will
be offered money on terms they'd be crazy to refuse.  And yet because
of the scale of the successes in the startup business, VCs can still
make money from such investments.  You'd have to be crazy to believe
your company was going to become as valuable as a high growth rate
can make it, but some do.Pretty much every successful startup will get acquisition offers
too.  Why?  What is it about startups that makes other companies
want to buy them? 
Fundamentally the same thing that makes everyone else want the stock
of successful startups: a rapidly growing company is valuable.  It's
a good thing eBay bought Paypal, for example, because Paypal is now
responsible for 43% of their sales and probably more of their growth.But acquirers have an additional reason to want startups.  A rapidly
growing company is not merely valuable, but dangerous.  If it keeps
expanding, it might expand into the acquirer's own territory.  Most
product acquisitions have some component of fear.  Even if an
acquirer isn't threatened by the startup itself, they might be
alarmed at the thought of what a competitor could do with it.  And
because startups are in this sense doubly valuable to acquirers,
acquirers will often pay more than an ordinary investor would. 

UnderstandThe combination of founders, investors, and acquirers forms a natural
ecosystem.  It works so well that those who don't understand it are
driven to invent conspiracy theories to explain how neatly things
sometimes turn out.  Just as our ancestors did to explain the
apparently too neat workings of the natural world.  But there is
no secret cabal making it all work.If you start from the mistaken assumption that Instagram was
worthless, you have to invent a secret boss to force Mark Zuckerberg
to buy it.  To anyone who knows Mark Zuckerberg, that is the reductio
ad absurdum of the initial assumption.  The reason he bought Instagram
was that it was valuable and dangerous, and what made it so was
growth.If you want to understand startups, understand growth.  Growth
drives everything in this world.  Growth is why startups usually
work on technology — because ideas for fast growing companies are
so rare that the best way to find new ones is to discover those
recently made viable by change, and technology is the best source
of rapid change.  Growth is why it's a rational choice economically
for so many founders to try starting a startup: growth makes the
successful companies so valuable that the expected value is high
even though the risk is too.  Growth is why VCs want to invest in
startups: not just because the returns are high but also because
generating returns from capital gains is easier to manage than
generating returns from dividends.  Growth explains why the most
successful startups take VC money even if they don't need to: it
lets them choose their growth rate.  And growth explains why
successful startups almost invariably get acquisition offers.  To
acquirers a fast-growing company is not merely valuable but dangerous
too.It's not just that if you want to succeed in some domain, you have
to understand the forces driving it.  Understanding growth is what
starting a startup consists of.  What you're really doing (and
to the dismay of some observers, all you're really doing) when you
start a startup is committing to solve a harder type of problem
than ordinary businesses do.  You're committing to search for one
of the rare ideas that generates rapid growth.  Because these ideas
are so valuable, finding one is hard.  The startup is the embodiment
of your discoveries so far.  Starting a startup is thus very much
like deciding to be a research scientist: you're not committing to
solve any specific problem; you don't know for sure which problems
are soluble; but you're committing to try to discover something no
one knew before.  A startup founder is in effect an economic research
scientist.  Most don't discover anything that remarkable, but some
discover relativity.
Notes
Strictly speaking it's not lots of customers you need but a big
market, meaning a high product of number of customers times how
much they'll pay.  But it's dangerous to have too few customers
even if they pay a lot, or the power that individual customers have
over you could turn you into a de facto consulting firm.  So whatever
market you're in, you'll usually do best to err on the side of
making the broadest type of product for it.
One year at Startup School David Heinemeier Hansson encouraged
programmers who wanted to start businesses to use a restaurant as
a model.  What he meant, I believe, is that it's fine to start
software companies constrained in (a) in the same way a restaurant
is constrained in (b).  I agree.  Most people should not try to
start startups.
That sort of stepping back is one of the things we focus on at
Y Combinator.  It's common for founders to have discovered something
intuitively without understanding all its implications.  That's
probably true of the biggest discoveries in any field.
I got it wrong in "How to Make Wealth" when I said that a
startup was a small company that takes on a hard technical
problem.  That is the most common recipe but not the only one.
In principle companies aren't limited by the size of the markets
they serve, because they could just expand into new markets.  But
there seem to be limits on the ability of big companies to do that.
Which means the slowdown that comes from bumping up against the
limits of one's markets is ultimately just another way in which
internal limits are expressed.It may be that some of these limits could be overcome by changing
the shape of the organization — specifically by sharding it.
This is, obviously, only for startups that have already launched
or can launch during YC.  A startup building a new database will
probably not do that.  On the other hand, launching something small
and then using growth rate as evolutionary pressure is such a
valuable technique that any company that could start this way
probably should.
If the startup is taking the Facebook/Twitter route and building
something they hope will be very popular but from which they don't
yet have a definite plan to make money, the growth rate has to be
higher, even though it's a proxy for revenue growth, because such
companies need huge numbers of users to succeed at all.Beware too of the edge case where something spreads rapidly but the
churn is high as well, so that you have good net growth till you run
through all the potential users, at which point it suddenly stops.
Within YC when we say it's ipso facto right to do whatever gets
you growth, it's implicit that this excludes trickery like buying
users for more than their lifetime value, counting users as active
when they're really not, bleeding out invites at a regularly
increasing rate to manufacture a perfect growth curve, etc.  Even
if you were able to fool investors with such tricks, you'd ultimately
be hurting yourself, because you're throwing off your own compass.
Which is why it's such a dangerous mistake to believe that
successful startups are simply the embodiment of some brilliant
initial idea.  What you're looking for initially is not so much a
great idea as an idea that could evolve into a great one.   The
danger is that promising ideas are not merely blurry versions of
great ones.  They're often different in kind, because the early
adopters you evolve the idea upon have different needs from the
rest of the market.  For example, the idea that evolves into Facebook
isn't merely a subset of Facebook; the idea that evolves into
Facebook is a site for Harvard undergrads.
What if a company grew at 1.7x a year for a really long time?
Could it not grow just as big as any successful startup?  In principle
yes, of course. If our hypothetical company making $1000 a month
grew at 1% a week for 19 years, it would grow as big as a company
growing at 5% a week for 4 years.  But while such trajectories may
be common in, say, real estate development, you don't see them much
in the technology business.  In technology, companies that grow
slowly tend not to grow as big.
Any expected value calculation varies from person to person
depending on their utility function for money.  I.e. the first
million is worth more to most people than subsequent millions.  How
much more depends on the person.  For founders who are younger or
more ambitious the utility function is flatter.  Which is probably
part of the reason the founders of the most successful startups of
all tend to be on the young side.
More precisely, this is the case in the biggest winners, which
is where all the returns come from.  A startup founder could pull
the same trick of enriching himself at the company's expense by
selling them overpriced components.  But it wouldn't be worth it
for the founders of Google to do that.  Only founders of failing
startups would even be tempted, but those are writeoffs from the
VCs' point of view anyway.
Acquisitions fall into two categories: those where the acquirer
wants the business, and those where the acquirer just wants the
employees.  The latter type is sometimes called an HR acquisition.
Though nominally acquisitions and sometimes on a scale that has a
significant effect on the expected value calculation for potential
founders, HR acquisitions are viewed by acquirers as more akin to
hiring bonuses.
I once explained this to some founders who had recently arrived
from Russia.  They found it novel that if you threatened a company
they'd pay a premium for you.  "In Russia they just kill you," they
said, and they were only partly joking.  Economically, the fact
that established companies can't simply eliminate new competitors
may be one of the most valuable aspects of the rule of law.  And
so to the extent we see incumbents suppressing competitors via
regulations or patent suits, we should worry, not because it's a
departure from the rule of law per se but from what the rule of law
is aiming at.
Thanks to Sam Altman, Marc Andreessen, Paul Buchheit, Patrick
Collison, Jessica Livingston, Geoff Ralston, and Harj Taggar for
reading drafts of this.
<|endoftext|>

<|startoftext|>
Want to start a startup?  Get funded by
Y Combinator.

September 2012A startup is a company designed to grow fast.  Being newly founded
does not in itself make a company a startup.  Nor is it necessary
for a startup to work on technology, or take venture funding, or
have some sort of "exit."  The only essential thing is growth.
Everything else we associate with startups follows from growth.If you want to start one it's important to understand that. Startups
are so hard that you can't be pointed off to the side and hope to
succeed.  You have to know that growth is what you're after.  The
good news is, if you get growth, everything else tends to fall into
place.  Which means you can use growth like a compass to make almost
every decision you face.
RedwoodsLet's start with a distinction that should be obvious but is often
overlooked: not every newly founded company is a startup.  Millions
of companies are started every year in the US.  Only a tiny fraction
are startups.  Most are service businesses — restaurants, barbershops,
plumbers, and so on.  These are not startups, except in a few unusual
cases.  A barbershop isn't designed to grow fast.  Whereas a search
engine, for example, is.When I say startups are designed to grow fast, I mean it in two
senses.  Partly I mean designed in the sense of intended, because
most startups fail.  But I also mean startups are different by
nature, in the same way a redwood seedling has a different destiny
from a bean sprout.That difference is why there's a distinct word, "startup," for
companies designed to grow fast.  If all companies were essentially
similar, but some through luck or the efforts of their founders
ended up growing very fast, we wouldn't need a separate word.  We
could just talk about super-successful companies and less successful
ones.  But in fact startups do have a different sort of DNA from
other businesses.  Google is not just a barbershop whose founders
were unusually lucky and hard-working.  Google was different from
the beginning.To grow rapidly, you need to make something you can sell to a big
market.  That's the difference between Google and a barbershop.  A
barbershop doesn't scale.For a company to grow really big, it must (a) make something lots
of people want, and (b) reach and serve all those people.  Barbershops
are doing fine in the (a) department.  Almost everyone needs their
hair cut.  The problem for a barbershop, as for any retail
establishment, is (b).  A barbershop serves customers in person,
and few will travel far for a haircut.  And even if they did, the
barbershop couldn't accomodate them. 
Writing software is a great way to solve (b), but you can still end
up constrained in (a).  If you write software to teach Tibetan to
Hungarian speakers, you'll be able to reach most of the people who
want it, but there won't be many of them.   If you make software
to teach English to Chinese speakers, however, you're in startup
territory.Most businesses are tightly constrained in (a) or (b).  The distinctive
feature of successful startups is that they're not.
IdeasIt might seem that it would always be better to start a startup
than an ordinary business.  If you're going to start a company, why
not start the type with the most potential?  The catch is that this
is a (fairly) efficient market.   If you write software to teach
Tibetan to Hungarians, you won't have much competition.  If you
write software to teach English to Chinese speakers, you'll face
ferocious competition, precisely because that's such a larger prize.
The constraints that limit ordinary companies also protect them.
That's the tradeoff.  If you start a barbershop, you only have to
compete with other local barbers.  If you start a search engine you
have to compete with the whole world.The most important thing that the constraints on a normal business
protect it from is not competition, however, but the difficulty of
coming up with new ideas.  If you open a bar in a particular
neighborhood, as well as limiting your potential and protecting you
from competitors, that geographic constraint also helps define your
company.  Bar + neighborhood is a sufficient idea for a small
business.  Similarly for companies constrained in (a).  Your niche
both protects and defines you.Whereas if you want to start a startup, you're probably going to
have to think of something fairly novel.  A startup has to make
something it can deliver to a large market, and ideas of that type
are so valuable that all the obvious ones are already taken.That space of ideas has been so thoroughly picked over that a startup
generally has to work on something everyone else has overlooked.
I was going to write that one has to make a conscious effort to
find ideas everyone else has overlooked.  But that's not how most
startups get started.  Usually successful startups happen because
the founders are sufficiently different from other people that ideas
few others can see seem obvious to them.  Perhaps later they step
back and notice they've found an idea in everyone else's blind spot,
and from that point make a deliberate effort to stay there. 

But at the moment when successful startups get started, much of the
innovation is unconscious.What's different about successful founders is that they can see
different problems.  It's a particularly good combination both to
be good at technology and to face problems that can be solved by
it, because technology changes so rapidly that formerly bad ideas
often become good without anyone noticing.  Steve Wozniak's problem
was that he wanted his own computer.  That was an unusual problem
to have in 1975.  But technological change was about to make it a
much more common one.  Because he not only wanted a computer but
knew how to build them, Wozniak was able to make himself one.  And
the problem he solved for himself became one that Apple solved for
millions of people in the coming years.  But by the time it was
obvious to ordinary people that this was a big market, Apple was
already established.Google has similar origins.  Larry Page and Sergey Brin wanted to
search the web.  But unlike most people they had the technical
expertise both to notice that existing search engines were not as
good as they could be, and to know how to improve them.  Over the
next few years their problem became everyone's problem, as the web
grew to a size where you didn't have to be a picky search expert
to notice the old algorithms weren't good enough.  But as happened
with Apple, by the time everyone else realized how important search
was, Google was entrenched.That's one connection between startup ideas and technology.  Rapid
change in one area uncovers big, soluble problems in other areas.
Sometimes the changes are advances, and what they change is solubility.
That was the kind of change that yielded Apple; advances in chip
technology finally let Steve Wozniak design a computer he could
afford.  But in Google's case the most important change was the
growth of the web. What changed there was not solubility but bigness.The other connection between startups and technology is that startups
create new ways of doing things, and new ways of doing things are,
in the broader sense of the word, new technology.  
When a startup both begins with an
idea exposed by technological change and makes a product consisting
of technology in the narrower sense (what used to be called "high
technology"), it's easy to conflate the two.  But the two connections
are distinct and in principle one could start a startup that was
neither driven by technological change, nor whose product consisted
of technology except in the broader sense. 
RateHow fast does a company have to grow to be considered a startup?
There's no precise answer to that.  "Startup" is a pole, not a
threshold.  Starting one is at first no more than a declaration of
one's ambitions.  You're committing not just to starting a company,
but to starting a fast growing one, and you're thus committing to
search for one of the rare ideas of that type.  But at first you
have no more than commitment.  Starting a startup is like being an
actor in that respect.  "Actor" too is a pole rather than a threshold.
At the beginning of his career, an actor is a waiter who goes to
auditions.  Getting work makes him a successful actor, but he doesn't
only become an actor when he's successful.So the real question is not what growth rate makes a company a
startup, but what growth rate successful startups tend to have.
For founders that's more than a theoretical question, because it's
equivalent to asking if they're on the right path.The growth of a successful startup usually has three phases:

 There's an initial period of slow or no growth while the startup
  tries to figure out what it's doing. As the startup figures out how to make something lots of people
  want and how to reach those people, there's a period of rapid
  growth. Eventually a successful startup will grow into a big company.
  Growth will slow, partly due to internal limits and partly because
  the company is starting to bump up against the limits of the
  markets it serves.  
  

Together these three phases produce an S-curve.  The phase whose
growth defines the startup is the second one, the ascent.  Its
length and slope determine how big the company will be.The slope is the company's growth rate.  If there's one number every
founder should always know, it's the company's growth rate.  That's
the measure of a startup.  If you don't know that number, you don't
even know if you're doing well or badly.When I first meet founders and ask what their growth rate is,
sometimes they tell me "we get about a hundred new customers a
month."  That's not a rate.  What matters is not the absolute number
of new customers, but the ratio of new customers to existing ones.
If you're really getting a constant number of new customers every
month, you're in trouble, because that means your growth rate is
decreasing.During Y Combinator we measure growth rate per week, partly because
there is so little time before Demo Day, and partly because startups
early on need frequent feedback from their users to tweak what
they're doing. 
A good growth rate during YC is 5-7% a week.  If you can hit 10% a
week you're doing exceptionally well.  If you can only manage 1%,
it's a sign you haven't yet figured out what you're doing.The best thing to measure the growth rate of is revenue.  The next
best, for startups that aren't charging initially, is active users.
That's a reasonable proxy for revenue growth because whenever the
startup does start trying to make money, their revenues will probably
be a constant multiple of active users. 

CompassWe usually advise startups to pick a growth rate they think they
can hit, and then just try to hit it every week.  The key word here
is "just." If they decide to grow at 7% a week and they hit that
number, they're successful for that week.  There's nothing more
they need to do.  But if they don't hit it, they've failed in the
only thing that mattered, and should be correspondingly alarmed.Programmers will recognize what we're doing here.  We're turning
starting a startup into an optimization problem.  And anyone who
has tried optimizing code knows how wonderfully effective that sort
of narrow focus can be.  Optimizing code means taking an existing
program and changing it to use less of something, usually time or
memory.  You don't have to think about what the program should do,
just make it faster.  For most programmers this is very satisfying
work.  The narrow focus makes it a sort of puzzle, and you're
generally surprised how fast you can solve it.Focusing on hitting a growth rate reduces the otherwise bewilderingly
multifarious problem of starting a startup to a single problem.
You can use that target growth rate to make all your decisions for
you; anything that gets you the growth you need is ipso facto right.
Should you spend two days at a conference?  Should you hire another
programmer?  Should you focus more on marketing?  Should you spend
time courting some big customer?  Should you add x feature? Whatever
gets you your target growth rate. 
Judging yourself by weekly growth doesn't mean you can look no more
than a week ahead.  Once you experience the pain of missing your
target one week (it was the only thing that mattered, and you failed
at it), you become interested in anything that could spare you such
pain in the future.  So you'll be willing for example to hire another
programmer, who won't contribute to this week's growth but perhaps
in a month will have implemented some new feature that will get you
more users.   But only if (a) the distraction of hiring someone
won't make you miss your numbers in the short term, and (b) you're
sufficiently worried about whether you can keep hitting your numbers
without hiring someone new.It's not that you don't think about the future, just that you think
about it no more than necessary.In theory this sort of hill-climbing could get a startup into
trouble.  They could end up on a local maximum.  But in practice
that never happens.  Having to hit a growth number every week forces
founders to act, and acting versus not acting is the high bit of
succeeding.  Nine times out of ten, sitting around strategizing is
just a form of procrastination.  Whereas founders' intuitions about
which hill to climb are usually better than they realize.  Plus the
maxima in the space of startup ideas are not spiky and isolated.
Most fairly good ideas are adjacent to even better ones.The fascinating thing about optimizing for growth is that it can
actually discover startup ideas.  You can use the need for growth
as a form of evolutionary pressure.  If you start out with some
initial plan and modify it as necessary to keep hitting, say, 10%
weekly growth, you may end up with a quite different company than
you meant to start.  But anything that grows consistently at 10% a
week is almost certainly a better idea than you started with.There's a parallel here to small businesses.  Just as the constraint
of being located in a particular neighborhood helps define a bar,
the constraint of growing at a certain rate can help define a
startup.You'll generally do best to follow that constraint wherever it leads
rather than being influenced by some initial vision, just as a
scientist is better off following the truth wherever it leads rather
than being influenced by what he wishes were the case.  When Richard
Feynman said that the imagination of nature was greater than the
imagination of man, he meant that if you just keep following the
truth you'll discover cooler things than you could ever have made
up. For startups, growth is a constraint much like truth. Every
successful startup is at least partly a product of the imagination
of growth.  

ValueIt's hard to find something that grows consistently at several
percent a week, but if you do you may have found something surprisingly
valuable.  If we project forward we see why.

weeklyyearly
1%1.7x
2%2.8x
5%12.6x
7%33.7x
10%142.0x

A company that grows at 1% a week will grow 1.7x a year, whereas a
company that grows at 5% a week will grow 12.6x.  A company making
$1000 a month (a typical number early in YC) and growing at 1% a
week will 4 years later be making $7900 a month, which is less than
a good programmer makes in salary in Silicon Valley.  A startup
that grows at 5% a week will in 4 years be making $25 million a
month. 
Our ancestors must rarely have encountered cases of exponential
growth, because our intuitions are no guide here.  What happens
to fast growing startups tends to surprise even the founders.Small variations in growth rate produce qualitatively different
outcomes.  That's why there's a separate word for startups, and why
startups do things that ordinary companies don't, like raising money
and getting acquired.  And, strangely enough, it's also why they
fail so frequently.Considering how valuable a successful startup can become, anyone
familiar with the concept of expected value would be surprised if
the failure rate weren't high.  If a successful startup could make
a founder $100 million, then even if the chance of succeeding were
only 1%, the expected value of starting one would be $1 million.
And the probability of a group of sufficiently smart and determined
founders succeeding on that scale might be significantly over 1%.
For the right people — e.g. the young Bill Gates — the probability
might be 20% or even 50%.  So it's not surprising that so many want
to take a shot at it.  In an efficient market, the number of failed
startups should be proportionate to the size of the successes.  And
since the latter is huge the former should be too. 
What this means is that at any given time, the great majority of
startups will be working on something that's never going to go
anywhere, and yet glorifying their doomed efforts with the grandiose
title of "startup."This doesn't bother me.  It's the same with other high-beta vocations,
like being an actor or a novelist.  I've long since gotten used to
it.  But it seems to bother a lot of people, particularly those
who've started ordinary businesses.  Many are annoyed that these
so-called startups get all the attention, when hardly any of them
will amount to anything.If they stepped back and looked at the whole picture they might be
less indignant.  The mistake they're making is that by basing their
opinions on anecdotal evidence they're implicitly judging by the
median rather than the average.  If you judge by the median startup,
the whole concept of a startup seems like a fraud.  You have to
invent a bubble to explain why founders want to start them or
investors want to fund them.  But it's a mistake to use the median
in a domain with so much variation.  If you look at the average
outcome rather than the median, you can understand why investors
like them, and why, if they aren't median people, it's a rational
choice for founders to start them.
DealsWhy do investors like startups so much?  Why are they so hot to
invest in photo-sharing apps, rather than solid money-making
businesses?  Not only for the obvious reason.The test of any investment is the ratio of return to risk.  Startups
pass that test because although they're appallingly risky, the
returns when they do succeed are so high.  But that's not the only
reason investors like startups.  An ordinary slower-growing business
might have just as good a ratio of return to risk, if both were
lower.  So why are VCs interested only in high-growth companies?
The reason is that they get paid by getting their capital back,
ideally after the startup IPOs, or failing that when it's acquired.The other way to get returns from an investment is in the form of
dividends.  Why isn't there a parallel VC industry that invests in
ordinary companies in return for a percentage of their profits?
Because it's too easy for people who control a private company to
funnel its revenues to themselves (e.g. by buying overpriced
components from a supplier they control) while making it look like
the company is making little profit.  Anyone who invested in private
companies in return for dividends would have to pay close attention
to their books.The reason VCs like to invest in startups is not simply the returns,
but also because such investments are so easy to oversee.  The
founders can't enrich themselves without also enriching the investors.
Why do founders want to take the VCs' money?  Growth, again.  The
constraint between good ideas and growth operates in both directions.
It's not merely that you need a scalable idea to grow.  If you have
such an idea and don't grow fast enough, competitors will.  Growing
too slowly is particularly dangerous in a business with network
effects, which the best startups usually have to some degree.Almost every company needs some amount of funding to get started.
But startups often raise money even when they are or could be
profitable.  It might seem foolish to sell stock in a profitable
company for less than you think it will later be worth, but it's
no more foolish than buying insurance.  Fundamentally that's how
the most successful startups view fundraising.  They could grow the
company on its own revenues, but the extra money and help supplied
by VCs will let them grow even faster.  Raising money lets you
choose your growth rate.Money to grow faster is always at the command of the most successful
startups, because the VCs need them more than they need the VCs.
A profitable startup could if it wanted just grow on its own revenues.
Growing slower might be slightly dangerous, but chances are it
wouldn't kill them.  Whereas VCs need to invest in startups, and
in particular the most successful startups, or they'll be out of
business.  Which means that any sufficiently promising startup will
be offered money on terms they'd be crazy to refuse.  And yet because
of the scale of the successes in the startup business, VCs can still
make money from such investments.  You'd have to be crazy to believe
your company was going to become as valuable as a high growth rate
can make it, but some do.Pretty much every successful startup will get acquisition offers
too.  Why?  What is it about startups that makes other companies
want to buy them? 
Fundamentally the same thing that makes everyone else want the stock
of successful startups: a rapidly growing company is valuable.  It's
a good thing eBay bought Paypal, for example, because Paypal is now
responsible for 43% of their sales and probably more of their growth.But acquirers have an additional reason to want startups.  A rapidly
growing company is not merely valuable, but dangerous.  If it keeps
expanding, it might expand into the acquirer's own territory.  Most
product acquisitions have some component of fear.  Even if an
acquirer isn't threatened by the startup itself, they might be
alarmed at the thought of what a competitor could do with it.  And
because startups are in this sense doubly valuable to acquirers,
acquirers will often pay more than an ordinary investor would. 

UnderstandThe combination of founders, investors, and acquirers forms a natural
ecosystem.  It works so well that those who don't understand it are
driven to invent conspiracy theories to explain how neatly things
sometimes turn out.  Just as our ancestors did to explain the
apparently too neat workings of the natural world.  But there is
no secret cabal making it all work.If you start from the mistaken assumption that Instagram was
worthless, you have to invent a secret boss to force Mark Zuckerberg
to buy it.  To anyone who knows Mark Zuckerberg, that is the reductio
ad absurdum of the initial assumption.  The reason he bought Instagram
was that it was valuable and dangerous, and what made it so was
growth.If you want to understand startups, understand growth.  Growth
drives everything in this world.  Growth is why startups usually
work on technology — because ideas for fast growing companies are
so rare that the best way to find new ones is to discover those
recently made viable by change, and technology is the best source
of rapid change.  Growth is why it's a rational choice economically
for so many founders to try starting a startup: growth makes the
successful companies so valuable that the expected value is high
even though the risk is too.  Growth is why VCs want to invest in
startups: not just because the returns are high but also because
generating returns from capital gains is easier to manage than
generating returns from dividends.  Growth explains why the most
successful startups take VC money even if they don't need to: it
lets them choose their growth rate.  And growth explains why
successful startups almost invariably get acquisition offers.  To
acquirers a fast-growing company is not merely valuable but dangerous
too.It's not just that if you want to succeed in some domain, you have
to understand the forces driving it.  Understanding growth is what
starting a startup consists of.  What you're really doing (and
to the dismay of some observers, all you're really doing) when you
start a startup is committing to solve a harder type of problem
than ordinary businesses do.  You're committing to search for one
of the rare ideas that generates rapid growth.  Because these ideas
are so valuable, finding one is hard.  The startup is the embodiment
of your discoveries so far.  Starting a startup is thus very much
like deciding to be a research scientist: you're not committing to
solve any specific problem; you don't know for sure which problems
are soluble; but you're committing to try to discover something no
one knew before.  A startup founder is in effect an economic research
scientist.  Most don't discover anything that remarkable, but some
discover relativity.
Notes
Strictly speaking it's not lots of customers you need but a big
market, meaning a high product of number of customers times how
much they'll pay.  But it's dangerous to have too few customers
even if they pay a lot, or the power that individual customers have
over you could turn you into a de facto consulting firm.  So whatever
market you're in, you'll usually do best to err on the side of
making the broadest type of product for it.
One year at Startup School David Heinemeier Hansson encouraged
programmers who wanted to start businesses to use a restaurant as
a model.  What he meant, I believe, is that it's fine to start
software companies constrained in (a) in the same way a restaurant
is constrained in (b).  I agree.  Most people should not try to
start startups.
That sort of stepping back is one of the things we focus on at
Y Combinator.  It's common for founders to have discovered something
intuitively without understanding all its implications.  That's
probably true of the biggest discoveries in any field.
I got it wrong in "How to Make Wealth" when I said that a
startup was a small company that takes on a hard technical
problem.  That is the most common recipe but not the only one.
In principle companies aren't limited by the size of the markets
they serve, because they could just expand into new markets.  But
there seem to be limits on the ability of big companies to do that.
Which means the slowdown that comes from bumping up against the
limits of one's markets is ultimately just another way in which
internal limits are expressed.It may be that some of these limits could be overcome by changing
the shape of the organization — specifically by sharding it.
This is, obviously, only for startups that have already launched
or can launch during YC.  A startup building a new database will
probably not do that.  On the other hand, launching something small
and then using growth rate as evolutionary pressure is such a
valuable technique that any company that could start this way
probably should.
If the startup is taking the Facebook/Twitter route and building
something they hope will be very popular but from which they don't
yet have a definite plan to make money, the growth rate has to be
higher, even though it's a proxy for revenue growth, because such
companies need huge numbers of users to succeed at all.Beware too of the edge case where something spreads rapidly but the
churn is high as well, so that you have good net growth till you run
through all the potential users, at which point it suddenly stops.
Within YC when we say it's ipso facto right to do whatever gets
you growth, it's implicit that this excludes trickery like buying
users for more than their lifetime value, counting users as active
when they're really not, bleeding out invites at a regularly
increasing rate to manufacture a perfect growth curve, etc.  Even
if you were able to fool investors with such tricks, you'd ultimately
be hurting yourself, because you're throwing off your own compass.
Which is why it's such a dangerous mistake to believe that
successful startups are simply the embodiment of some brilliant
initial idea.  What you're looking for initially is not so much a
great idea as an idea that could evolve into a great one.   The
danger is that promising ideas are not merely blurry versions of
great ones.  They're often different in kind, because the early
adopters you evolve the idea upon have different needs from the
rest of the market.  For example, the idea that evolves into Facebook
isn't merely a subset of Facebook; the idea that evolves into
Facebook is a site for Harvard undergrads.
What if a company grew at 1.7x a year for a really long time?
Could it not grow just as big as any successful startup?  In principle
yes, of course. If our hypothetical company making $1000 a month
grew at 1% a week for 19 years, it would grow as big as a company
growing at 5% a week for 4 years.  But while such trajectories may
be common in, say, real estate development, you don't see them much
in the technology business.  In technology, companies that grow
slowly tend not to grow as big.
Any expected value calculation varies from person to person
depending on their utility function for money.  I.e. the first
million is worth more to most people than subsequent millions.  How
much more depends on the person.  For founders who are younger or
more ambitious the utility function is flatter.  Which is probably
part of the reason the founders of the most successful startups of
all tend to be on the young side.
More precisely, this is the case in the biggest winners, which
is where all the returns come from.  A startup founder could pull
the same trick of enriching himself at the company's expense by
selling them overpriced components.  But it wouldn't be worth it
for the founders of Google to do that.  Only founders of failing
startups would even be tempted, but those are writeoffs from the
VCs' point of view anyway.
Acquisitions fall into two categories: those where the acquirer
wants the business, and those where the acquirer just wants the
employees.  The latter type is sometimes called an HR acquisition.
Though nominally acquisitions and sometimes on a scale that has a
significant effect on the expected value calculation for potential
founders, HR acquisitions are viewed by acquirers as more akin to
hiring bonuses.
I once explained this to some founders who had recently arrived
from Russia.  They found it novel that if you threatened a company
they'd pay a premium for you.  "In Russia they just kill you," they
said, and they were only partly joking.  Economically, the fact
that established companies can't simply eliminate new competitors
may be one of the most valuable aspects of the rule of law.  And
so to the extent we see incumbents suppressing competitors via
regulations or patent suits, we should worry, not because it's a
departure from the rule of law per se but from what the rule of law
is aiming at.
Thanks to Sam Altman, Marc Andreessen, Paul Buchheit, Patrick
Collison, Jessica Livingston, Geoff Ralston, and Harj Taggar for
reading drafts of this.

Want to start a startup?  Get funded by
Y Combinator.

1

2

3

4

5

6

7

8

9

weeklyyearly

yearly

1%

1.7x

2%

2.8x

5%

12.6x

7%

33.7x

10%

142.0x

10

11

12

13

14

1

2

3

4

5

6

7

8

9

10

11

12

13

14

Arabic Translation

Estonian Translation

Portuguese Translation

Italian Translation
<|endoftext|>

